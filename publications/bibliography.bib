
@inproceedings{guduric_comparison_2009,
	address = {Las Vegas, {NV}, {USA}},
	title = {A Comparison between Relational and Operational {QVT} Mappings},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/ITNG.2009.156},
	abstract = {Model driven approaches raise the level of abstraction during software development, where the focus of the development process is no longer on programming, but instead on the creation of different models. The {OMG} is addressing this new methodology with their Model Driven Architecture {(MDA).} The {Query/Views/Transformation} {(QVT)} specification is part of the {OMG’s} {MDA} framework for combining declarative and imperative transformation languages between models. {QVT-R} uses a declarative (relational) approach to describe mappings between models, whereas {QVT-O} uses an imperative (operational) approach. Tools in this domain are still in their infancy and there exist no empirical study to compare {QVT-O} and {QVT-R} for complex application domains. In this paper we show how both {QVT-R} and {QVT-O} can be used to map byte code instructions for Microsoft’s {.NET} virtual machine to Sun Microsystem’s Java Virtual Machine. We provide an extensive comparison between {QVT-O} and {QVT-R} and offer some best practices for using either transformation language.},
	booktitle = {2009 Sixth International Conference on Information Technology: New Generations},
	author = {Guduric, Pavle and Puder, Arno and Todtenhoefer, Rainer},
	year = {2009},
	keywords = {{MDA}, {QVT}, {QVT} Relational vs {QVT} Operational},
	pages = {266--271}
},

@inproceedings{mccabe_complexity_1976,
	address = {Los Alamitos, {CA}, {USA}},
	series = {{ICSE} '76},
	title = {A complexity measure},
	location = {San Francisco, California, United States},
	url = {http://portal.acm.org/citation.cfm?id=800253.807712},
	abstract = {This paper describes a graph-theoretic complexity measure and illustrates how it can be used to manage and control program complexity. The paper first explains how the graph theory concepts apply and gives an intuitive explanation of the graph concepts in programming terms. The control graphs of several actual {FORTRAN} programs are then presented to illustrate the correlation between intuitive complexity and the graph theoretic complexity. Several properties of the graph-theoretic complexity are then proved which show, for example, that complexity is independent of physical size (adding or subtracting functional statements leaves complexity unchanged) and complexity depends only on the decision structure of a program. The issue of using non-structured control flow is also discussed. A characterization of non-structured control graphs is given and a method of measuring the “structuredness” of a program is developed. The relationship between structure and reducibility is illustrated with several examples. The last section of the paper deals with a testing methodology used in conjunction with the complexity measure; a testing strategy is defined that dictates that a program can either admit of a certain minimal testing level or the program can be structurally reduced.},
	booktitle = {Proceedings of the 2nd international conference on Software engineering},
	publisher = {{IEEE} Computer Society Press},
	author = {{McCabe}, Thomas J},
	year = {1976},
	note = {{ACM} {ID:} 807712},
	keywords = {basis, complexity measure, complexity measures},
	pages = {407–},
	annote = {{SUMMARY} {(Fritz)}

graph-theoretic approach looking a at a range of potential complexity measures including the widely used cyclometric complexity measure which evaluates the number of possible paths through a graph.}
},

@inproceedings{chu_component-oriented_2008,
	address = {Washington, {DC}, {USA}},
	title = {A {Component-Oriented} Development Approach to {E-Business} Applications},
	isbn = {978-0-7695-3395-7},
	doi = {http://0-dx.doi.org.innopac.up.ac.za/10.1109/ICEBE.2008.23},
	abstract = {The key to develop maintainable and extensible e-business applications is adequate engineering method. For e-business engineering, no full-blown method currently exists. The development of e-business applications lacks high level software engineering abstractions. This paper presents a component oriented development approach to e-business applications that is strongly architecture-centric. The whole development process is centered on the various levels of granularity of components. The component oriented architecture provides a set of rules and structure for managing complexity which provides flexibility and a framework for reuse and integration of components to support e-business evolution. Architectural patterns are used to organize e-business plan and service model that facilitate mapping from business components to service components, which makes the development processes more manageable. The semantics based component specifications support semantics based service discovery and service composition.},
	booktitle = {{ICEBE} '08: Proceedings of the 2008 {IEEE} International Conference on {e-Business} Engineering},
	publisher = {{IEEE} Computer Society},
	author = {Chu, Wang and Qian, Depei},
	year = {2008},
	pages = {45–52}
},

@inproceedings{shim_design_2008,
	address = {Beijing, China},
	title = {A Design Quality Model for {Service-Oriented} Architecture},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/APSEC.2008.32},
	booktitle = {2008 15th {Asia-Pacific} Software Engineering Conference},
	author = {Shim, Bingu and Choue, Siho and Kim, Suntae and Park, Sooyong},
	year = {2008},
	pages = {403--410}
},

@inproceedings{solmsfritz_domain-specific_????,
	title = {A {Domain-Specific} Language for {URDAD} Based Requirements Elicitation},
	abstract = {{Use-Case} {Responsibility-Driven} Analysis and Design {(URDAD)} is a services-oriented software analysis and design methodology. It is used by requirements engineers to develop technology-neutral, semi-formal platform-independent models {(PIM)} within the {OMG's} {MDA.} In the past, {URDAD} models were denoted in {UML.} However, that was a tedious and error-prone. The resulting models were often of rather poor quality. In this paper we introduce and discuss a new {Domain-Specific} Language {(DSL)} for {URDAD.} Its meta model is consistent and satisfiable. We show that {URDAD} {DSL} specifications are simpler and allow for more complete services contract specification than their corresponding {UML} expressions. They also enable traceability and test case generation.},
	author = {{Solms,Fritz} and {Edwards,Craig} and Gruner, Stefan and Paar, Alexander and Loubser, Dawid}
},

@inproceedings{mcumber_general_2001,
	title = {A general framework for formalizing {UML} with formal languages},
	doi = {10.1109/ICSE.2001.919116},
	abstract = {Informal and graphical modeling techniques enable developers to construct abstract representations of systems. Object-oriented modeling techniques further facilitate the development process. The Unified Modeling Language {(UML)}, an object-oriented modeling approach, could be broad enough in scope to represent a variety of domains and gain widespread use. Currently, {UML} comprises several different notations with no formal semantics attached to the individual diagrams. Therefore, it is not possible to apply rigorous automated analysis or to execute a {UML} model in order to test its behavior: short of writing code and performing exhaustive testing. We introduce a general framework for formalizing a subset of {UML} diagrams in terms of different formal languages based on a homomorphic mapping between meta models describing {UML} and the formal language. This framework enables the construction of a consistent set of rules for transforming {UML} models into specifications in the formal language. The resulting specifications derived from {UML} diagrams enable either execution through simulation or analysis through model checking, using existing tools. This paper describes the use of this framework for formalisms {UML} to model and analyze embedded systems. A prototype system for generating the formal specifications and results from an industrial case study are also described.},
	booktitle = {Software Engineering, 2001. {ICSE} 2001. Proceedings of the 23rd International Conference on},
	author = {{McUmber}, {W.E.} and Cheng, {B.H.C.}},
	month = may,
	year = {2001},
	keywords = {abstract representations, embedded systems, formal languages, formal semantics, formal specification, formal specifications, homomorphic mapping, industrial case study, meta models, model checking, object-oriented methods, object-oriented modeling, rigorous automated analysis, specification languages {UML}, specifications, Unified Modeling Language},
	pages = {433–442}
},

@inproceedings{moosavi_method_2009,
	title = {A Method for Service Oriented Design},
	doi = {10.1109/ITNG.2009.323},
	abstract = {Development methodology based on service has critical role in description, establishment, refining and adaptation (verification) of highly volatile business processes. However, there has not been a suitable and consolidated method for the development of high quality service oriented business applications. This article tries to present a method for service- oriented design. We use techniques and current issues in {SOA} in consolidated form and propose a method for service oriented design. The focus of this paper is on design process.},
	booktitle = {Information Technology: New Generations, 2009. {ITNG} '09. Sixth International Conference on},
	author = {Moosavi, S. and Seyyedi, {M.A.} and Moghadam, N.},
	month = apr,
	year = {2009},
	keywords = {business data processing, high quality service-oriented business, service-oriented design, software architecturebusiness processes, Web services},
	pages = {290–295}
},

@article{huafeng_chen_method_2011,
	title = {A Method for {Service-Oriented} Personalized Requirements Analysis},
	volume = {4},
	abstract = {The development of Web service has changed the process of software production, and requirements engineering becomes the key issue of service-oriented software engineering. Meantime, it reduces the degree of difficulty of software production, which facilitates end-users to customize software according to their personalized requirements. The paper proposes a method for service-oriented personalized requirements analysis, which is based on domain goal model and process model. The method can inform users of potential errors in requirements by detecting the correctness of requirements, which is driven by users’ personalized operations on goal models, and customize personalized processes to satisfy users’ requirements by reusing domain processes. The personalized processes are the basis for Web service discovery and composition.},
	number = {1},
	journal = {A Method for {Service-Oriented} Personalized Requirements Analysis},
	author = {Huafeng Chen and Kequing He},
	year = {2011},
	keywords = {Ontology, requirements, Requirements analysis methodology, {SBVR}},
	pages = {59--68},
	annote = {Interesting paper - should spend some time with this I think.

 }
},

@inproceedings{juarez_methodology_2006,
	title = {A Methodology for Use Cases Modeling Based on Sequence Diagrams Quantification},
	doi = {10.1109/CSEETW.2006.1},
	abstract = {In this paper we describe a methodology to model a use case using sequence diagrams quantification. Our methodology consists in a set of metrics to define the amount of scenarios, and it determines the use case goal accomplishment based on the occurrence, sequence order, and the flow of data involved in. It also helps to obtain a robust design because all possible flows are considered; by this way, software quality could be achieved in quantitative terms. This approach can be used in two ways: to define a complete set of scenarios before entering in the design phase, and to measure design quality in terms of completeness and functionality attributes. Our methodology follows the main recommendations to apply a solid mathematical basis for engineering careers, and informatics and computing programs.},
	booktitle = {Software Engineering Education and Training Workshops, 2006. {CSEETW} '06. 19th Conference on},
	author = {Juarez, J. Reyes and Barraza, {K.C.} and Licea, G. and {Cristobal-Salas}, A.},
	month = apr,
	year = {2006},
	keywords = {null design completeness., scenarios, sequences quantification, tree diagram},
	pages = {6–6}
},

@inproceedings{khoshkbarforoushha_metric_2010,
	address = {New York, {NY}, {USA}},
	series = {{WETSoM} '10},
	title = {A metric for composite service reusability analysis},
	isbn = {978-1-60558-976-3},
	location = {Cape Town, South Africa},
	url = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/1809223.1809233},
	doi = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/1809223.1809233},
	booktitle = {Proceedings of the 2010 {ICSE} Workshop on Emerging Trends in Software Metrics},
	publisher = {{ACM}},
	author = {Khoshkbarforoushha, A. and Jamshidi, P. and Shams, F.},
	year = {2010},
	keywords = {{BPEL} process reusability, composite service, service reusability, {SOA} metric},
	pages = {67–74},
	annote = {{SUMMARY} {(Fritz):}

- study mismatch of services preventing their reuse.

- stress 2 sources of mismatch

1. requirements mismatch (that a service does not fulfill the requirements)

2. description mismatch (that s service does not implement the required {WSDL)}

 }
},

@inproceedings{washizaki_metrics_????,
	address = {Sydney, {NSW}, Australia},
	title = {A metrics suite for measuring reusability of software components},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/METRIC.2003.1232469},
	booktitle = {Proceedings. 5th International Workshop on Enterprise Networking and Computing in Healthcare Industry {(IEEE} Cat. {No.03EX717)}},
	author = {Washizaki, H. and Yamamoto, H. and Fukazawa, Y.},
	pages = {211--223}
},

@inproceedings{ma_model_2009,
	title = {A Model Driven Development Platform for {Service-Oriented} Applications},
	doi = {10.1109/SERVICES-2.2009.14},
	abstract = {A great deal of the achievement on model driven development and service-oriented architecture has been gained, but there are few tools for systematically supporting model driven development for service-oriented applications. This paper presents a model driven development platform for service-oriented applications. The paper first sets forth the architecture of the platform, and then discusses the infrastructure and implementation technologies of the platform in detail. On the basis of above work, the paper expatiates on a set of tools that constitute the platform and the relations between tools.},
	booktitle = {Services - {II}, 2009. {SERVICES-2} '09. World Conference on},
	author = {Ma, Zhiyi and He, Xiao and Kang, Lianghuan},
	month = sep,
	year = {2009},
	keywords = {model driven development platform, service-oriented applications, service-oriented architecture, software architecturemodel driven architecture},
	pages = {17–24}
},

@inproceedings{iacob_model-driven_2008,
	address = {Munich, Germany},
	title = {A {Model-Driven} Perspective on the {Rule-Based} Specification of Services},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/EDOC.2008.24},
	abstract = {The focus in this position paper is on business rules as a means to raise the level of abstraction (and automation) at which business logic is incorporated in model driven application design in the context of service oriented architectures. More specifically, next to providing a classification framework for business rules and investigating the existing standards and languages for the formal specification of business rules, we propose a model-driven framework for the rule-based design of services. We provide an example to illustrate this framework and to demonstrate the role business rules can play in the context of {MDD} of {SOAs.} Furthermore, we also explore, in terms of existing tool support, the extent to which, the model-driven design process can be complemented and combined with business rules written in nearly natural language, which can become, at the platform specific level, an executable way to specify business knowledge and decisions.}},
	booktitle = {2008 12th International {IEEE} Enterprise Distributed Object Computing Conference},
	author = {Iacob, {Maria-Eugenia} and Jonkers, Henk},
	year = {2008},
	pages = {75--84},
	annote = {{SUMMARY:}

- Discuss Business rules to service specification \& orchestration mapping onto {BPEL} process spec via {MDA} ={\textgreater} production rules for business rules

- Refer to {OMG} {SBVR} {(Semantics} for Business Vocabulary and Rules)

- Contains "handle claim" example - compare to {URDAD} model for that example}
},

@inproceedings{marinescu_multi-layered_1999,
	address = {Washington, {DC}, {USA}},
	title = {A {Multi-Layered} System of Metrics for the Measurement of Reuse by Inheritance},
	isbn = {0-7695-0393-4},
	abstract = {In spite of the intense efforts of metrics research, the impact of object-oriented software metrics is, for the moment, still quite reduced. The cause of this fact lies not in an intrinsic incapacity of metrics to help in assessing and improving the quality of object-oriented systems, but in the unsystematic, dispersed and ambiguous manner of defining and using the metrics. In this paper, we define a multi-layered system of metrics that measures inheritance-based reuse, and we propose a number of metric definitions for the layers of this system. By defining and using such systems of metrics, we obtain a unitary approach of related measures and a systematic, yet flexible manner of defining new measures as part of a particular metrics system. Organising metric definitions in systems of metrics contributes to (a strongly needed) order among object-oriented metrics, thus increasing their reliability and usability},
	booktitle = {{TOOLS} '99: Proceedings of the 31st International Conference on Technology of {Object-Oriented} Language and Systems},
	publisher = {{IEEE} Computer Society},
	author = {Marinescu, Radu},
	year = {1999},
	pages = {146}
},

@book{allison_practical_1987,
	title = {A Practical Introduction to Denotational Semantics},
	isbn = {9780521314237},
	publisher = {Cambridge University Press},
	author = {Allison, L.},
	year = {1987}
},

@inproceedings{choi_quality_2008,
	address = {Washington, {DC}, {USA}},
	title = {A Quality Model for Evaluating Reusability of Services in {SOA}},
	isbn = {978-0-7695-3340-7},
	doi = {http://0-dx.doi.org.innopac.up.ac.za/10.1109/CECandEEE.2008.134},
	booktitle = {{CECANDEEE} '08: Proceedings of the 2008 10th {IEEE} Conference on {E-Commerce} Technology and the Fifth {IEEE} Conference on Enterprise Computing, {E-Commerce} and {E-Services}},
	publisher = {{IEEE} Computer Society},
	author = {Choi, Si Won and Kim, Soo Dong},
	year = {2008},
	pages = {293–298}
},

@inproceedings{akingbehin_quantitative_????,
	address = {Mount Pleasant, {MI}, {USA}},
	title = {A Quantitative Supplement to the Definition of Software Quality},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/SERA.2005.15},
	booktitle = {Third {ACIS} Int'l Conference on Software Engineering Research, Management and Applications {(SERA'05)}},
	author = {Akingbehin, K.},
	pages = {348--352}
},

@inproceedings{orriens_rule_2006,
	title = {A Rule Driven Approach for Developing Adaptive Service Oriented Business Collaboration},
	doi = {10.1109/SCC.2006.14},
	abstract = {Current composite Web service development and management solutions, e.g. {BPEL}, do not cater for flexible and adaptive business collaborations due to their pre-defined and inflexible nature that precludes them accommodating business dynamics. In this paper we propose a rule driven approach for adaptive business collaboration development in which rules drive and govern the development process. We firstly introduce the business collaboration context framework {(BCCF)}, which provides enterprises with the context required for business collaboration. We then explain our model driven approach with which enterprises can capture this context in business collaboration models. Subsequently we demonstrate how we utilize rules to drive the development and management of such models, as such facilitating flexible and adaptive business collaboration},
	booktitle = {Services Computing, 2006. {SCC} '06. {IEEE} International Conference on},
	author = {Orriens, B. and Yang, Jian},
	month = sep,
	year = {2006},
	keywords = {adaptive, approach;business, business, collaboration, collaboration;business, context, data, development;adaptive, driven, framework;rule, oriented, processing;groupware;, service},
	pages = {182 --189}
},

@inproceedings{hemingway_semantic_2007,
	address = {Beijing, China},
	title = {A Semantic Anchoring Infrastructure for the Design of Embedded Systems},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/COMPSAC.2007.39},
	booktitle = {31st Annual International Computer Software and Applications Conference - Vol. 1- {(COMPSAC} 2007)},
	author = {Hemingway, Graham and Su, Hang and Chen, Kai and Koo, T. John},
	month = jul,
	year = {2007},
	pages = {287--294},
	annote = {{SUMMARY:}

- {MDD} for embedded systems using semantic technologies

- {DSMLs} (domain specific modeling languages)  are commonly used for embedded systems development, provided by a wide range of prodicts.

- Discuss semantic anchoring to facilitate mapping between {DSLs}}
},

@article{tegarden_software_1995,
	title = {A software complexity model of object-oriented systems},
	volume = {13},
	issn = {0167-9236},
	url = {http://www.sciencedirect.com/science/article/B6V8S-3Y5FD6D-3/2/6ae0a2ee5a026048957058e8ce88e606},
	doi = {10.1016/0167-9236(93)E0045-F},
	abstract = {{{\textless}p{\textgreater}{\textless}br/{\textgreater}A} model for the emerging area of software complexity measurement of {OO} systems is required for the integration of measures defined by various researchers and to provide a framework for continued investigation. We present a model, based in the literature of {OO} systems and software complexity for structured systems. The model defines the software complexity of {OO} systems at the variable, method, object, and system levels. At each level, measures are identified that account for the cohesion and coupling aspects of the system. Users of {OO} techniques perceptions of complexity provide support for the levels and measures.{\textless}/p{\textgreater}},
	number = {3-4},
	journal = {Decision Support Systems},
	author = {Tegarden, David P. and Sheetz, Steven D. and Monarchi, David E.},
	month = mar,
	year = {1995},
	keywords = {Object-oriented systems, Software measurement, Software metrics, Software quality},
	pages = {241--262},
	annote = {Summary {(Fritz):}

quasi ad-hoc parametric approach to assessing the cohesion of the individual classes as well as the cohesion between classes and base their complexity estimate for an object-oriented design largely on this cohesion measure,}
},

@inproceedings{usman_survey_2008,
	title = {A Survey of Consistency Checking Techniques for {UML} Models},
	doi = {10.1109/ASEA.2008.40},
	abstract = {{UML} is the de-facto industry standard to design object-oriented software. {UML} provides a set of diagrams to model every aspect of an object-oriented application design in sufficient detail, but lacks any mechanism to rigorously check consistency between the models. Today, most of the effort is applied on creating accurate and consistent {UML} models rather than implementing the design. Automatic code generation from {UML} models has emerged as a promising area in recent years. The accuracy of generated code in some ways depends on {UML} models consistency. In this paper, we present a survey of {UML} consistency checking techniques. To analyze existing techniques, we identify some analysis parameters and construct an analysis table. The analysis table helps us to evaluate existing consistency checking techniques. We conclude that most of the approaches validates intra and inter level consistencies between {UML} models by using monitoring strategy. {UML} class, sequence, and statechart diagrams are used in most of the existing consistency checking techniques.},
	booktitle = {Advanced Software Engineering and Its Applications, 2008. {ASEA} 2008},
	author = {Usman, M. and Nadeem, A. and Kim, Tai-hoon and Cho, Eun-suk},
	month = dec,
	year = {2008},
	keywords = {analysis table, automatic code generation, monitoring strategy, object-oriented programming, object-oriented software design, program compilers, program diagnostics, program {verificationUML} class, statechart diagram, {UML} consistency checking technique, {UML} sequence, Unified Modeling Language},
	pages = {57–62}
},

@inproceedings{yu_survey_2010,
	title = {A survey on metric of software complexity},
	doi = {10.1109/ICIME.2010.5477581},
	abstract = {With the evolution of the software development, the scale of the software is increasingly growing to the extent that we cannot hand it easily. Some metrics are proposed to measure the complexity of software in last a few years. This article aims at a comprehensive survey of the metric of software complexity. Some classic and efficient software complexity metrics, such as Lines of Codes {(LOC)}, Halstead Complexity Metric {(HCM)} and Cyclomatic Complexity Metric {(CCM)}, are discussed and analyzed first. Then, some other approaches driven from above classic metrics are also discussed. The comparison and the relationship of these metrics of software complexity are also presented.},
	booktitle = {Information Management and Engineering {(ICIME)}, 2010 The 2nd {IEEE} International Conference on},
	author = {Yu, Sheng and Zhou, Shijie},
	month = apr,
	year = {2010},
	keywords = {codes;software, complexity, development;software, Halstead, metric;cyclomatic, metric;lines, metric;software, metrics;, of},
	pages = {352 --356}
},

@article{ben-abdallah_uml_2004,
	title = {A {UML} Based Framework Design Method},
	volume = {3},
	number = {8},
	journal = {Journal of Object Technology},
	author = {{Ben-Abdallah}, Hanene and Bouassida, Nadia and Gargouri, Faiez and {Ben-Hamadou}, Abdelmajid},
	month = oct,
	year = {2004},
	pages = {97–119}
},

@incollection{kirshin_uml_2007,
	address = {Berlin / Heidelberg},
	series = {Lecture Notes in Computer Science},
	title = {A {UML} Simulator Based on a Generic Model Execution Engine},
	volume = {4364/2007},
	isbn = {978-3-540-69488-5},
	publisher = {Springer},
	author = {Kirshin, Andrei and Dotan, Dolev and Hartman, Alan},
	year = {2007},
	pages = {324–6}
},

@inproceedings{boehm_view_2006,
	address = {Shanghai, China},
	title = {A view of 20th and 21st century software engineering},
	isbn = {1-59593-375-1},
	url = {http://www.computer.org/portal/web/csdl/doi/10.1145/1134285.1134288},
	doi = {http://doi.ieeecomputersociety.org/10.1145/1134285.1134288},
	abstract = {George Santayana's statement, {"Those} who cannot remember the past are condemned to repeat it," is only half true. The past also includes successful histories. If you haven't been made aware of them, you're often condemned not to repeat their {successes.In} a rapidly expanding field such as software engineering, this happens a lot. Extensive studies of many software projects such as the Standish Reports offer convincing evidence that many projects fail to repeat past {successes.This} paper tries to identify at least some of the major past software experiences that were well worth repeating, and some that were not. It also tries to identify underlying phenomena influencing the evolution of software engineering practices that have at least helped the author appreciate how our field has gotten to where it has been and where it {is.A} counterpart Santayana-like statement about the past and future might say, {"In} an era of rapid change, those who repeat the past are condemned to a bleak future." {(Think} about the dinosaurs, and think carefully about software engineering maturity models that emphasize {repeatability.)This} paper also tries to identify some of the major sources of change that will affect software engineering practices in the next couple of decades, and identifies some strategies for assessing and adapting to these sources of change. It also makes some first steps towards distinguishing relatively timeless software engineering principles that are risky not to repeat, and conditions of change under which aging practices will become increasingly risky to repeat.},
	publisher = {{ACM}},
	author = {Boehm, Barry},
	month = may,
	year = {2006},
	pages = {12 -- 29}
},

@inproceedings{schnedider_abstraction_1999,
	address = {Berlin / Heidelberg},
	title = {Abstraction and Testing},
	volume = {1},
	abstract = {Restricted views of process behaviour result in a form of ab-
straction which is useful in the construction of speci⬚cations involving
fault-tolerance and atomicity. This paper presents an operational charac-
terisation of abstraction for refusable and non-refusable events in terms
of testing. This view is related to standard notions of testing, and is
given a new denotational characterisation encapsulated within the {CSP}
denotational semantics. It informs, reinforces and extends the traditional
denotational approach to abstraction.},
	publisher = {{Springer-Verlag}},
	author = {Schnedider, Steve},
	year = {1999},
	pages = {738--757}
},

@article{zhang_agile_2010,
	title = {Agile {Model-Driven} Development in Practice},
	issn = {0740-7459},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/MS.2010.85},
	journal = {{IEEE} Software},
	author = {Zhang, Yuefeng and Patel, Shailesh},
	year = {2010}
},

@book{martin_agile_2002,
	title = {Agile Software Development, Principles, Patterns, and Practices},
	publisher = {{Prentice-Hall}},
	author = {Martin, Robert C.},
	year = {2002}
},

@inproceedings{lazar_agile_2008,
	address = {Washington, {DC}, {USA}},
	title = {An Agile {MDA} Approach for the Development of {Service-Oriented} {Component-Based} Applications},
	isbn = {978-0-7695-3621-7},
	doi = {http://0-dx.doi.org.innopac.up.ac.za/10.1109/CANS.2008.12},
	booktitle = {{CANS} '08: Proceedings of the 2008 First International Conference on Complexity and Intelligence of the Artificial and Natural Complex Systems. Medical Applications of the Complex Systems. Biomedical Computing},
	publisher = {{IEEE} Computer Society},
	author = {Lazar, I. and Parv, B. and Motogna, S. and Czibula, {I.-G.} and Lazar, {C.-L.}},
	year = {2008},
	pages = {38–44}
},

@inproceedings{lange_empirical_2004,
	title = {An Empirical Assessment of Completeness in {UML} Design},
	booktitle = {Proceedings of {EASE} – International Conference on Empirical Assessment in Software Engineering},
	publisher = {Institution of Electrical Engineers {(IEE)} Press},
	author = {Lange, Christian {F.J.} and Chaudron, Michel {R.V.}},
	year = {2004},
	pages = {111–121}
},

@inproceedings{ferguson_empirical_2006,
	address = {Columbia, {MD}, {USA}},
	title = {An Empirical Study on the Relationship between Defective Requirements and Test Failures},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/SEW.2006.9},
	booktitle = {2006 30th Annual {IEEE/NASA} Software Engineering Workshop},
	author = {Ferguson, Robert and Lami, Giuseppe},
	month = apr,
	year = {2006},
	pages = {7--10},
	annote = {{SUMMARY:}

- Have found direct correlation between expresiveness (semantics) of requirements language and quality of requirements and ultimate defect rate.}
},

@article{roca_entropy-based_1996,
	title = {An entropy-based method for computing software structural complexity},
	volume = {36},
	issn = {0026-2714},
	url = {http://www.sciencedirect.com/science/article/B6V47-3WRJ0GJ-D/2/c1c6be76986d667953349de3ed5fad5d},
	doi = {DOI: 10.1016/0026-2714(95)00178-6},
	abstract = {A new method for computing software structural complexity based on the entropy evaluation of the random uniform response function associated with the so-called software characteristic function is proposed. The functions, parameters and algorithms to perform this computation are introduced and some applications are given. This complexity metric allows different designs to be compared and was used successfully in the assessment of safety critical redundant software.},
	number = {5},
	journal = {Microelectronics and Reliability},
	author = {Roca, Jose Luis},
	year = {1996},
	pages = {609 -- 620},
	annote = {{SUMMARY} {(Fritz):}

information theoretic approach based on the work by Shannon. They define probabilities (this part I am dubious about) around entering nodes and executing graph transitions and use those probabilities to ultimately assess the entropy which represents missing information or information which must be provided. It is this entropy which is used as complexity measure.}
},

@inproceedings{jiang_executable_2007,
	address = {Nagoya, Aichi, Japan},
	title = {An Executable {UML} with {OCL-based} Action Semantics Language},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/ASPEC.2007.21},
	booktitle = {14th {Asia-Pacific} Software Engineering Conference {(APSEC'07)}},
	author = {Jiang, Ke and Zhang, Lei and Miyake, Shigeru},
	month = dec,
	year = {2007},
	pages = {302--309}
},

@inproceedings{menzel_experimental_2010,
	address = {Sydney, Australia},
	title = {An Experimental Comparison Regarding the Completeness of Functional Requirements Specifications},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/RE.2010.13},
	booktitle = {2010 18th {IEEE} International Requirements Engineering Conference},
	author = {Menzel, Igor and Mueller, Mark and Gross, Anne and Doerr, Joerg},
	month = sep,
	year = {2010},
	pages = {15--24}
},

@article{briand_experimental_2005,
	title = {An experimental investigation of formality in {UML-based} development},
	volume = {31},
	issn = {0098-5589},
	doi = {10.1109/TSE.2005.105},
	abstract = {The object constraint language {(OCL)} was introduced as part of the Unified Modeling Language {(UML).} Its main purpose is to make {UML} models more precise and unambiguous by providing a constraint language describing constraints that the {UML} diagrams alone do not convey, including class invariants, operation contracts, and statechart guard conditions. There is an ongoing debate regarding the usefulness of using {OCL} in {UML-based} development, questioning whether the additional effort and formality is worth the benefit. It is argued that natural language may be sufficient, and using {OCL} may not bring any tangible benefits. This debate is in fact similar to the discussion about the effectiveness of formal methods in software engineering, but in a much more specific context. This paper presents the results of two controlled experiments that investigate the impact of using {OCL} on three software engineering activities using {UML} analysis models: detection of model defects through inspections, comprehension of the system logic and functionality, and impact analysis of changes. The results show that, once past an initial learning curve, significant benefits can be obtained by using {OCL} in combination with {UML} analysis diagrams to form a precise {UML} analysis model. But, this result is however conditioned on providing substantial, thorough training to the experiment participants.},
	number = {10},
	journal = {Software Engineering, {IEEE} Transactions on},
	author = {Briand, {L.C.} and Labiche, Y. and Penta, M. Di and {Yan-Bondoc}, H.},
	month = oct,
	year = {2005},
	keywords = {constraint handling, formal specification, formal verification, natural languages, object constraint language, object-oriented languages, object-oriented programming {UML} analysis model, statechart guard condition, system functionality, system logic, {UML-based} development, Unified Modeling Language},
	pages = {833–849}
},

@incollection{nardi_introduction_2003,
	address = {New York, {NY}, {USA}},
	title = {An Introduction to Description Logics},
	isbn = {0-521-78176-0},
	url = {http://portal.acm.org/citation.cfm?id=885746.885748},
	abstract = {This introduction presents the main motivations for the development of Description
Logics {(DL)} as a formalism for representing knowledge, as well as some important basic notions underlying all systems that have been created in the {DL} tradition.
In addition, we provide the reader with an overview of the entire book and some guidelines for reading it. We first address the relationship between Description Logics and earlier semantic network and frame systems, which represent the original heritage of the field. We delve into some of the key problems encountered with the older  efforts. Subsequently, we introduce the basic features of Description Logic languages and related reasoning techniques.
Description Logic languages are then viewed as the core of knowledge representation systems, considering both the structure of a {DL} knowledge base and its associated reasoning services. The development of some implemented knowledge
representation systems based on Description Logics and the first applications built with such systems are then reviewed.
Finally, we address the relationship of Description Logics to other fields of Com-
puter Science. We also discuss some extensions of the basic representation language
machinery; these include features proposed for incorporation in the formalism that originally arose in implemented system},
	booktitle = {The Description Logic Handbook},
	publisher = {Cambridge University Press},
	author = {Nardi, Daniele and Brachman, Ronald J},
	editor = {Baader, Franz and Calvanese, Diego and {McGuinness}, Deborah L and Nardi, Daniele and {Patel-Schneider}, Peter F},
	year = {2003},
	pages = {1–40}
},

@inproceedings{cernickins_outline_2010,
	address = {Athens, Greece},
	title = {An Outline of Conceptual Framework for Certification of {MDA} Tools},
	url = {http://www.enase.org/Abstracts/2010/ENASE_2010_Abstracts.htm},
	abstract = {Nowadays, the certification of applications and software systems is considered as a task of growing importance. In fact, software development life cycle itself is also considered as a matter of certification concern, especially with the emergence of new approaches. The proposal of Model Driven Archi¬tecture {(MDA)} shifted the software development towards modeling. However, {MDA} as such still lacks the appropriate implementation framework. The origi¬nal article outlines a conceptual framework, which may be used as a foundation for certification of {MDA} tools.},
	author = {Cernickins, Antons and Nikiforova, Oksana and Ozols, Kristaps and Sejans, Janis},
	year = {2010}
},

@article{mohagheghi_overview_2008,
	title = {An Overview of Quality Frameworks in {Model-Driven} Engineering and Observations on Transformation Quality},
	location = {http://www.scientificcommons.org/43596416},
	url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.96.8653},
	abstract = {Abstract. Quality is often defined as fitness for purpose which is the key property to determine when evaluating quality. This paper presents some general requirements for evaluating quality frameworks. It also discusses characteristics of {MDE} that are important when building a quality framework, such as its use of models in several stages of development and maintenance, and its multi-abstraction level approach that requires consistency and traceability. {MDE} should strive for engineering of quality into software. As a step in extending quality frameworks for this purpose, we discuss integrating quality evaluation with quality engineering using {MDE} approaches. Applying it on transformations, we discuss both the transformability of models and the quality of transformations themselves. While completeness and precision of models are quality criteria for transformability of them, transformations should monitor and preserve model quality, be reusable, simple and efficient. We further discuss quality means and evaluation methods and propose future work. Keywords: Model-driven engineering, quality, transformation, metrics 1},
	author = {Mohagheghi, Parastoo and Dehlen, Vegard},
	year = {2008}
},

@inproceedings{qi_yu-dong_analysis_2010,
	address = {Taiyuan, China},
	title = {Analysis of contribution of conceptual model quality to software reliability},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/ICCASM.2010.5622740},
	booktitle = {2010 International Conference on Computer Application and System Modeling {(ICCASM} 2010)},
	author = {Qi Yu-dong and Zhu Ai-hong and Xie Xiao-fang and Yan Xiao-bin},
	year = {2010},
	pages = {V10--386-V10-389}
},

@article{meyer_applying_1992,
	title = {Applying Design by Contract},
	volume = {25},
	number = {10},
	journal = {Computer {(IEEE)}},
	author = {Meyer, Bertrand},
	year = {1992},
	pages = {40–51}
},

@article{hussain_applying_2007,
	title = {Applying fuzzy logic to measure completeness of a conceptual model},
	volume = {185},
	issn = {0096-3003},
	url = {http://www.sciencedirect.com/science/article/B6TY8-4KVXHFY-2/2/3e6e91f91e80fa83e428f1409adbf84e},
	doi = {DOI: 10.1016/j.amc.2006.07.053},
	abstract = {In a computing environment, the success of an information system depends upon the quality of its conceptual model. The importance of measuring quality of a conceptual model in quantitative terms has been emphasized in the research but still the quantitative measures are very scarce in the literature. A new Fuzzy Completeness Index {(FCI)} is introduced in this paper as a quantitative measure for the quality of a conceptual model. It takes into account completeness of a conceptual model based upon the concept of functional dependencies. For a given conceptual model the incorporation of functional dependencies is mapped onto a {TAS} Graph and is then measured using the fuzzy membership values and fuzzy hedges. The {FCI} has been calculated for different conceptual models. It has been illustrated that the quality in terms of completeness can effectively be measured through the {FCI} based approach. The higher the value of {FCI} the closer is the conceptual model to the real world in representing functional constraints.},
	number = {2},
	journal = {Applied Mathematics and Computation},
	author = {Hussain, Tauqeer and Awais, Mian M. and Shamail, Shafay},
	year = {2007},
	note = {Special Issue on Intelligent Computing Theory and Methodology},
	keywords = {Fuzzy, logic},
	pages = {1078–1086}
},

@book{lange_christiaan_assessing_2007,
	address = {Eindhoven},
	title = {Assessing and Improving the Quality of Modeling},
	isbn = {978-90-386-1107-5},
	publisher = {Institute for Programming Research and Algorithmics},
	author = {Lange, Christiaan},
	year = {2007},
	annote = {{SUMMARY}

- Very good reference

- Relates model quality of purpose of model

- Model qualities and which role players require which qualities.

- How to evaluate model quality

- Mentions core issues of {UML} = ill-defined semantics, consistency risks and complexity

- takes a similar approach to us, discussing quality form the perspective of the functional and quality requirements of the design itself as specified by the different stake holders in the design, coming up with a list of quality measures which is very similar to the one we have been using}
},

@inproceedings{alsharif_assessing_2004,
	address = {New York, {NY}, {USA}},
	title = {Assessing the complexity of software architecture},
	isbn = {1-58113-870-9},
	location = {Huntsville, Alabama},
	doi = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/986537.986562},
	booktitle = {{ACM-SE} 42: Proceedings of the 42nd annual Southeast regional conference},
	publisher = {{ACM}},
	author = {{AlSharif}, Mohsen and Bond, Walter P. and {Al-Otaiby}, Turky},
	year = {2004},
	pages = {98–103}
},

@inproceedings{reynoso_assessing_2005,
	title = {Assessing the impact of coupling on the understandability and modifiability of {OCL} expressions within {UML/OCL} combined models},
	doi = {10.1109/METRICS.2005.12},
	abstract = {Diagram-based {UML} notation is limited in its expressiveness thus producing a model that would be severely underspecified. The flaws in the limitation of the {UML} diagrams are solved by specifying {UML/OCL} combined models, {OCL} being an essential add-on to the {UML} diagrams. Aware of the importance of building precise models, the main goal of this paper is to carefully describe a family of experiments we have undertaken to ascertain whether any relationship exists between object coupling (defined through metrics related to navigations and collection operations) and two maintainability sub-characteristics: understandability and modifiability of {OCL} expressions. If such a relationship exists, we will have found early indicators of the understandability and modifiability of {OCL} expressions. Even though the results obtained show empirical evidence that such a relationship exists, they must be considered as preliminaries. Further validation is needed to be performed to strengthen the conclusions and external validity},
	booktitle = {Software Metrics, 2005. 11th {IEEE} International Symposium},
	author = {Reynoso, L. and Genero, M. and Piattini, M. and Manso, E.},
	month = sep,
	year = {2005},
	keywords = {diagram-based {UML} notation, formal specification, object coupling, object-oriented languages, object-oriented programming, {OCL} expression understandability, software maintenance, software metrics, software {metricsOCL} expression modifiability, {UML} model, Unified Modeling Language},
	pages = {10 pp.–14}
},

@inproceedings{klopper_assessment_2007,
	address = {Port Elizabeth, South Africa},
	title = {Assessment of a framework to compare software development methodologies},
	isbn = {978-1-59593-775-9},
	url = {http://0-portal.acm.org.innopac.up.ac.za/citation.cfm?id=1292491.1292498&coll=Portal&dl=GUIDE&CFID=100152126&CFTOKEN=72546997},
	abstract = {A decision-supporting framework was applied in a pilot study to assist in the decision making about what software development methodology to use at a software engineering company. This paper critically assesses this decision making process and framework that was used at that company to decide on an appropriate software methodology for the analysis and design of business processes and software systems.},
	booktitle = {Proceedings of the 2007 annual research conference of the South African institute of computer scientists and information technologists on {IT} research in developing countries},
	publisher = {{ACM}},
	author = {Klopper, Riaan and Gruner, Stefan and Kourie, Derrick G.},
	year = {2007},
	keywords = {aris, business process analysis and design, mda, rup, software development methodology, uml, {URDAD}},
	pages = {56--65}
},

@inproceedings{belhaouari_automated_2008,
	address = {Washington, {DC}, {USA}},
	title = {Automated Generation of Test Cases from {Contract-Oriented} Specifications: A {CSP-Based} Approach},
	isbn = {978-0-7695-3482-4},
	doi = {http://0-dx.doi.org.innopac.up.ac.za/10.1109/HASE.2008.15},
	booktitle = {{HASE} '08: Proceedings of the 2008 11th {IEEE} High Assurance Systems Engineering Symposium},
	publisher = {{IEEE} Computer Society},
	author = {Belhaouari, Hakim and Peschanski, Frederic},
	year = {2008},
	pages = {219–228}
},

@inproceedings{carnevali_automatic_2009,
	address = {Paris, France},
	title = {Automatic Code Generation from {Real-Time} Systems Specifications},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/RSP.2009.24},
	booktitle = {2009 {IEEE/IFIP} International Symposium on Rapid System Prototyping},
	author = {Carnevali, Laura and {D'Amico}, Dario and Ridi, Lorenzo and Vicario, Enrico},
	month = jun,
	year = {2009},
	pages = {102--105}
},

@article{nebut_automatic_2006,
	title = {Automatic Test Generation: A Use Case Driven Approach},
	volume = {32},
	issn = {0098-5589},
	doi = {http://0-dx.doi.org.innopac.up.ac.za/10.1109/TSE.2006.22},
	number = {3},
	journal = {{IEEE} Trans. Softw. Eng.},
	author = {Nebut, Clementine and Fleurey, Franck},
	year = {2006},
	note = {{Member-Le} Traon, Yves and {Member-Jezequel}, {Jean-Marc}},
	pages = {140–155}
},

@inproceedings{hua_axiomatic_1992,
	title = {Axiomatic semantics of a hardware specification language},
	doi = {10.1109/GLSV.1992.218347},
	abstract = {Formal hardware design verification is to examine whether a structural specification of a circuit meets its behavioral specification. Despite the progress in formal verification, there is a big gap between hardware designers and verifiers, partially because there are no common specification languages for them to use. The authors show that formal semantics could bridge such a gap. By providing an axiomatic semantics to an existing hardware design language called the Iowa logic specification language {(ILSL)}, the authors show that a circuit description in {ILSL} can be automatically converted into a set of first-order formulas which is the semantic description of the circuit and is acceptable by an existing theorem prover called the rewrite rule laboratory {(RRL).} In particular, they show how iterative statements of {ILSL} are converted into recursive functions of {RLL.} Their work thus results in a uniform specification language in which both hardware design and automatic verification can be done},
	booktitle = {{VLSI}, 1992., Proceedings of the Second Great Lakes Symposium on},
	author = {Hua, Xin and Zhang, Hantao},
	month = feb,
	year = {1992},
	keywords = {automatic verification, axiomatic semantics, first-order formulas, formal semantics, formal specification, formal verification, hardware design, hardware specification language, rewrite rule laboratory, specification languages, theorem prover, theorem proving {ILSL}},
	pages = {183–190}
},

@incollection{baader_basic_2003,
	address = {New York, {NY}, {USA}},
	title = {Basic Description Logics},
	isbn = {0-521-78176-0},
	url = {http://portal.acm.org/citation.cfm?id=885746.885749},
	abstract = {This chapter provides an introduction to Description Logics as a formal language for representing knowledge and reasoning about it. It first gives a short overview of the ideas underlying Description Logics. Then it introduces syntax and semantics, covering the basic constructors that are used in systems or have been introduced in the literature, and the way these constructors can be used to build knowledge bases. Finally, it defines the typical inference problems, shows how they are interrelated, and describes different approaches for effectively solving these problems. Some of the topics that are only briefly mentioned in this chapter will be treated in more detail in subsequent chapters.},
	booktitle = {The Description Logic Handbook},
	publisher = {Cambridge University Press},
	author = {Baader, Franz and Nutt, Werner},
	editor = {Baader, Franz and Calvanese, Diego and {McGuinness}, Deborah L and Nardi, Daniele and {Patel-Schneider}, Peter F},
	year = {2003},
	pages = {43–95}
},

@inproceedings{wenhui_zhang_bounded_2009,
	address = {Berlin, Heidelberg},
	series = {{ICFEM} '09},
	title = {Bounded Semantics of {CTL} and {SAT-Based} Verification},
	isbn = {978-3-642-10372-8},
	location = {Rio de Janeiro, Brazil},
	url = {http://0-dx.doi.org.innopac.up.ac.za/10.1007/978-3-642-10373-5_15},
	doi = {http://0-dx.doi.org.innopac.up.ac.za/10.1007/978-3-642-10373-5_15},
	booktitle = {Proceedings of the 11th International Conference on Formal Engineering Methods: Formal Methods and Software Engineering},
	publisher = {{Springer-Verlag}},
	author = {Wenhui Zhang},
	year = {2009},
	pages = {286–305},
	annote = {Looks like a very useful paper - can't get it though}
},

@article{henderson-sellers_bridging_2011,
	title = {Bridging metamodels and ontologies in software engineering},
	volume = {84},
	issn = {0164-1212},
	url = {http://www.sciencedirect.com/science/article/B6V0N-51BBKS4-1/2/989f8e7fe2f490d4278feeb87f08f773},
	doi = {10.1016/j.jss.2010.10.025},
	abstract = {Over the last several years, metamodels and ontologies have been developed in parallel isolation. Ontological thinking, largely from the research field of artificial intelligence, has been increasingly investigated by software engineering researchers, more familiar with the idea of a metamodel. Here, we investigate the literature on both metamodelling and ontologies in order to identify ways in which they can be made compatible and linked in such a way as to benefit both communities and create a contribution to a coherent underpinning theory for software engineering. Analysis of a large number of theoretical and semi-theoretical approaches using as a framework a multi-level modelling construct identifies strengths, weaknesses, incompatibilities and inconsistencies within the extant literature. A metamodel deals with conceptual definitions while an ontology deals with real-world descriptors of business entities and is thus better named "domain ontology". A specific kind of ontology (foundational or high-level) provides "metalevel" concepts for the domain ontologies. In other words, a foundational ontology may be used at the same abstraction level as a metamodel and a domain ontology at the same abstraction level as a (design) model, with each pair linked via an appropriate semantic mapping.},
	number = {2},
	journal = {Journal of Systems and Software},
	author = {{Henderson-Sellers}, B.},
	month = feb,
	year = {2011},
	keywords = {metamodel, Metamodel, Ontologies, Ontology, {OWL}, Software engineering},
	pages = {301--313}
},

@book{penker_business_2000,
	title = {Business Modeling with {UML}},
	publisher = {John Wiley \& Sons},
	author = {Penker, Magnus and Eriksson, {Hans-Erik}},
	year = {2000}
},

@inproceedings{jin_business-oriented_2008,
	address = {Waikoloa, {HI}, {USA}},
	title = {{Business-Oriented} Development Methodology for {IT} Service Management},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/HICSS.2008.85},
	booktitle = {Proceedings of the 41st Annual Hawaii International Conference on System Sciences {(HICSS} 2008)},
	author = {Jin, Kevin and Ray, Pradeep},
	year = {2008},
	pages = {99--99}
},

@article{paulk_capability_1993,
	title = {Capability maturity model, version 1.1},
	volume = {10},
	issn = {07407459},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/52.219617},
	number = {4},
	journal = {{IEEE} Software},
	author = {Paulk, {M.C.} and Curtis, B. and Chrissis, {M.B.} and Weber, {C.V.}},
	year = {1993},
	pages = {18--27}
},

@book{boehm_barry_w._characteristics_1978,
	edition = {1st},
	title = {Characteristics of Software Quality},
	volume = {1},
	isbn = {0444851054},
	publisher = {{North-Holland} Publishing Company},
	author = {Boehm, Barry W.},
	month = jun,
	year = {1978}
},

@inproceedings{perepletchikov_cohesion_2007,
	address = {Portland, {OR}, {USA}},
	title = {Cohesion Metrics for Predicting Maintainability of {Service-Oriented} Software},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/QSIC.2007.4385516},
	booktitle = {Seventh International Conference on Quality Software {(QSIC} 2007)},
	author = {Perepletchikov, Mikhail and Ryan, Caspar and Frampton, Keith},
	year = {2007},
	pages = {328--335}
},

@inproceedings{plosch_collecting_2010,
	address = {Porto, Portugal},
	title = {Collecting Quality Requirements Using Quality Models and Goals},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/QUATIC.2010.42},
	booktitle = {2010 Seventh International Conference on the Quality of Information and Communications Technology},
	author = {Plosch, Reinhold and Mayr, Alois and Korner, Christian},
	year = {2010},
	pages = {198--203}
},

@article{greenyer_comparing_2010,
	title = {Comparing relational model transformation technologies: implementing {Query/View/Transformation} with Triple Graph Grammars},
	volume = {9},
	issn = {1619-1366},
	url = {http://dx.doi.org/10.1007/s10270-009-0121-8},
	abstract = {The Model Driven Architecture {(MDA)} is an approach to develop software based on different models. There are separate models for the business logic and for platform specific details. Moreover, code can be generated automatically from these models. This makes transforma- tions a core technology for {MDA} and for model-based software engineering approaches in general. {Query/View/Transformation} {(QVT)} is the transformation technology recently proposed for this purpose by the {OMG.} Triple Graph Grammars {(TGGs)} are another transformation technology proposed in the mid-nineties, used for example in the {FUJABA} {CASE} tool. In contrast to many other transformation technologies, both {QVT} and {TGGs} declaratively define the relation between two models. With this definition, a transformation engine can execute a transformation in either direction and, based on the same definition, can also propagate changes from one model to the other. In this paper, we compare the concepts of the declarative languages of {QVT} and {TGGs.} It turns out that {TGGs} and declarative {QVT} have many concepts in common. In fact, {QVT-Core} can be mapped to {TGGs.} We show that {QVT-Core} can be implemented by transforming {QVT-Core} mappings to {TGG} rules, which can then be executed by a {TGG} transformation engine that performs the actual {QVT} transformation. Furthermore, we discuss an approach for mapping {QVT-Relations} to {TGGs.} Based on the semantics of {TGGs}, we clarify semantic gaps that we identified in the declarative languages of {QVT} and, furthermore, we show how {TGGs} can benefit from the concepts of {QVT.}},
	journal = {Software and Systems Modeling},
	author = {Greenyer, Joel and Kindler, Ekkart},
	year = {2010},
	note = {10.1007/s10270-009-0121-8},
	pages = {21--46}
},

@inproceedings{olderog_completeness_2000,
	address = {New York, {NY}, {USA}},
	title = {Completeness in formal specification language design for process-control systems},
	isbn = {{1-58113-262-X}},
	location = {Portland, Oregon, United States},
	doi = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/349360.351142},
	booktitle = {{FMSP} '00: Proceedings of the third workshop on Formal methods in software practice},
	publisher = {{ACM}},
	author = {Olderog, {E.-R.} and Ravn, A. P.},
	year = {2000},
	pages = {89–100}
},

@inproceedings{asnina_computation_2010,
	address = {Athens, Greece},
	title = {Computation Independent Models: Bridging Problem and Solution Domains},
	url = {http://www.enase.org/Abstracts/2010/ENASE_2010_Abstracts.htm},
	abstract = {Compliance between a problem and a solution domain(s) is a well-known issue in software development. A usual way of development is focusing on the solution, and adapting the solution to the problem domain only in case of occurred issues. Sometimes, the cost of such adaptation is very high, and then the cheapest way is to change operation of the problem domain. Certainly, such ways cannot satisfy a client. This paper considers a computation independent model as a place where overcoming of the gap must occur. It discusses ways for overcoming a gap between a problem domain and a solution domain(s) that are proposed within {CIMs}, and suggests a mathematical mechanism, continuous mapping, provided by a topological functioning model together with its other topological and functional properties as a formal bridge between those domains. This mechanism is explained by an example.},
	booktitle = {5'th International Conference on Evaluation of Novel Approaches to Software Engineering},
	author = {Asnina, Erika and Osis, Janis},
	year = {2010},
	annote = {{SUMMARY:}

- important paper

- provide a mathematical topological model for mapping technology neutral service requirements onto available concrete services pool

- stress the need for performing the modeling in the problem domain

- discuss holistic model for {CIM} (single model absorbing all requirements) versus fragmented model for requirements (multiple artifacts which are not intrinsically connected)

- mathematical framework for performing gap analysis which identifies required services for which one cannot define a mapping onto existing services

- The {TFM} {(Topological} Functioning Model) is independent of the modeling technique and can be applied to an {URDAD} model

- Effectively also do

* grouping of services into responsibility domains (feature sets)

* decomposition of functional requirements across levels of granularity

* orchestration of processes realizing higher level services from lower level services

- Their functional properties are similar to our services contracts:

* inputs and outputs

* cause and effect (lower level functional requirements = cause, post-conditions=effect)

- quality requirements not discussed

 }
},

@inproceedings{correia_defining_2010,
	address = {Porto, Portugal},
	title = {Defining and Observing the Compliance of Service Level Agreements: A Model Driven Approach},
	shorttitle = {Defining and Observing the Compliance of Service Level Agreements},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/QUATIC.2010.32},
	booktitle = {2010 Seventh International Conference on the Quality of Information and Communications Technology},
	author = {Correia, Anacleto and Brito e Abreu, Fernando},
	month = sep,
	year = {2010},
	pages = {165--170}
},

@inproceedings{raskovsky_denotational_1982,
	address = {New York, {NY}, {USA}},
	title = {Denotational semantics as a specification of code generators},
	isbn = {0-89791-074-5},
	location = {Boston, Massachusetts, United States},
	doi = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/800230.806998},
	booktitle = {{SIGPLAN} '82: Proceedings of the 1982 {SIGPLAN} symposium on Compiler construction},
	publisher = {{ACM}},
	author = {Raskovsky, Martin R.},
	year = {1982},
	pages = {230–244}
},

@incollection{heidenreich_derivation_2009,
	series = {Lecture Notes in Computer Science},
	title = {Derivation and Refinement of Textual Syntax for Models},
	volume = {5562},
	url = {http://dx.doi.org/10.1007/978-3-642-02674-4_9},
	abstract = {Textual Syntax {(TS)} as a form of model representation has made its way to the {Model-Driven} Software Development community and is considered a viable alternative to graphical representations. To support the design and implementation of text editing facilities many concrete syntax and model mapping tools have emerged. Despite the maturity of these tools, users still spend considerable effort to specify syntaxes and generate editors even for simple metamodels. To reduce this effort, we propose to refine a specification that is automatically derived from a given metamodel. We argue that defaults in a customisable setting enable developers to quickly realise text-based editors for models. In particular in settings where metamodels evolve, such a procedure is beneficial. To evaluate this idea we present {EMFText} [1], an {EMF/Eclipse} integrated tool for agile Textual Syntax {(TS)} development. We show how default syntax can easily be tailored and refined to obtain a custom text editor for {EMF} models and demonstrate our approach by two examples.},
	booktitle = {Model Driven Architecture - Foundations and Applications},
	publisher = {Springer Berlin / Heidelberg},
	author = {Heidenreich, Florian and Johannes, Jendrik and Karol, Sven and Seifert, Mirko and Wende, Christian},
	editor = {Paige, Richard and Hartman, Alan and Rensink, Arend},
	year = {2009},
	note = {10.1007/978-3-642-02674-4\_9},
	pages = {114--129}
},

@article{kim_design_2010,
	title = {Design of {Service-Oriented} Systems Using {SODA}},
	volume = {3},
	issn = {1939-1374},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/TSC.2010.2},
	number = {3},
	journal = {{IEEE} Transactions on Services Computing},
	author = {Kim, {Tae-Hyung} and Chang, Carl K. and Mitra, Simanta},
	year = {2010},
	pages = {236--249}
},

@article{dick_design_2005,
	title = {Design traceability},
	volume = {22},
	issn = {0740-7459},
	doi = {10.1109/MS.2005.150},
	abstract = {Traceability is about documenting the relationships between layers of information, for instance, between system requirements and software design. Many software development tools manage design relationships, for instance, between modeling elements (such as classes) and source code, or between tasks and source code files. Whatever development scale we engage in, we systematically apply information traceability. It's a vehicle for thinking about the way the software meets its requirements; it captures design rationale to help others understand and review; and it gives us far greater confidence in managing future changes.},
	number = {6},
	journal = {Software, {IEEE}},
	author = {Dick, Jeremy},
	month = nov,
	year = {2005},
	keywords = {formal specification, formal verification, information traceability, software design, software development tools, source code, system requirements engineering, systems analysis design traceability},
	pages = {14–16},
	annote = {{SUMMARY:}

- emphasizes need for traceability across levels of granularity

- traceability generally important in design (not only software)

- traceability links can be enriched through rationale sematics {(URDAD:} {requiredBy}, {requiredService}, ...)

- include sufficiency and necessity, i.e. are all requirements met and are all design elements necessary/required to realize requirements

- identify immediate impact point, calculate potential impact tree, prune impact tree}
},

@inproceedings{feuerlicht_determinants_2007,
	address = {Amsterdam, The Netherlands, The Netherlands},
	title = {Determinants of Service Reusability},
	isbn = {978-1-58603-794-9},
	url = {http://0-portal.acm.org.innopac.up.ac.z℀itation.cfm?id=1566971.1567011},
	booktitle = {Proceeding of the 2007 conference on New Trends in Software Methodologies, Tools and Techniques: Proceedings of the sixth {SoMeT\_07}},
	publisher = {{IOS} Press},
	author = {Feuerlicht, George and Wijayaweera, Amalka},
	year = {2007},
	keywords = {Service Granularity, Service Reuse, soa, Web services},
	pages = {467–474}
},

@incollection{mohagheghi_developing_2008,
	title = {Developing a Quality Framework for {Model-Driven} Engineering},
	url = {http://dx.doi.org/10.1007/978-3-540-69073-3_29},
	abstract = {This paper presents some related work on quality frameworks and requirements for evaluating them. It also discusses characteristics of model-driven engineering that are important when building a quality framework, such as its use of models in several stages of development and maintenance, generation of other artifacts from models and its multi-abstraction level approach that requires consistency and traceability. We present a 7-step process on how to define a quality framework that is adapted to model-driven engineering, and which integrates quality engineering with quality evaluation. As an example, the framework is applied on transformation quality. We maintain that the transformation process and transformation mapping should be discussed separately, as they require different approaches, and suggest quality goals, quality-carrying properties to achieve the quality goals and methods for evaluating these properties.},
	booktitle = {Models in Software Engineering},
	author = {Mohagheghi, Parastoo and Dehlen, Vegard},
	year = {2008},
	keywords = {{MDA}},
	pages = {275–286}
},

@techreport{siegel_developing_2001,
	type = {White paper},
	title = {Developing in {OMG's} {Model-Driven} Architecture},
	institution = {Object Management Group},
	author = {Siegel, Jon},
	month = nov,
	year = {2001}
},

@inproceedings{di_penta_discovery_2007,
	address = {New York, {NY}, {USA}},
	series = {{IW-SOSWE} '07},
	title = {Discovery of {SOA} patterns via model checking},
	isbn = {978-1-59593-723-0},
	location = {Dubrovnik, Croatia},
	url = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/1294928.1294931},
	doi = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/1294928.1294931},
	booktitle = {2nd international workshop on Service oriented software engineering: in conjunction with the 6th {ESEC/FSE} joint meeting},
	publisher = {{ACM}},
	author = {Di Penta, Massimiliano and Santone, Antonella and Villani, Maria Luisa},
	year = {2007},
	keywords = {comprehension of service-oriented systems, model checking, pattern discovery, {SOA} patterns},
	pages = {8–14}
},

@inproceedings{paunov_domain-specific_????,
	address = {Potsdam, Germany},
	title = {{Domain-Specific} Modeling Languages for Configuring and Evaluating Enterprise {DRE} System Quality of Service},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/ECBS.2006.39},
	booktitle = {13th Annual {IEEE} International Symposium and Workshop on Engineering of Computer Based Systems {(ECBS'06)}},
	author = {Paunov, S. and Hill, J. and Schmidt, D. and Baker, {S.D.} and Slaby, {J.M.}},
	pages = {196--208}
},

@book{gronback_eclipse_2009,
	edition = {1},
	title = {Eclipse Modeling Project: A {Domain-Specific} Language {(DSL)} Toolkit},
	isbn = {0321534077, 9780321534071},
	abstract = {Achieve Breakthrough Productivity and Quality with {MDD} and {Eclipse-Based} {DSLs} Domain-specific languages {(DSLs)} and model-driven development {(MDD)} offer software engineers powerful new ways to improve productivity, enhance quality, and insulate systems from rapid technological change. Now, theres a pragmatic, start-to-finish guide to creating {DSLs} and using {MDD} techniques with the powerful open source Eclipse platform. In Eclipse Modeling Project, Richard C. Gronback illuminates both the principles and techniques software professionals need to master, offering insights that will be invaluable to developers working with any tool or platform. As coleader of the Eclipse Modeling Project, Gronback is singularly well-positioned to demonstrate {DSLs} and {MDD} at work in Eclipse. Gronback systematically introduces each of the Eclipse technologies that can be used in {DSL} and {MDD} development. Throughout, he introduces key concepts and technologies in the context of a complete worked example and presents new best practices and never-before published techniques. He also covers Eclipse projects discussed in no other book, including {Query/View/Transformation} {(QVT)} and the Graphical Modeling Framework {(GMF)a} project the author personally leads. Eclipse Modeling Project gives software practitioners all the knowledge they need to explore the remarkable potential of {DSLs} and {MDDand} includes coverage of Why a model-based approach enables the rapid customization of high-quality solutions within the product line paradigm How the Eclipse Modeling Projects capabilities can be used to efficiently create new {DSLs} Powerful techniques for developing {DSL} abstract syntax, graphical notation, and textual syntax How to build {Model-to-Model} {(M2M)} and {Model-to-Text} {(M2T)} transformationsincluding a powerful new {M2M} implementation of the Object Management Groups {QVT} Operational Mapping Language {(OML)} Efficiently packaging and deploying {DSLs} with Eclipse Complete reference sections for the Graphical Editing Framework {(GEF)}, {GMF} runtime and tooling, {QVT} {OML}, Xpand, and more Foreword xix Preface xxi Acknowledgments xxiii About the Author xxv Part I: Introduction 1 Chapter 1: Introduction 3 Chapter 2: Modeling Project as a {DSL} Toolkit 17 Part {II:} Developing {Domain-Specific} Languages 27 Chapter 3: Developing a {DSL} Abstract Syntax 29 Chapter 4: Developing a {DSL} Graphical Notation 55 Chapter 5: Developing a {DSL} Textual Syntax 227 Chapter 6: Developing {Model-to-Model} Transformations 231 Chapter 7: Developing {Model-to-Text} Transformations 277 Chapter 8: {DSL} Packaging and Deployment 303 Part {III:} Reference 315 Chapter 9: Graphical Editing Framework 317 Chapter 10: Graphical Modeling Framework Runtime 353 Chapter 11: Graphical Modeling Framework Tooling 503 Chapter 12: Graphical Modeling Framework {FAQs} 545 Chapter 13: {Query/View/Transformation} Operational Mapping Language 549 Chapter 14: Xpand Template Language 605 Part {IV:} Appendixes 651 Appendix A: Graphical Modeling Framework Key Bindings 653 Appendix B: {Model-Driven} Architecture at Eclipse 661 References 671},
	publisher = {{Addison-Wesley} Professional},
	author = {Gronback, Richard C},
	year = {2009}
},

@article{buder_effects_2010,
	title = {Effects of Semantic Quality in Business Process Modeling},
	url = {http://aisel.aisnet.org/amcis2010/173},
	journal = {{AMCIS} 2010 Proceedings},
	author = {Buder, Johannes},
	month = aug,
	year = {2010}
},

@inproceedings{gall_efficiency_2010,
	address = {Athens, Greece},
	title = {Efficiency Requirements in {PIM} to {PSM} Transformations},
	url = {http://www.enase.org/Abstracts/2010/ENASE_2010_Abstracts.htm},
	abstract = {n the paper, we provide extensions for {MDA} {(Model} Driven Architecture), taking into consideration efficiency requirements. The scope of the proposition is limited to the {PIM} {(Platform-Independent} Model) and the {PSM} {(Platform} Specific Model) extension. Efficiency requirements are maximal rates of users requests under which the system has to perform. We extend the {PIM} to the model containing efficiency requirements. We introduce a {PSMSpec} {(PSM} Specification) containing a system architecture, platform, efficiency requirements, and a {PSMInst} {(PSM} Instance) defining a deployment of the system. The {PIM’s} functional specification and efficiency requirements are transformed to the {PSMSpec’s} system architecture and efficiency requirements. Finally, efficiency characteristics are estimated and verified against the efficiency requirements, the {PSMInst} is suggested.},
	author = {Gall, Dariusz},
	year = {2010}
},

@article{fouad_embedding_2010,
	title = {Embedding requirements within {Model-Driven} Architecture},
	issn = {0963-9314},
	url = {http://dx.doi.org/10.1007/s11219-010-9122-7},
	abstract = {{Model-Driven} Architecture {(MDA)} brings benefits to software development, among them the potential for connecting software models with the business domain. This paper focuses on the upstream or {Computation-Independent} Model {(CIM)} phase of {MDA.} Our contention is that, whilst there are many models and notations available within the {CIM} phase, those that are currently popular and supported by the Object Management Group {(OMG)} may not be the most useful notations for business analysts nor sufficient to fully support software requirements and specification. Therefore, with specific emphasis on the value of the Business Process Modelling Notation {(BPMN)} for business analysts, this paper provides an example of a typical {CIM} approach before describing an approach that incorporates specific requirements techniques. A framework extension to {MDA} is then introduced, which embeds requirements and specification within the {CIM}, thus further enhancing the utility of {MDA} by providing a more complete method for business analysis.},
	journal = {Software Quality Journal},
	author = {Fouad, Ali and Phalp, Keith and Kanyaru, John and Jeary, Sheridan},
	year = {2010},
	note = {10.1007/s11219-010-9122-7},
	pages = {1--20},
	annote = {{SUMMARY:}

 }
},

@article{manso_empirical_2009,
	title = {Empirical Validation of Measures for {UML} Class Diagrams: A {Meta-Analysis} Study},
	doi = {http://0-dx.doi.org.innopac.up.ac.za/10.1007/978-3-642-01648-6_32},
	author = {Manso, M. Esperanza and {Cruz-Lemus}, José A. and Genero, Marcela and Piattini, Mario},
	year = {2009},
	pages = {303–313}
},

@inproceedings{morton_enhanced_1999,
	title = {Enhanced software design reusability in safety-critical embedded applications using automated structural test generation},
	doi = {10.1109/AUTEST.1999.800451},
	abstract = {Software reuse is an increasingly important goal of many software development strategies in the safety-critical embedded controls industry. Adaptive reuse is a commonly selected methodology to achieve this goal. As automated structural testing technology matures, it will become an essential component in many successful adaptive reuse techniques. This paper explores some of the facets of automated structural test design and examines ifs relationship to software reusability},
	booktitle = {{AUTOTESTCON} '99. {IEEE} Systems Readiness Technology Conference, 1999. {IEEE}},
	author = {Morton, {S.D.}},
	year = {1999},
	keywords = {automated structural test generation, automatic test software, embedded systems, graphical design language, industrial control, numerical coverage, safety-critical embedded applications, safety-critical embedded controls industry, safety-critical software, software design reusability, software development, software development management, software reusability, structured path coverage, systems analysisadaptive reuse},
	pages = {755–767}
},

@inproceedings{noll_enhancing_2007,
	address = {New York, {NY}, {USA}},
	title = {Enhancing traceability using ontologies},
	isbn = {1-59593-480-4},
	location = {Seoul, Korea},
	doi = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/1244002.1244322},
	booktitle = {{SAC} '07: Proceedings of the 2007 {ACM} symposium on Applied computing},
	publisher = {{ACM}},
	author = {Noll, Rodrigo Perozzo and Ribeiro, Marcelo Blois},
	year = {2007},
	pages = {1496–1497}
},

@article{podgorelec_estimating_2007,
	title = {Estimating software complexity from {UML} models},
	volume = {32},
	issn = {0163-5948},
	url = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/1234741.1234763},
	doi = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/1234741.1234763},
	journal = {{SIGSOFT} Softw. Eng. Notes},
	author = {Podgorelec, Vili and Hericko, Marjan},
	month = mar,
	year = {2007},
	keywords = {complexity metrics, software complexity, software development},
	pages = {1–5},
	annote = {{SUMMARY} {(Fritz):}

model complexity from a general language theoretic approach, pointing out that the purpose of a model is communication. They map the string of symbols of a language (e.g. the model description) onto a Brownian motion/walk problem and estimate long range power law correlations which provide an estimate of the non-random information, hence the which contains purpose and explicit meaning. Ultimately this is used as a measure of the information content in the model which is then related to the complexity of the model.}
},

@inproceedings{mohagheghi_evaluating_2007,
	address = {Washington, {DC}, {USA}},
	title = {Evaluating Quality in {Model-Driven} Engineering},
	isbn = {0-7695-2953-4},
	doi = {http://dx.doi.org/10.1109/MISE.2007.6},
	booktitle = {{MISE} '07: Proceedings of the International Workshop on Modeling in Software Engineering},
	publisher = {{IEEE} Computer Society},
	author = {Mohagheghi, Parastoo and Aagedal, Jan},
	year = {2007},
	keywords = {{MDE}, model quality, quality assessment, quality measures, {UML}},
	pages = {6--11},
	annote = {{SUMMARY:}

- Model quality affected by (1) modeling language (2) modeling process (3) {QA} techniques (4) experience of modelers (5) modeling tools

- {MDE:} model = prime artifact

- Models currently primarily used for communication btw stakeholders

- Quality goals according to {SYSML:} correctness, precision, conciseness, consistency and understandability

- quality requirements - see figure in paper: primary use (dev or maintenance) ={\textgreater} purpose (modification, testing, comprehension, communication, analysis, prediction, implementation \& code generation) ={\textgreater} characteristic (complexity, balance, modularity, communicative, correspondence, self-descriptiveness, conciseness, precision, esthethics, detailedness, consistency \& completeness)

- complexity of modeling language determined by complexity of metamodel

- some vague quality measures (e.g. for complexity)}
},

@inproceedings{espana_evaluating_2009,
	address = {Atlanta, Georgia, {USA}},
	title = {Evaluating the Completeness and Granularity of Functional Requirements Specifications: A Controlled Experiment},
	shorttitle = {Evaluating the Completeness and Granularity of Functional Requirements Specifications},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/RE.2009.33},
	booktitle = {2009 17th {IEEE} International Requirements Engineering Conference},
	author = {Espana, Sergio and {Condori-Fernandez}, Nelly and Gonzalez, Arturo and Pastor, Óscar},
	month = aug,
	year = {2009},
	pages = {161--170},
	annote = {{SUMMARY} {(Fritz):}

- compare communication analysis (particularly communicative event diagrams) to use case analysis (particularly use case diagrams) for requirements completeness, functional encapsulation completeness and linked communication completeness.

- find communication analysis approach to be superior to use case approach. Speculate whether this is due to more prescriptive methodological guidance around communication analysis as compared to use case analysis. Note that the results may well have been different if they included activity or sequence diagrams with the use case specification.

- interesting error identifications around incorrect responsibility groupings and insufficient levels of granularity (functional fragmentation and aggregation errors).

- the grouping of functional fragmentation and aggregation errors with requirements is meant to enforce cohesive functional requirements across levels of granularity

- Note: Find that use case approach is particularly vulnerable to functional fragmentation and aggregation errors - in {URDAD} this is meant to be addressed by the responsibility localization step - need to assess unity criteria for this step.

 }
},

@inproceedings{poels_evaluating_2001,
	address = {Washington, {DC}, {USA}},
	title = {Evaluating the Effect of Inheritance on the Modifiability of {Object-Oriented} Business Domain Models},
	isbn = {0-7695-1028-0},
	booktitle = {{CSMR} '01: Proceedings of the Fifth European Conference on Software Maintenance and Reengineering},
	publisher = {{IEEE} Computer Society},
	author = {Poels, Geert and Dedene, Guido},
	year = {2001},
	pages = {20}
},

@inproceedings{becker_evaluating_2010,
	address = {Honolulu, Hawaii, {USA}},
	title = {Evaluating the Expressiveness of Domain Specific Modeling Languages Using the {Bunge-Wand-Weber} Ontology},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/HICSS.2010.190},
	booktitle = {2010 43rd Hawaii International Conference on System Sciences},
	author = {Becker, Jorg and Bergener, Philipp and Breuker, Dominic and Rackers, Michael},
	year = {2010},
	pages = {1--10}
},

@incollection{baresi_evaluation_2006,
	address = {Berlin, Heidelberg},
	title = {Evaluation of Expected Software Quality: A Customer’s Viewpoint},
	volume = {3922},
	isbn = {978-3-540-33093-6},
	shorttitle = {Evaluation of Expected Software Quality},
	url = {http://0-www.springerlink.com.innopac.up.ac.za/content/1471403356qv1027/},
	booktitle = {Fundamental Approaches to Software Engineering},
	publisher = {Springer Berlin Heidelberg},
	author = {Sacha, Krzysztof},
	editor = {Baresi, Luciano and Heckel, Reiko},
	year = {2006},
	pages = {170--183}
},

@inproceedings{mohagheghi_existing_2009,
	address = {Vancouver, {BC}, Canada},
	title = {Existing model metrics and relations to model quality},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/WOSQ.2009.5071555},
	booktitle = {2009 {ICSE} Workshop on Software Quality},
	author = {Mohagheghi, Parastoo and Dehlen, Vegard},
	year = {2009},
	pages = {39--45}
},

@inproceedings{heck_experiences_2008,
	address = {Sliema, Malta},
	title = {Experiences on Analysis of Requirements Quality},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/ICSEA.2008.32},
	booktitle = {2008 The Third International Conference on Software Engineering Advances},
	author = {Heck, Petra and Parviainen, Päivi},
	month = oct,
	year = {2008},
	pages = {367--372},
	annote = {{SUMMARY} {(Fritz):}

define the {LaQuSo} Software Product Certification Model {(LSPM)} for assessing requirements for consistency and completeness. It is largely a analytical approach based on a set of test cases. They assume data modeling via {ERD} and {UML} diagrams for use cases. I do not hink this is very useful.}
},

@book{beck_extreme_2004,
	edition = {second},
	title = {Extreme Programming Explained},
	publisher = {{Addison-Wesley} Professional},
	author = {Beck, Kent and Andres, Cynthia},
	year = {2004}
},

@inproceedings{abrahamsson_extreme_2004,
	title = {Extreme programming: a survey of empirical data from a controlled case study},
	doi = {10.1109/ISESE.2004.1334895},
	abstract = {Extreme programming {(XP)} is a well known agile software development method. While a number of experience reports have been published in recent years, agile software development in general and {XP} in particular have strongly been criticized for the lack of empirical data. This paper reports a survey of the empirical data obtained from a controlled case study on extreme programming in practical settings. Thus, no hypotheses were set a priori. Four software engineers were acquired to implement a Web-based system (7698 Locs, 820 hours) for data management in a delivery schedule of eight weeks. Development environment was close to the agile home ground. Collected empirical data is grounded on three basic data points: time, size and defects. Data is organized around five system releases, each which were tested by 17 customer testers. System release defect-density was 1.43 {defects/KLOC}, team overall productivity 16.90 Locs/hour and rework costs were 9.8\% of the total development effort. The implications of this study are discussed.},
	booktitle = {Empirical Software Engineering, 2004. {ISESE} '04. Proceedings. 2004 International Symposium on},
	author = {Abrahamsson, P. and Koskela, J.},
	month = aug,
	year = {2004},
	keywords = {agile home ground, agile software development, customer testers, data management, delivery schedule, development environment, extreme programming, productivity, software engineering Web-based system, system release defect-density, team overall productivity},
	pages = {73–82}
},

@inproceedings{genero_finding_2004,
	address = {Washington, {DC}, {USA}},
	title = {Finding {“Early”} Indicators of {UML} Class Diagrams Understandability and Modifiability},
	isbn = {0-7695-2165-7},
	doi = {http://0-dx.doi.org.innopac.up.ac.za/10.1109/ISESE.2004.20},
	booktitle = {{ISESE} '04: Proceedings of the 2004 International Symposium on Empirical Software Engineering},
	publisher = {{IEEE} Computer Society},
	author = {Genero, Marcela and Piatini, Mario and Manso, Esperanza},
	year = {2004},
	pages = {207–216}
},

@inproceedings{yang_formal_2007,
	address = {Berlin, Heidelberg},
	series = {{APPT'07}},
	title = {Formal semantic meanings of architecture-centric model mapping},
	isbn = {{3-540-76836-X}, 978-3-540-76836-4},
	location = {Guangzhou, China},
	url = {http://0-portal.acm.org.innopac.up.ac.z℀itation.cfm?id=1785246.1785324},
	booktitle = {Proceedings of the 7th international conference on Advanced parallel processing technologies},
	publisher = {{Springer-Verlag}},
	author = {Yang, Xiao and Hou, Jinkui and Wan, Jiancheng},
	year = {2007},
	pages = {640–649}
},

@article{black_formal_2009,
	title = {Formal Versus Agile: Survival of the Fittest},
	volume = {42},
	issn = {0018-9162},
	doi = {10.1109/MC.2009.284},
	abstract = {The potential for combining agile and formal methods holds promise. Although it might not always be an easy partnership, it will succeed if it can foster a fruitful interchange of expertise between the two communities.},
	number = {9},
	journal = {Computer},
	author = {Black, Sue and Boca, Paul P. and Bowen, Jonathan P. and Gorman, Jason and Hinchey, Mike},
	month = sep,
	year = {2009},
	pages = {37–45}
},

@inproceedings{bercovici_business_2008,
	title = {From Business Architecture to {SOA} Realization Using {MDD}},
	booktitle = {Lecture Notes in Computer Science},
	publisher = {Springer Berlin},
	author = {Bercovici, Avivit and Fournier, Fabiana and Wecke, Alan J.},
	month = jun,
	year = {2008},
	pages = {381–392}
},

@article{harel_play-scenarios_2001,
	title = {From play-in scenarios to code: an achievable dream},
	volume = {34},
	issn = {0018-9162},
	doi = {10.1109/2.895118},
	abstract = {The article presents a general, rather sweeping development scheme for complex reactive systems, combining ideas that have been known for a long time with more recent ones. The scheme makes it possible to go from a high-level user-friendly requirements capture method, which is called play-in scenarios, via a rich language for describing message sequencing to a full model of the system, and from there to final implementation. A cyclic process of verifying the system against requirements and synthesizing system parts from the requirements is central to the proposal. The article puts special emphasis on the languages, methods, and computerized tools that allow smooth but rigorous transitions between the various stages of the scheme. In contrast to database systems, the article focuses on systems that have a dominant reactive, event-driven facet. For these systems, modeling and analyzing behavior is the most crucial and problematic issue},
	number = {1},
	journal = {Computer},
	author = {Harel, D.},
	month = jan,
	year = {2001},
	keywords = {analysis;, analysis;complex, behavior, capture, development, event-driven, facet;high-level, language;rigorous, languages;systems, level, method;message, parts;formal, process;database, reactive, requirements, scenarios;rich, scheme;system, sequencing;play-in, specification;high, systems;computerized, systems;dominant, tools;cyclic, transitions;sweeping, user-friendly},
	pages = {53 --60}
},

@inproceedings{ziadi_requirements_2009,
	title = {From Requirements to Code Revisited},
	doi = {10.1109/ISORC.2009.29},
	abstract = {In this article paper entitled {"From} {Play-In} Scenarios to Code: An Achievable {Dream",David} Harel presented a development schema that makes it possible to go from high-level user-friendly requirements to a full system model, and from there to the final implementation. Even if Harel's schema represents a real contribution to filing the gap between user requirements and final implementations, there is few work on its feasibility and none within {UML2.This} paper addresses this lack. First we use {UML2} sequence diagram as a formalism for requirement specification. Then an approach that synthesizes state machines from {UML2} sequence diagrams is presented. From the obtained state machines, we implement a transformation to code. The {AIBO} platform (one of several typesof robotic pets designed and manufactured by Sony) is used as a case study toillustrate our implementation.},
	booktitle = {{Object/Component/Service-Oriented} {Real-Time} Distributed Computing, 2009. {ISORC} '09. {IEEE} International Symposium on},
	author = {Ziadi, T. and Blanc, X. and Raji, A.},
	month = mar,
	year = {2009},
	keywords = {2, diagram;code, Language;formal, machine, modeling, requirement;requirement, sequence, specification;, specification;state, {synthesis;Unified}, transformation;high-level, {UML}, user-friendly},
	pages = {228 --235},
	annote = {{SUMMARY:}

-}
},

@inproceedings{penserini_stakeholder_2006,
	address = {Minneapolis, {MN}, {USA}},
	title = {From Stakeholder Needs to Service Requirements},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/SOCCER.2006.4},
	booktitle = {2006 {Service-Oriented} Computing: Consequences for Engineering Requirements {(SOCCER'06} - {RE'06} Workshop)},
	author = {Penserini, Loris and Perini, Anna and Susi, Angelo and Mylopoulos, John},
	year = {2006},
	pages = {8--8}
},

@inproceedings{gasvic_uml_????,
	address = {Varna, Bulgaria},
	title = {From {UML} to ready-to-use {OWL} ontologies},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/IS.2004.1344798},
	booktitle = {2004 2nd International {IEEE} Conference on {'Intelligent} Systems'. Proceedings {(IEEE} Cat. {No.04EX791)}},
	author = {Gasvic, D. and Djuric, D. and Devedzic, V. and Damjanovic, V.},
	keywords = {{OWL}, {UML}, {UML} to {OWL} transformation, {XSLT}},
	pages = {485--490}
},

@article{cabot_uml/ocl_2010,
	title = {From {UML/OCL} to {SBVR} specifications: A challenging transformation},
	volume = {35},
	issn = {0306-4379},
	url = {http://www.sciencedirect.com/science/article/B6V0G-4VGPWPR-1/2/76e114cfb3a4528c896bfb206081300f},
	doi = {DOI: 10.1016/j.is.2008.12.002},
	number = {4},
	journal = {Information Systems},
	author = {Cabot, Jordi and Pau, Raquel and Raventós, Ruth},
	year = {2010},
	note = {Vocabularies, Ontologies and Rules for Enterprise and Business Process Modeling and Management},
	keywords = {Model, ocl, {SBVR}, transformation, {UML}},
	pages = {417 -- 440}
},

@article{solms_generating_2009,
	title = {Generating {MDA's} platform independent model using {URDAD}},
	volume = {22},
	issn = {0950-7051},
	url = {http://www.sciencedirect.com/science/article/B6V0P-4V42J6C-1/2/ebefea72ec0e8b6a7006a0500b9c4d0d},
	doi = {10.1016/j.knosys.2008.11.008},
	abstract = {This paper formulates a set of minimal requirements for the Platform Independent Model {(PIM)} of the Model Driven Architecture {(MDA).} It then defines the Use Case, Responsibility Driven Analysis and Design methodology {(URDAD)} which provides a simple, algorithmic design methodology generating a {PIM} satisfying the specified {PIM} requirements.},
	number = {3},
	journal = {{Knowledge-Based} Systems},
	author = {Solms, Fritz and Loubser, Dawid},
	month = apr,
	year = {2009},
	keywords = {Business process design, Design methodology, mda, Model driven development, {URDAD}},
	pages = {174--185}
},

@inproceedings{kalnina_generation_2010,
	address = {Athens, Greece},
	title = {Generation Mechanisms in Graphical Template Language},
	url = {http://www.enase.org/Abstracts/2010/ENASE_2010_Abstracts.htm},
	abstract = {Textual models in {MDD} typically are generated in their concrete syntax using a template based language. On the contrary, graphical models as a rule are generated in abstract syntax and then visualized, which is not very efficient for complicated languages. The paper discusses a case of template based generation of graphical models in a concrete syntax. We apply this approach to generation of programs in {MOLA} transformation language using the Template {MOLA} language. A novel idea of merge mechanism in {MOLA} templates is proposed which permits to obtain the required structure of generated models in an easy way.},
	author = {Kalnina, Elina and Kalnins, Audris and Celms, Edgars and Sostaks, Agris and Iraids, Janis},
	year = {2010}
},

@inproceedings{kamata_how_2007,
	address = {Delhi, India},
	title = {How Does Requirements Quality Relate to Project Success or Failure?},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/RE.2007.31},
	booktitle = {15th {IEEE} International Requirements Engineering Conference {(RE} 2007)},
	author = {Kamata, Mayumi Itakura and Tamai, Tetsuo},
	month = oct,
	year = {2007},
	pages = {69--78}
},

@article{_ieee_2003,
	title = {{IEEE} Guide for {CASE} Tool Interconnections - Classification and Description},
	doi = {10.1109/IEEESTD.2003.94231},
	abstract = {This guide describes the scope of application and interrelationships for the members of the {IEEE} 1175 family of standards. It points the reader to the appropriate member standard that addresses issues involved in effectively integrating computing system tools into a productive engineering environment.},
	journal = {{IEEE} Std 1175.1-2002 {(Revision} of {IEEE} Std 1175.1-1991)},
	author = {, {IEEE}},
	year = {2003},
	keywords = {1175, aided, {CASE}, engineering;integrated, {integration;CASE}, {interconnection;CASE}, {interfaces;CASE}, {issues;CASE}, {issues;IEEE}, organization, platform, Software, software;software, standards;computer, {standards;IEEE}, tool, tools;, user},
	pages = {0\_1}
},

@book{raj_implementing_????,
	title = {Implementing {SOA} with the Java {EE} 5 {SDK}},
	url = {http://java.sun.com/developer/technicalArticles/WebServices/soa3/},
	author = {Raj, Binod {P.G.} Keith Babo Gopalan Suresh and Palkovic, Rick}
},

@inproceedings{hussain_improving_2004,
	address = {New York, {NY}, {USA}},
	series = {{OOPSLA} '04},
	title = {Improving quality in conceptual modeling},
	isbn = {1-58113-833-4},
	location = {Vancouver, {BC}, {CANADA}},
	url = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/1028664.1028734},
	doi = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/1028664.1028734},
	booktitle = {Companion to the 19th annual {ACM} {SIGPLAN} conference on Object-oriented programming systems, languages, and applications},
	publisher = {{ACM}},
	author = {Hussain, Tauqeer and Shamail, Shafay and Awais, Mian M},
	year = {2004},
	keywords = {conceptual model, {ER} model, functional dependency, normalization, schema transformation},
	pages = {170–171}
},

@inproceedings{lange_improving_2006,
	address = {New York, {NY}, {USA}},
	series = {{ICSE} '06},
	title = {Improving the quality of {UML} models in practice},
	isbn = {1-59593-375-1},
	location = {Shanghai, China},
	url = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/1134285.1134472},
	doi = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/1134285.1134472},
	booktitle = {Proceedings of the 28th international conference on Software engineering},
	publisher = {{ACM}},
	author = {Lange, Christian F. J},
	year = {2006},
	keywords = {completeness, consistency, consistency checking, defect detection, model quality, quality, {UML}},
	pages = {993–996},
	annote = {{SUMMARY:}

- model quality \& defects largely in form of inconsistence, completeness

- quality issues caused by lack of formal semantics for {UML}, large degrees of freedom, ability to provide same info througha number of diagrams/views.

- {UML} model defects often remain undetected and cause misunderstandings

- in process of assembling best practices for {UML} mapping}
},

@article{lange_practice:_2006,
	title = {In practice: {UML} software architecture and design description},
	volume = {23},
	issn = {0740-7459},
	doi = {10.1109/MS.2006.50},
	abstract = {The Unified Modeling Language has attracted many organizations and practitioners. {UML} is now the de facto modeling language for software development. Several features account for its popularity: it's a standardized notation, rich in expressivity; {UML} 2.0 provides 13 diagram types that enable modeling several different views and abstraction levels. Furthermore, {UML} supports domain-specific extensions using stereotypes and tagged values. Finally, several case tools integrate {UML} modeling with other tasks such as generating code and reverse-engineering models from code. Our study focused on {UML} use and model quality in actual projects rather than on its adequacy as a notation or language.},
	number = {2},
	journal = {Software, {IEEE}},
	author = {Lange, {C.F.J.} and Chaudron, {M.R.V.} and Muskens, J.},
	month = mar,
	year = {2006},
	keywords = {domain-specific modelling, formal specification, software architecture, software design description, software development, software metrics {UML}, Unified Modeling Language},
	pages = {40–46}
},

@book{avison_information_1988,
	address = {Oxford, {UK}},
	title = {Information System Development: Methodologies, Techniques and Tools},
	publisher = {Blackwell Scientific Publications},
	author = {Avison, D. E. and Fitzgerald, G.},
	year = {1988}
},

@article{bobkowska_integrating_2009,
	title = {Integrating Quality Criteria and Methods of Evaluation for Software Models},
	url = {http://www.igi-global.com/bookstore/titledetails.aspx?titleid=766},
	doi = {10.4018/978-1-60566-006-6.ch004},
	abstract = {Successful realization of the model-driven software development visions in practice requires high quality models. This chapter focuses on the quality of models themselves. It discusses context-free and context- dependent quality criteria for models and then moves on to methods of evaluation which facilitate checking whether a model is good enough. We use linguistic theories to understand groups of criteria and their impact on other models, software product and the process of software development. We propose a strict distinction of the impacts of visual modeling languages, models of the system and tools for quality criteria. This distinction is helpful when designing the methods of evaluation and making decision about the point in time, scope and personnel responsible for quality assessment. As the quality criteria and several methods of evaluation has usually been considered separately we propose a methodology which integrates them. Such an integrated approach provides the following benefits. It allows for designing methods of evaluation based on quality criteria and elements of the model (or modeling language) in the context of specific needs. It can be applied for management of the scope of evaluation with quality criteria as well as configuration of the method to a specific situation. It allows for flexible and efficient conduct of the evaluation with selection of the methods of evaluation. Finally, this chapter presents case studies which illustrate the approach.},
	journal = {{Model-Driven} Software Development: Integrating Quality Assurance},
	author = {Bobkowska, Anna},
	year = {2009},
	pages = {78--94}
},

@inproceedings{shinkawa_inter-model_2006,
	title = {{Inter-Model} Consistency in {UML} Based on {CPN} Formalism},
	doi = {10.1109/APSEC.2006.41},
	abstract = {The Unified Modeling Language {(UML)} is one of the most widely used industry-standard modeling tools in object orientation. It provides us with variety of diagrams with rigorous syntax and semantics to build precise analysis models, design models, and implementation models for software development. Whereas this variety helps us to model the problem domain from various viewpoints, it makes it difficult to keep consistency between the models presented by different diagrams. This paper proposes a complementary modeling process to {UML} modeling, which makes it easy to keep consistency between heterogeneous {UML} models. The process is based on the use case driven approach and colored Petri net {(CPN)} formalism. The consistency is defined along the use case driven modeling process, using {CPN} formalism. The paper focuses on four major {UML} diagrams, among which the consistency is kept and assured. At the end of the process, we obtain four kinds of {UML} compatible {CPN} models, which can easily converted to the corresponding {UML} diagrams for further software development.},
	booktitle = {Software Engineering Conference, 2006. {APSEC} 2006. 13th Asia Pacific},
	author = {Shinkawa, Y.},
	month = dec,
	year = {2006},
	keywords = {case driven approach, colored Petri net, intermodel consistency, Petri nets, software development, software {engineeringCPN}, {UML}, Unified Modeling Language},
	pages = {411–418}
},

@inproceedings{jacobs_introducing_????,
	address = {Limerick, Ireland},
	title = {Introducing measurable quality requirements: a case study},
	shorttitle = {Introducing measurable quality requirements},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/ISRE.1999.777997},
	booktitle = {Proceedings {IEEE} International Symposium on Requirements Engineering {(Cat.} {No.PR00188)}},
	author = {Jacobs, S.},
	pages = {172--179}
},

@misc{_introduction_????,
	title = {Introduction to {JavaScript} - Online},
	url = {http://www.hwg.org/services/classes/javascriptcourse.html},
	howpublished = {http://www.hwg.org/services/classes/javascriptcourse.html}
},

@inproceedings{muskens_investigations_2004,
	title = {Investigations in applying metrics to multi-view architecture models},
	doi = {10.1109/EURMIC.2004.1333392},
	abstract = {The goal of our research is to develop industry-proof software architecture and design metrics. We identify a number of problems that arise in computing software architecture and design metrics in industrial settings that were not encountered in computing source-code metrics. These problems include the absence of a single, unifying representation for architectures and they arise from the fact that architecture diagrams are used in an informal manner. We describe our approach towards defining metrics for architectures and designs which are represented in the 4+1 views paradigm using {UML.} We report our experiences with architectural metrics in industrial settings.},
	booktitle = {Euromicro Conference, 2004. Proceedings. 30th},
	author = {Muskens, J. and Chaudron, M. and Lange, C.},
	month = aug,
	year = {2004},
	keywords = {industrial settings, industry-proof software architecture, object-oriented programming, software architecture, software development management, software metrics {UML} design pattern, source-code metrics, Unified Modeling Language},
	pages = {372–379}
},

@misc{iso_-_international_organization_for_standardization_iso_????,
	type = {Text},
	title = {{ISO} - International Organization for Standardization},
	copyright = {Copyright {ISO} - International Organization for Standardization. All rights reserved.},
	url = {http://www.iso.org/iso/catalogue_detail?csnumber=29280},
	author = {{ISO} - International Organization for Standardization and {ISO} - International Organization for Standardization},
	howpublished = {http://www.iso.org/iso/catalogue\_detail?csnumber=29280}
},

@book{hoyle_iso_2000,
	edition = {4th Revised edition},
	title = {{ISO} 9000: 2000 Quality Systems Handbook},
	isbn = {0750644516},
	shorttitle = {{ISO} 9000},
	publisher = {{Butterworth-Heinemann} Ltd},
	author = {Hoyle, David},
	month = dec,
	year = {2000}
},

@incollection{halpin_it_2009,
	address = {Berlin, Heidelberg},
	title = {{IT} {Capability-Based} Business Process Design through {Service-Oriented} Requirements Engineering},
	volume = {29},
	isbn = {978-3-642-01861-9},
	url = {http://0-www.springerlink.com.innopac.up.ac.za/content/uk24l62736238323/export-citation/},
	booktitle = {Enterprise, {Business-Process} and Information Systems Modeling},
	publisher = {Springer Berlin Heidelberg},
	author = {Adam, Sebastian and Ünalan, Özgür and Riegel, Norman and Kerkow, Daniel},
	editor = {Halpin, Terry and Krogstie, John and Nurcan, Selmin and Proper, Erik and Schmidt, Rainer and Soffer, Pnina and Ukor, Roland},
	year = {2009},
	pages = {113--125}
},

@book{corporation_java_????,
	title = {Java {EE} at a Glance},
	url = {http://java.sun.com/javaee/},
	author = {corporation, Sun Microsystems}
},

@article{mattsson_linking_2009,
	title = {Linking {Model-Driven} Development and Software Architecture: A Case Study},
	volume = {35},
	issn = {0098-5589},
	shorttitle = {Linking {Model-Driven} Development and Software Architecture},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/TSE.2008.87},
	number = {1},
	journal = {{IEEE} Transactions on Software Engineering},
	author = {Mattsson, Anders and Lundell, Björn and Lings, Brian and Fitzgerald, Brian},
	month = jan,
	year = {2009},
	keywords = {Architecture, formal methods, {MDD}},
	pages = {83--93},
	annote = {{SUMMARY:}

- Critically looks at {MDD} case study, identifying shot-comings of {MDD} approach used in that study

- Conclude that it is important to formalize architectural design rules.

- Highlight time-consuming error-prone manual practices required to keep system consistent with its "architecture".

- Nice summary statement of {MDD:} {"A} basic premise of {MDD} is to capture all important design information in a set of formal or semi-formal models ..."}
},

@inproceedings{lange_managing_2005,
	title = {Managing Model Quality in {UML-Based} Software Development},
	doi = {10.1109/STEP.2005.16},
	abstract = {With the advent of {UML} and {MDA}, models play an increasingly important role in software development. Hence, the management of the quality of models is of key importance for completing projects succesfully. However, existing approaches towards software quality focus on the implementation and execution of systems. These existing quality models cannot be straightforwardly mapped to the domain of {UML} models as source code and models differ in several essential ways (level of abstraction, precision, completeness and consistency). In this paper we present a quality model for managing {UML-based} software development. This model enables identifying the need for actions for quality improvement already in early stages of the life-cycle. Early actions for quality improvement are less resource intensive and, hence, less cost intensive than later actions. We discuss our experiences in applying the quality model to several industrial case studies. Finally we present a tool that visualizes our quality model. This tool helps in relating management level quality data to detailed data about specific quality subcharacteristics},
	booktitle = {Software Technology and Engineering Practice, 2005. 13th {IEEE} International Workshop on},
	author = {Lange, {C.F.J.} and Chaudron, {M.R.V.}},
	year = {2005},
	keywords = {formal specification, model quality management, quality improvement, quality management, software management, software quality, software {qualityUML-based} software development, Unified Modeling Language},
	pages = {7–16}
},

@inproceedings{solms_maximum_1994,
	title = {Maximum entropy and average error rates in digital communication systems},
	doi = {10.1109/COMSIG.1994.512353},
	abstract = {In digital communication systems, the criteria of merit of system performance is usually average probability of error as function of signal-to-noise ratio. The Gauss quadrature rule {(GQR)} formulation and the maximum entropy method {(MEM)} have been proposed in the literature to determine and calculate an unknown distribution and average error rate from moments. We compare the accuracy of these two methods when a distribution is estimated and the average error rate is calculated. It is shown that the {MEM} needs significantly less moments when the distribution is estimated from its moments than the {GQR} formulation, and that the {GQR} formulation fails under certain conditions when average error rate is calculated. Specifically, the latter is encountered at high signal-to-noise ratios, where the {MEM} still delivers reliable results},
	booktitle = {Communications and Signal Processing, 1994. {COMSIG-94.}, Proceedings of the 1994 {IEEE} South African Symposium on},
	author = {Solms, F. and Rooyen, P. van and Kunicki, J.},
	month = oct,
	year = {1994},
	keywords = {average error rate, average error rates, average probability, digital communication, digital communication systems, distribution, error statistics, high signal-to-noise ratios, maximum entropy method, maximum entropy methods, maximum entropy rates, {MEM}, moments, signal-to-noise ratio, {SNR}, statistical analysis Gauss quadrature rule, system performance},
	pages = {11–15}
},

@inproceedings{vanrooyen_maximum_1995,
	title = {Maximum entropy investigation of the inter user interference distribution in a {DS/SSMA} system},
	volume = {3},
	doi = {10.1109/PIMRC.1995.477374},
	booktitle = {Personal, Indoor and Mobile Radio Communications, 1995. {PIMRC'95.} {'Wireless:} Merging onto the Information Superhighway'., Sixth {IEEE} International Symposium on},
	author = {{vanRooyen}, P. and Solms, F.},
	month = sep,
	year = {1995},
	keywords = {direct sequence spread spectrum multiple access, discrimination information, equal second moments, fading, Gaussian assumption, Gaussian distribution, Gaussian processes, interuser interference distribution, maximum entropy method, maximum entropy methods, multi-access systems, Nakagami-m distribution, Nakagami-m faded channel, probability density function, pseudonoise codes, radiofrequency interference, relative entropy, spread spectrum {communicationDS/SSMA} system},
	pages = {1308–},
	annote = {A collaboration between Applied Maths and Engineering at Johannesburg University.}
},

@misc{_mda_2003,
	title = {{MDA} Guide Version 1.0.1},
	url = {http://www.omg.org/cgi-bin/doc?omg/03-06-01},
	publisher = {Object Management Group},
	month = jun,
	year = {2003}
},

@inproceedings{mayer_mdd4soa:_2008,
	address = {Munich, Germany},
	title = {{MDD4SOA:} {Model-Driven} Service Orchestration},
	shorttitle = {{MDD4SOA}},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/EDOC.2008.55},
	booktitle = {2008 12th International {IEEE} Enterprise Distributed Object Computing Conference},
	author = {Mayer, Philip and Schroeder, Andreas and Koch, Nora},
	month = sep,
	year = {2008},
	keywords = {{MDD}, Service Orchestration, soa},
	pages = {203--212},
	annote = {{SUMMARY:}

- Specify {UML} extension for modeling service orchestration

- Useful to compare to {URDAD.}

- Claim that modeling for {SOA} still weak.}
},

@article{booch_measuring_2008,
	title = {Measuring Architectural Complexity},
	volume = {25},
	issn = {0740-7459},
	doi = {http://0-dx.doi.org.innopac.up.ac.za/10.1109/MS.2008.91},
	number = {4},
	journal = {{IEEE} Softw.},
	author = {Booch, Grady},
	year = {2008},
	pages = {14–15}
},

@article{booch_measuring_2008-1,
	title = {Measuring Architectural Complexity},
	volume = {25},
	issn = {0740-7459},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/MS.2008.91},
	number = {4},
	journal = {{IEEE} Software},
	author = {Booch, Grady},
	month = jul,
	year = {2008},
	pages = {14--15}
},

@article{sengupta_measuring_2011,
	title = {Measuring complexity of component based architecture: a graph based approach},
	volume = {36},
	issn = {0163-5948},
	url = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/1921532.1921546},
	doi = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/1921532.1921546},
	journal = {{SIGSOFT} Softw. Eng. Notes},
	author = {Sengupta, Sabnam and Kanjilal, Ananya and Bhattacharya, Swapan},
	month = jan,
	year = {2011},
	keywords = {complexity metrics, component architecture complexity, component based architecture, graph based architecture analysis},
	pages = {1–10},
	annote = {{SUMMARY} {(Fritz):}

a graph theoretic approach, defining a directed graph connecting caller and called components and introducing a complexity measure which contains factors estimating individual component, inter-component complexity and overall topological complexity. All these measures are largely based on inter-component interaction (calling).}
},

@article{yadav_measuring_2009,
	title = {Measuring design complexity: an inherited method perspective},
	volume = {34},
	issn = {0163-5948},
	url = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/1543405.1564532},
	doi = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/1543405.1564532},
	journal = {{SIGSOFT} Softw. Eng. Notes},
	author = {Yadav, A. and Khan, R. A},
	month = jul,
	year = {2009},
	keywords = {class hierarchy, complexity, design complexity, design inheritance, error, fault, measurement, object oriented design, reliability, software reliability},
	pages = {1–5},
	annote = {{SUMMARY} {(Fritz):}

A largely useless paper assessing design complexity by the number of inherited methods.}
},

@article{card_measuring_1988,
	title = {Measuring software design complexity},
	volume = {8},
	issn = {0164-1212},
	url = {http://www.sciencedirect.com/science/article/B6V0N-48TD2KR-7R/2/829b1282c0ab884f542d3da84769c96e},
	doi = {10.1016/0164-1212(88)90021-0},
	abstract = {{{\textless}p{\textgreater}{\textless}br/{\textgreater}Architectural} design complexity derives from two sources: structural (or intermodule) complexity and local (or intramodule) complexity. These complexity attributes can be defined in terms of functions of the number of {I/O} variables and fanout of the modules comprising the design. A complexity indicator based on these measures showed good agreement with a subjective assessment of design quality but even better agreement with an objective measure of software error rate. Although based on a study of only eight medium-scale scientific projects, the data strongly support the value of the proposed complexity measure in this context. Furthermore, graphic representations of the software designs demonstrate structural differences corresponding to the results of the numerical complexity analysis. The proposed complexity indicator seems likely to be a useful tool for evaluating design quality before committing the design to code.{\textless}/p{\textgreater}},
	number = {3},
	journal = {Journal of Systems and Software},
	author = {Card, D. N. and Agresti, W. W.},
	month = jun,
	year = {1988},
	pages = {185--197}
},

@inproceedings{zhou_measuring_2005,
	address = {New York, {NY}, {USA}},
	series = {{SAC} '05},
	title = {Measuring structural complexity for class diagrams: an information theory approach},
	isbn = {1-58113-964-0},
	location = {Santa Fe, New Mexico},
	url = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/1066677.1067057},
	doi = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/1066677.1067057},
	booktitle = {Proceedings of the 2005 {ACM} symposium on Applied computing},
	publisher = {{ACM}},
	author = {Zhou, Yuming and Xu, Baowen},
	year = {2005},
	keywords = {class diagrams, dependence, entropy distance, measure, structural complexity},
	pages = {1679–1683}
},

@misc{_meta_2011,
	title = {Meta Object Facility {(MOF)} 2.0 {Query/View/Transformation} Specification v1.1},
	url = {http://www.omg.org/spec/QVT/},
	publisher = {Object Management Group},
	month = jan,
	year = {2011}
},

@misc{_meta_2006,
	title = {Meta Object Facility {(MOF)} Core Specification v2.0},
	url = {http://www.omg.org/spec/MOF/2.0/},
	publisher = {Object Management Group},
	month = jan,
	year = {2006},
	keywords = {{MOF}, {OMG}, specification}
},

@book{gonzalez-perez_metamodelling_2008,
	title = {Metamodelling for Software Engineering},
	isbn = {0470030364},
	publisher = {Wiley},
	author = {{Gonzalez-Perez}, Cesar and {Henderson-Sellers}, Brian},
	month = oct,
	year = {2008}
},

@inproceedings{quartel_methodological_2004,
	address = {New York, {NY}, {USA}},
	title = {Methodological support for service-oriented design with {ISDL}},
	isbn = {1-58113-871-7},
	location = {New York, {NY}, {USA}},
	doi = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/1035167.1035169},
	booktitle = {{ICSOC} '04: Proceedings of the 2nd international conference on Service oriented computing},
	publisher = {{ACM}},
	author = {Quartel, Dick and Dijkman, Remco and Sinderen, Marten van},
	year = {2004},
	pages = {1–10}
},

@inproceedings{chitforoush_methodology_2007,
	address = {Nagoya, Aichi, Japan},
	title = {Methodology Support for the Model Driven Architecture},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/ASPEC.2007.58},
	booktitle = {14th {Asia-Pacific} Software Engineering Conference {(APSEC'07)}},
	author = {Chitforoush, Fatemeh and Yazdandoost, Maryam and Ramsin, Raman},
	month = dec,
	year = {2007},
	keywords = {{MDA}, {MDD}, methodology},
	pages = {454--461},
	annote = {{SUMMARY:}

- Reviews diff methodologies suited for {MDA}

- Bulk of effort in {MDA:}

1. {BP} requirements \& design

2. Architecture specification

3. Consitnuously improving mapping rules.

- {URDAD}, on the other hand, only methodology for defining {PIM.}}
},

@article{salasin_metrics_2007,
	title = {Metrics For {Service-Oriented} Architecture {(SOA)} Systems: What Developers Should Know},
	volume = {11},
	issn = {1092-0617},
	abstract = {{Service-Oriented} Architectures {(SOA)} provide the first widely applicable approach to tying together diverse "stovepipe" (or "silo") systems. They are, therefore, a "pure" example of how to build Systems of Systems {(SOS).} With the growing interest in and increasing number of implementations of {SOAs}, there is a pressing need for measures and metrics that can help {SOA} developers {(Chief} Architects or Program Managers) in predicting potential problems in the development/evolution of their {SOA} system. For {SOA-based} systems, such assistance is vital since their success depends on melding appropriate technologies and design with organizational characteristics, customer profiles, and functions provided, a Systems of Systems {(SOS)} concern. This paper discusses an ongoing effort in this area. In addition to providing a useful tool, this effort is technically significant for three key reasons. First, {SOA} specification and assessment requires consideration of technology factors and their relationships to the organization, and to individual information consumers. Essentially, these are related to metrics for systems engineering. Second, requirements (e.g., ease of use, flexibility) are defined in terms of system characteristics that can be modeled and measured. Thus, the system is defined by a set of evolving models and metrics that allow continual evaluation of progress towards eliminating problems. Third, since requirements are initially expressed with coarse-grained conceptual models, measurement of the characteristics of these models can indicate areas where the system might not meet some requirement, thereby allowing early corrective action. Thereafter, more refined models, can be developed to track the success of corrective actions. This paper provides a background on {SOA}, challenges for {SOA} metrics, and proposes a model-based metrics framework for evaluating {SOAbased} systems on an ongoing basis. It provides exemplar metrics and measures for {SOA}, and discusses several approaches to metrics quantification and presentation.},
	number = {2},
	journal = {J. Integr. Des. Process Sci.},
	author = {Salasin, John and Madni, Azad M.},
	year = {2007},
	pages = {55–71},
	annote = {{SUMMARY:}

- propose model-based metrics framework for evaluating {SOA-based} systems}
},

@inproceedings{cardei_model_2008,
	title = {Model Based Requirements Specification and Validation for Component Architectures},
	doi = {10.1109/SYSTEMS.2008.4519001},
	abstract = {Requirements specification is a major component of the system development cycle. Mistakes and omissions in requirements documents lead to ambiguous or wrong interpretation by engineers and, in turn, cause errors that trickle down in design and implementation with consequences on the overall development cost. In this paper we describe a methodology for requirements specification that aims to alleviate the above issues and that produces models for functional requirements that can be automatically validated for completeness and consistency. This methodology is part of the Requirements Driven Design Automation framework {(RDDA)} that we develop for component-based system development. The {RDDA} framework uses an ontology-based language for semantic description of functional product requirements, {UM-} {L/SysML} structure diagrams, component constraints, and Quality of Service. The front end method for requirements specification is the {SysML} editor in Rhapsody. A requirements model in {OWL} is converted from {SysML} {XMI} representation. The specification is validated for completeness and consistency with a ruled-based system implemented in Prolog. With our methodology, omissions and several types of consistency errors present in the requirements specification are detected early on, before the design stage.},
	booktitle = {Systems Conference, 2008 2nd Annual {IEEE}},
	author = {Cardei, I. and Fonoage, M. and Shankar, R.},
	month = apr,
	year = {2008},
	keywords = {component architectures, component-based system development, formal specification, functional requirements, knowledge based systems, model based requirements specification, model based requirements validation, object-oriented programming, ontologies (artificial intelligence), ontology-based language, Prolog, quality of service, requirements driven design automation, ruled-based system, {SysML} {XMI} representation, system development cycle, systems {analysisOWL}, {UML/SysML} structure diagrams, Unified Modeling Language},
	pages = {1–8},
	annote = {{SUMMARY:}

- provide a methodology {(RDDA} - Requirements Driven Design Automation) for requirements specification

- resultant functional requirements can be automatically validated for consistency and completeness

- Define {ODL} {(OPP} Design Language, {OPP} - One Pass to Production), an {OWL-based} {DSL} for requirements specification

- Users add semantic descriptions inside {SYS-ML}, {SYSML} diagrams exported as {XMI} and transformed via {XSLT} to {ODL} ontology

- Validation of consistency and completeness done in Prolog against {ODL}

- very structure focused, no services contracts, no recursive orchestration of higher level services from lower level services

 }
},

@article{gronback_model_2008,
	title = {Model Driven Architecture at Eclipse},
	volume = {2008},
	url = {http://www.cepis.org/upgrade/index.jsp?p=2139&n=2148},
	abstract = {The {Model-Driven} Architecture {(MDA®)} initiative has come a long way in its seven-year history, as has the Eclipse open source community. With the top-level Eclipse Modeling Project {(EMP)} focused in part on working with standards organizations such as the Object Management Group {(OMG)}, much of the promise of {MDA} is realized today with the software available to its community. And while much can be done to improve the state of the relationship between the {OMG} and the Modeling project, it can be argued that Eclipse leads the way in providing open source specification-compliant solutions,
and is therefore contributing significantly to the overall success of {MDA.}},
	number = {{II}},
	journal = {The European Journal for the Informatics Professional},
	author = {Gronback, R. C. and Merks, E.},
	month = apr,
	year = {2008}
},

@book{frankel_model_2003,
	address = {New York},
	title = {Model Driven Architecture: Applying {MDA} to enterprise computing},
	publisher = {John Wiley \& Sons},
	author = {Frankel, David S.},
	year = {2003}
},

@article{schmidt_model_2006,
	title = {Model Driven Engineering},
	volume = {39},
	number = {2},
	journal = {{IEEE} Computer},
	author = {Schmidt, Douglas C.},
	month = feb,
	year = {2006},
	pages = {25–31}
},

@inproceedings{staab_model_2010,
	series = {{LNCS}},
	title = {Model Driven Engineering with Ontology Technologies},
	volume = {6325},
	booktitle = {Reasoning Web. Semantic Technologies for Software Engineering},
	publisher = {Springer},
	author = {Staab, Steffen and Walter, Tobias and Gr�ner, Gerd and Silva Parreiras, Fernando},
	year = {2010},
	annote = {{SUMMARY:}

- often metamodels used as a basis for software models do not have formal or consistent semantics

- define semantic \& syntactic constraints on abstract syntax for metamodels

* semantics should be defined either through precise metamodel or through transformation into logic representation

- model correctness often through informal analysis - should be made explicit through constraints on metamodel

- std ontology reasoning services

* consistency: (if instance of ontology can exist)

* satisfiable: all concepts/classes are satisfiable

* classification:returns for individual a set of concepts within ontology which contain/describe individual

* subsumption: checks whether individuals of class A are subset of individuals of class B

* services to explain issues, repair issues, ...

- perform mapping between {MOF} \& {OWL} spaces using {twoUse}

- Ontology reasoning for both static and behaviour modeling languages

 }
},

@article{aizenbud-reshef_model_2006,
	title = {Model traceability},
	volume = {45},
	number = {3},
	journal = {{IBM} Systems Journal},
	author = {{Aizenbud-Reshef}, Netta and Nolan, Brian T. and Rubin, Julia and {Shaham-Garifi}, Yael},
	year = {2006},
	pages = {515–526}
},

@book{pastor_model-driven_2007,
	title = {{Model-Driven} Architecture in Practice},
	publisher = {Springer},
	author = {Pastor, Oscar and Molina, Juan Carlos},
	year = {2007}
},

@article{france_model-driven_2006,
	title = {{Model-Driven} Development Using {UML-2:} Promises and Pitfalls},
	volume = {39},
	number = {2},
	journal = {Computer},
	author = {France, Sudipto Ghosh Trung {Dinh-Trong} Robert B. and Solberg, Arnor},
	month = feb,
	year = {2006},
	pages = {59–66}
},

@article{larson_model-driven_2006,
	title = {Model-driven development: Assets and reuse},
	volume = {45},
	number = {3},
	journal = {{IBM} Systems Journal},
	author = {Larson, Grant},
	year = {2006},
	pages = {541–554}
},

@inproceedings{braek_model-driven_2005,
	title = {{Model-Driven} Service Engineering},
	booktitle = {{Model-Driven} Software Development},
	publisher = {Springer Verlag},
	author = {Braek, Rolv and Melby, Geir},
	year = {2005},
	pages = {385–401}
},

@book{stahl_model-driven_2004,
	title = {{Model-Driven} Software Development},
	publisher = {John Wiley \& Sons},
	author = {Stahl, Thomas and Voelter, Markus},
	year = {2004}
},

@inproceedings{stojanovic_modeling_????,
	address = {The Hague, Netherlands},
	title = {Modeling and design of service-oriented architecture},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/ICSMC.2004.1401181},
	booktitle = {2004 {IEEE} International Conference on Systems, Man and Cybernetics {(IEEE} Cat. {No.04CH37583)}},
	author = {Stojanovic, Z. and Dahanayake, A. and Sol, H.},
	pages = {4147--4152}
},

@inproceedings{cao_modeling_2008,
	address = {Nanjing, China},
	title = {Modeling and Refining the {Service-Oriented} Requirement},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/TASE.2008.30},
	booktitle = {2008 2nd {IFIP/IEEE} International Symposium on Theoretical Aspects of Software Engineering},
	author = {Cao, {Xiao-Xia} and Miao, {Huai-Kou} and Xu, {Qing-Guo}},
	year = {2008},
	pages = {159--165}
},

@article{misra_modeling_2005,
	title = {Modeling {Design/Coding} Factors That Drive Maintainability Of Software Systems},
	volume = {13},
	number = {3},
	journal = {Software Quality Journal},
	author = {Misra, Subhas C.},
	year = {2005},
	pages = {297–320}
},

@misc{_mof_2007,
	title = {{MOF} 2.0 {XMI} Mapping v2.1.1},
	url = {http://www.omg.org/spec/XMI/2.1.1/},
	publisher = {Object Management Group},
	month = dec,
	year = {2007},
	keywords = {{MOF}, {OMG}, specification, {XMI}}
},

@misc{_mof_2008,
	title = {{MOF} Model to Text Transformation Language v1.0},
	url = {http://www.omg.org/spec/MOFM2T/1.0/PDF/},
	publisher = {Object Management Group},
	month = jan,
	year = {2008},
	keywords = {{MOFM2T}, {OMG}, specification}
},

@inproceedings{mohamed_mof-emf_2007,
	title = {{MOF-EMF} Alignment},
	doi = {10.1109/CONIELECOMP.2007.85},
	abstract = {This paper explains the relationship between the {MOF} and {EMF} meta-models and describes the {ATL} transformation tool. Based on this specific mapping, general principles for transformation between these modelling frameworks are discussed and used to reflect on our current standardization work on {MOF} query/view/transformations {(QVT)} within the {OMG's} model driven architecture initiative.},
	booktitle = {Autonomic and Autonomous Systems, 2007. {ICAS07.} Third International Conference on},
	author = {Mohamed, M. and Romdhani, M. and Ghedira, K.},
	month = jun,
	year = {2007},
	keywords = {{ATL}, {EMF}, {MDA}, {MDE}, {MOF}, {OMG}},
	pages = {1}
},

@article{gill_new_2010,
	title = {New complexity model for classes in object oriented system},
	volume = {35},
	issn = {0163-5948},
	url = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/1838687.1838704},
	doi = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/1838687.1838704},
	journal = {{SIGSOFT} Softw. Eng. Notes},
	author = {Gill, Nasib S and Sikka, Sunil},
	month = oct,
	year = {2010},
	keywords = {data call, method call, object oriented metrics, software complexity},
	pages = {1–7},
	annote = {{SUMMARY} {(Fritz):}

Estimates class complexity as a sum of the complexity of all its methods. The method complexity is calculated from a number of factors including

(1) the control flow complexity which is estimated using Mcabe's cyclometric complexity measure,

(2) The sum of the method call complexities with the method call complexity providing a measure of the number of nodes which need to be traversed to access a method, and

(3) the data call complexity which is based on the number of nodes which need to be traversed to access the required data element.

 }
},

@inproceedings{abrahamsson_new_2003,
	address = {Washington, {DC}, {USA}},
	title = {New directions on agile methods: a comparative analysis},
	isbn = {{0-7695-1877-X}},
	location = {Portland, Oregon},
	booktitle = {{ICSE} '03: Proceedings of the 25th International Conference on Software Engineering},
	publisher = {{IEEE} Computer Society},
	author = {Abrahamsson, Pekka and Warsta, Juhani and Siponen, Mikko T. and Ronkainen, Jussi},
	year = {2003},
	pages = {244–254}
},

@article{brooks_no_1987,
	title = {No silver bullet: Essence and accidents in software engineering},
	volume = {20},
	number = {4},
	journal = {{IEEE} Computer},
	author = {Brooks, F.},
	year = {1987},
	pages = {10–19}
},

@article{billing_david_et_al_non-monotonic_????,
	title = {{Non-Monotonic} Reasoning for requirements engineering},
	author = {Billing, David, et al},
	annote = {Try to model their Microwave oven example using {URDADte}}
},

@misc{_object_2010,
	title = {Object Constraint Language v2.2},
	url = {http://www.omg.org/spec/OCL/2.2/},
	publisher = {Object Management Group},
	author = {, Object Management Group},
	month = feb,
	year = {2010},
	keywords = {ocl, {OMG}, specification}
},

@book{wirfs-brock_object_2002,
	address = {New York},
	title = {Object Design: Roles, Responsibilities and Collaboration},
	publisher = {{Addison-Wesley} Professional},
	author = {{Wirfs-Brock}, Rebecca J. and {McKean}, Alan},
	year = {2002}
},

@inproceedings{nikiforova_object_2010,
	address = {Athens, Greece},
	title = {Object Interaction as a Central Component of Object-oriented System Analysis},
	url = {http://www.enase.org/Abstracts/2010/ENASE_2010_Abstracts.htm},
	abstract = {An increasing impact of system modeling in software development facilitates a vision of software development methodology. Currently one of the leading positions has {OMG} and its solution for system abstraction, modeling, development, and reuse – Model Driven Architecture {(MDA).} A key component of system modeling under principles of {MDA} is Unified Modeling Language {(UML)}, which defines several kinds of diagrams and their notation. System modeling is an important part of system analysis and design, where {MDA} proposes to use means of automatic code generation. {UML} offers to use system presentation as interacting objects and offers to model two kinds of object inte-raction diagram, namely, sequence and communication. The paper focuses on investigation of analysis, modeling, and design of object interaction and discusses the ability to increase the level of formalization in modeling of object interaction.},
	author = {Nikiforova, Oksana},
	year = {2010}
},

@inproceedings{wirfs-brock_object-oriented_1989,
	title = {{Object-Oriented} Design: A {Responsibility-Driven} Approach},
	booktitle = {{OOPSLA} '89 Proceedings},
	author = {{Wirfs-Brock}, Rebecca J. and Wilkerson, Brian},
	month = oct,
	year = {1989},
	pages = {71–75}
},

@inproceedings{bashardoust-tajali_extracting_2008,
	address = {Belfast, Northern Ireland},
	title = {On Extracting Tests from a Testable Model in the Context of Domain Engineering},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/ICECCS.2008.17},
	booktitle = {13th {IEEE} International Conference on Engineering of Complex Computer Systems (iceccs 2008)},
	author = {{Bashardoust-Tajali}, Soheila and Corriveau, {Jean-Pierre}},
	month = mar,
	year = {2008},
	pages = {98--107},
	annote = {{SUMMARY:}

- stress need for testable domain models

- contracts not formally specified via pre/post-conditions, but extracted from domain model

- test extraction from generated contracts

 }
},

@article{zowghi_interplay_2003,
	title = {On the interplay between consistency, completeness, and correctness in requirements evolution},
	volume = {45},
	issn = {0950-5849},
	url = {http://www.sciencedirect.com/science/article/B6V0B-492W03S-2/2/e78a8f88512c8927d98a3cb042b4eebb},
	doi = {DOI: 10.1016/S0950-5849(03)00100-9},
	abstract = {The initial expression of requirements for a computer-based system is often informal and possibly vague. Requirements engineers need to examine this often incomplete and inconsistent brief expression of needs. Based on the available knowledge and expertise, assumptions are made and conclusions are deduced to transform this [`]rough sketch' into more complete, consistent, and hence correct requirements. This paper addresses the question of how to characterize these properties in an evolutionary framework, and what relationships link these properties to a customer's view of correctness. Moreover, we describe in rigorous terms the different kinds of validation checks that must be performed on different parts of a requirements specification in order to ensure that errors (i.e. cases of inconsistency and incompleteness) are detected and marked as such, leading to better quality requirements.},
	number = {14},
	journal = {Information and Software Technology},
	author = {Zowghi, Didar and Gervasi, Vincenzo},
	year = {2003},
	note = {Eighth International Workshop on Requirements Engineering: Foundation for Software Quality},
	keywords = {requirements, Software},
	pages = {993–1009}
},

@inproceedings{karow_transition_2006,
	address = {Mexico},
	title = {On the Transition from Computation Independent to 
Platform Independent Models},
	url = {http://aisel.aisnet.org/amcis2006/469},
	abstract = {The Model Driven Architecture {(MDA)} describes software development based on models on different levels of abstraction.
The development process is outlined as a sequence of model transformations which add specific details to the software
models with each subsequent step. The {OMG} {MDA} guide refers to the computation independent model {(CIM)} as the highest
level of abstraction. It can therefore be considered as the designated means for analysis in {MDA} software development
projects. However, this model type is disregarded by most {MDA} methodologies and tools, which start their transformation
process on the level of platform independent software models {(PIM).} This paper investigates the role and nature of the {CIM},
especially focussing on development processes for management information systems. We argue that an automatic translation
from {CIM} to {PIM} is theoretically not feasible. To provide evidence for our claim, we evaluate existing transformational
approaches that address the transition from models as real world perceptions to software designs. Lastly, we support our
arguments by extending the traditional software development view by decision theory aspects during the design phase.},
	booktitle = {Proceedings of the Twelfth Americas Conference on Information Systems},
	author = {Karow, Milan and Gehlert, Andreas and Becker, Jorg and Esswein, Werner},
	year = {2006}
},

@inproceedings{wang_ontology_2006,
	address = {Nanjing, China},
	title = {Ontology Definition Metamodel based Consistency Checking of {UML} Models},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/CSCWD.2006.253005},
	booktitle = {2006 10th International Conference on Computer Supported Cooperative Work in Design},
	author = {Wang, Shengjun and Jin, Longfei and Jin, Chengzhi},
	month = may,
	year = {2006},
	keywords = {consistency checking, model verification, {MOF}, ontology-based language, {OWL}, {UML}},
	pages = {1--5},
	annote = {{SUMMARY:}

- Tranform {UML} to {OWL} models and use logical reasoning for consistency checking.

- Nice diagram showing {UML} vs {DSL} based {MDA}

- Stress that {UML} models often inconsistent and incomplete. Hence claim that management of both, syntactic and semantic consistency is key for {UML} modeling.}
},

@article{recker_ontology-_2007,
	title = {{ONTOLOGY-} {VERSUS} {PATTERN-BASED} {EVALUATION} {OF} {PROCESS} {MODELING} {LANGUAGES:} A {COMPARISON.}},
	volume = {2007},
	issn = {15293181},
	url = {http://0-search.ebscohost.com.innopac.up.ac.za/login.aspx?direct=true&db=buh&AN=28339863&site=ehost-live&scope=site},
	abstract = {Selecting an appropriate process modeling language forms an important task for organizations engaging in business process management initiatives. A plethora of process modeling languages has been developed over the last decades, leading to a need for rigorous theory to assist in the evaluation and comparison of the capabilities of these languages. While substantial academic progress in the area of process modeling language evaluation has been made in at least two areas, using an ontology-based theory of representation or the framework of workflow patterns, it remains unclear how these frameworks relate to each other. We use a generic framework for language evaluation to establish similarities and differences between these acknowledged reference frameworks and discuss how and to what extent they corroborate each other. Our line of investigation follows the case of the popular {BPMN} modeling language, whose evaluation from the perspectives of representation theory and workflow patterns i},
	number = {20},
	journal = {Communications of {AIS}},
	author = {Recker, Jan and Rosemann, Michael and Krogstie, John},
	year = {2007},
	keywords = {{Bunge-Wand-Weber} representation model, {ENTERPRISE} resource planning, {INFORMATION} services – Management, {KNOWLEDGE} management, {MATHEMATICAL} models, model quality, process modeling, {RESEARCH}, {SEQUAL}, {WORKFLOW}, workflow patterns},
	pages = {774 -- 799}
},

@article{noguera_ontology-driven_2010,
	title = {Ontology-driven analysis of {UML-based} collaborative processes using {OWL-DL} and {CPN}},
	volume = {75},
	issn = {0167-6423},
	url = {http://www.sciencedirect.com/science/article/B6V17-4WCTWKF-1/2/22638ab2bb91e6a005c3a2406edd8c89},
	doi = {10.1016/j.scico.2009.05.002},
	abstract = {A key ingredient in system and organization modeling is modeling business processes that involve the collaborative participation of different teams within and outside the organization. Recently, the use of the Unified Modeling Language {(UML)} for collaborative business modeling has been increasing, thanks to its human-friendly visual representation of a rich set of structural and behavioral views, albeit its unclear semantics. In the meantime, the use of the Web Ontology Language {(OWL)} has also been emerging, thanks to its clearly-defined semantics, hence being amenable to automatic analysis and reasoning, although it is less human friendly than, and also perhaps not as rich as, the {UML} notation -- especially concerning processes, or activities. In this paper, we view the {UML} and the {OWL} as being complementary to each other, and exploit their relative strengths. We provide a mapping between the two, through a set of mapping rules, which allow for the capture of {UML} activity diagrams in an {OWL-ontology.} This mapping, which results in a formalization of collaborative processes, also sets a basis for subsequent construction of executable models using the Colored Petri Nets {(CPN)} formalism. For this purpose, we also provide appropriate mappings from {OWL-based} ontological elements into {CPN} elements. A case study of a mortgage granting system is described, along with the potential benefits and limitations of our proposal.},
	number = {8},
	journal = {Science of Computer Programming},
	author = {Noguera, Manuel and Hurtado, María V. and Rodríguez, María Luisa and Chung, Lawrence and Garrido, José Luis},
	month = aug,
	year = {2010},
	keywords = {Collaborative systems, {CPN}, {CSCW}, {OWL}, Process analysis, Process modelling, Reasoning, Task modelling},
	pages = {726--760}
},

@article{gilb_paper:_2010,
	title = {Paper: What’s Wrong with Requirements Specification? An Analysis of the Fundamental Failings of Conventional Thinking about Software Requirements, and Some Suggestions for Getting it Right},
	url = {http://www.scirp.org/journal/PaperInformation.aspx?paperID=2671},
	doi = {10.4236/jsea.2010.39096},
	abstract = {We know many of our {IT} projects fail and disappoint. The poor state of requirements methods and practice is frequently stated as a factor for {IT} project failure. In this paper, I discuss what I believe is the fundamental cause: we think like programmers, not engineers and managers. We do not concentrate on value delivery, but instead on functions, on use-cases and on code delivery. Further, management is not taking its responsibility to make things better. In this paper, ten practical key principles are proposed, which aim to improve the quality of requirements specification.},
	journal = {Journal of Software Engineering and Applications},
	author = {Gilb, Tom},
	month = sep,
	year = {2010},
	keywords = {requirements, Requirements Definition, Requirements Methods, Requirements Quality, Value Delivery},
	pages = {827--838}
},

@article{snelting_paul_1998,
	title = {Paul feyerabend und die softwaretechnologie (zur diskussion gestellt)},
	volume = {21},
	number = {5},
	journal = {Informatik Spektrum},
	author = {Snelting, Gregor},
	year = {1998},
	pages = {273–276}
},

@article{oquendo_pi-method:_2006,
	title = {{PI-Method:} a model-driven formal method for architecture-centric software engineering},
	volume = {31},
	issn = {0163-5948},
	doi = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/1127878.1127885},
	number = {3},
	journal = {{SIGSOFT} Softw. Eng. Notes},
	author = {Oquendo, Flavio},
	year = {2006},
	pages = {1–13}
},

@inproceedings{osis_platform_2010,
	address = {Athens, Greece},
	title = {Platform Independent Model Development by Means of Topological Class Diagrams},
	url = {http://www.enase.org/Abstracts/2010/ENASE_2010_Abstracts.htm},
	abstract = {Transformation from model to model takes significant place in Model Driven Architecture {(MDA).} Model Driven Architecture considers system from three viewpoints: computation independent, platform independent, and platform specific. Despite the fact that each viewpoint has its own representing model, the transformation between computation independent model {(CIM)} and platform independent model {(PIM)} is fuzzy. In this paper is proposed topology oriented approach for {CIM} to {PIM} transformation and {PIM} representation. Topology used within this approach is borrowed from Topological Functioning Model {(TFM).} {TFM} uses mathematical foundations that holistically represent complete functionality of the problem and application domains and therefore can be used as {CIM} and as a source for transforming {CIM} to {PIM.} Application of {TFM} within software development process enables formal analysis of busi-ness system and formal designing of system structure. Software development begins with {TFM} creation. After construction of business system’s {TFM} by applying transformation on {TFM} a system structure representing {PIM} is defined. As a basis for system structure definition is used topological class diagram. Topological class diagram is combination of Unified Modeling Lan-guage {(UML)} class diagram and topology borrowed from {TFM.}},
	author = {Osis, Janis and Donins, Uldis},
	year = {2010}
},

@inproceedings{kim_practice_2009,
	address = {Jeju, Korea {(South)}},
	title = {Practice Patterns to Improve the Quality of Design Model in Embedded Software Development},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/QSIC.2009.32},
	booktitle = {2009 Ninth International Conference on Quality Software},
	author = {Kim, {Doo-Hwan} and Kim, {Jong-Phil} and Hong, {Jang-Eui}},
	year = {2009},
	pages = {179--184}
},

@inproceedings{skene_precise_????,
	address = {Edinburgh, {UK}},
	title = {Precise service level agreements},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/ICSE.2004.1317440},
	booktitle = {Proceedings. 26th International Conference on Software Engineering},
	author = {Skene, J. and Davide Lamanna, D. and Emmerich, W.},
	pages = {179--188}
},

@article{wirth_program_1971,
	title = {Program Development by Stepwise Refinement},
	volume = {14},
	number = {4},
	journal = {Communications of the {ACM}},
	author = {Wirth, Niklaus},
	month = apr,
	year = {1971},
	pages = {221–227}
},

@article{meyer_programs_2009,
	title = {Programs That Test Themselves},
	volume = {42},
	issn = {0018-9162},
	doi = {10.1109/MC.2009.296},
	abstract = {The {AutoTest} framework automates the software testing process by relying on programs that contain the instruments of their own verification, in the form of contract-oriented specifications of classes and their individual routines.},
	number = {9},
	journal = {Computer},
	author = {Meyer, Bertrand and Fiva, Arno and Ciupa, Ilinca and Leitner, Andreas and Wei, Yi and Stapf, Emmanuel},
	month = sep,
	year = {2009},
	pages = {46–55}
},

@article{firesmith_quality_2005,
	title = {Quality requirements check list},
	volume = {4},
	number = {9},
	journal = {Journal of Object Technology},
	author = {Firesmith, Donald},
	year = {2005},
	pages = {31--38}
},

@inproceedings{lazar_realizing_2010,
	address = {Athens, Greece},
	title = {Realizing Use Cases for Full Code Generation in the Context of {fUML}},
	url = {http://www.enase.org/Abstracts/2010/ENASE_2010_Abstracts.htm},
	abstract = {We describe a pragmatic method for developing use case realizations as Foundational {UML} {(fUML)} active objects. The method allows developers to transform the textual representations of use cases into executable {UML} activities which represent the classifier behaviours of the corresponding use case realizations. The generated graphical representations help developers to find requirements defects. Moreover, developers implement the required system behaviour by adding code using again a concrete textual syntax for {fUML.} The result is an executable {fUML} model which helps developers to simulate and validate the implemented behaviour. Finally, completed code may be generated towards the existing platform specific frameworks which use structured programming constructs.},
	author = {Lazar, Ioan and Motogna, Simona and Pârv, Bazil and Lazar, {Codrut-Lucian}},
	year = {2010},
	keywords = {{fUML}, textual use case description, use cases},
	annote = {{SUMMARY:}

- important for natural text encoding of use cases

* can compare to concrete text syntax for {URDAD}

* show some concrete examples of intuitive textual encodings

- perform mapping of textual use case description onto activity diagram within {fUML}

- {fUML} requires active, statefull classes vs {URDAD} stateless services

 }
},

@article{horrocks_reducing_2004,
	title = {Reducing {OWL} entailment to description logic satisfiability},
	volume = {1},
	issn = {1570-8268},
	url = {http://www.sciencedirect.com/science/article/B758F-4D1V7XT-2/2/5dbe34a780e5fe689b4827a674e802fb},
	doi = {10.1016/j.websem.2004.06.003},
	abstract = {We show how to reduce ontology entailment for the {OWL} {DL} and {OWL} Lite ontology languages to knowledge base satisfiability in (respectively) the and description logics. This is done by first establishing a correspondence between {OWL} ontologies and description logic knowledge bases and then by showing how knowledge base entailment can be reduced to knowledge base satisfiability.},
	number = {4},
	journal = {Web Semantics: Science, Services and Agents on the World Wide Web},
	author = {Horrocks, Ian and {Patel-Schneider}, Peter},
	month = oct,
	year = {2004},
	keywords = {Architecture, Description Logic, Knowledge, {OWL}, {OWL} Lite, {OWL-DL}},
	pages = {345--357}
},

@inproceedings{nebut_requirements_2003,
	address = {Washington, {DC}, {USA}},
	title = {Requirements by Contracts allow Automated System Testing},
	isbn = {0-7695-2007-3},
	booktitle = {{ISSRE} '03: Proceedings of the 14th International Symposium on Software Reliability Engineering},
	publisher = {{IEEE} Computer Society},
	author = {Nebut, Clémentine and Fleurey, Franck and Traon, Yves Le and Jézéquel, {Jean-Marc}},
	year = {2003},
	pages = {85}
},

@inproceedings{parnas_requirements_2000,
	address = {Schaumburg, {IL}, {USA}},
	title = {Requirements documentation: why a formal basis is essential},
	shorttitle = {Requirements documentation},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/ICRE.2000.855594},
	booktitle = {Proceedings Fourth International Conference on Requirements Engineering. {ICRE} 2000. {(Cat.} {No.98TB100219)}},
	author = {Parnas, {D.L.}},
	year = {2000},
	pages = {81--82},
	annote = {{SUMMARY} {(Fritz):}

A simple 1 1/2 pager of why formalization of requirements is important.}
},

@book{graham_requirements_2008,
	title = {Requirements Modelling and Specification for Service Oriented Architecture},
	isbn = {0470775637},
	publisher = {John Wiley \& Sons},
	author = {Graham, Ian},
	month = oct,
	year = {2008},
	annote = {Do Model validation by requiring that every goal (pe/post-condition) addressed by a message exchange (service request) and that all messages are associated with achiving a goal}
},

@inproceedings{jinhong_zhao_research_2008,
	address = {Beijing, China},
	title = {Research and design of an executable modeling language based on {MOF}},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/CAIDCD.2008.4730597},
	booktitle = {2008 9th International Conference on {Computer-Aided} Industrial Design and Conceptual Design},
	author = {Jinhong Zhao and Shufen Liu and Xianyan Wang and Liang Chen and Chuyi Wei},
	month = nov,
	year = {2008},
	keywords = {executable modeling language, metamodel, ocl},
	pages = {399--404},
	annote = {{SUMMARY} {(Fritz):}

define a generic, traditional {OO} modeling language with a textual syntax which ultimately provides an encoding which is very similar to a normal {OO} programming language. Not sure that this is very useful myself.}
},

@inproceedings{mukkamala_reusability:_2004,
	title = {Reusability: a technique for the design of {HUMS} architectures},
	volume = {2},
	abstract = {In most engineering disciplines, systems are designed by reusing existing components that have been used in other systems. It is certainly worthwhile to make use of existing architectures available as a whole or in part in the large space of designs instead of rebuilding the whole architecture. In collaboration with {NASA} Langley Research Center, we have been developing methods to reuse existing architectures for health and usage monitoring {(HUMS)} of aerospace structures. We discuss some of the key reuse techniques, which can be used to reuse existing available architectures in the design space. The primary contribution of This work is an iterative process model for employing reuse technique in a complex engineering system.},
	booktitle = {Digital Avionics Systems Conference, 2004. {DASC} 04. The 23rd},
	author = {Mukkamala, R. and Ramesh, R. and Agarwal, N. and Bandagadde, M. and Myadam, S.},
	month = oct,
	year = {2004},
	keywords = {aerospace computing, aerospace structures, complex engineering system, health and usage monitoring system architecture design, iterative process model, large-scale systems, program diagnostics, reusability techniques, software architecture, software prototyping, software reusability {NASA} Langley Research Center},
	pages = {7.E.2–71–10 Vol.2}
},

@article{gall_semantic_2008,
	title = {Semantic software metrics computed from natural language design specifications},
	volume = {2},
	issn = {17518806},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1049/iet-sen:20070109},
	number = {1},
	journal = {{IET} Software},
	author = {Gall, {C.S.} and Lukins, S. and Etzkorn, L. and Gholston, S. and Farrington, P. and Utley, D. and Fortune, J. and Virani, S.},
	year = {2008},
	pages = {17}
},

@inproceedings{liu_service-based_2009,
	address = {Wuhan, China},
	title = {Service-based domain requirements completeness analysis},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/PACIIA.2009.5406481},
	booktitle = {2009 {Asia-Pacific} Conference on Computational Intelligence and Industrial Applications {(PACIIA)}},
	author = {Liu, Wei and Chengwan He and Kui Zhang},
	month = nov,
	year = {2009},
	pages = {110--115}
},

@book{erl_service-oriented_2005,
	title = {{Service-Oriented} Architecture {(SOA):} Concepts, Technology, and Design},
	publisher = {Prentice Hall {PTRs}},
	author = {Erl, Thomas},
	month = aug,
	year = {2005}
},

@techreport{artus_soa_2006,
	title = {{SOA} realization: Service design principles},
	institution = {{IBM}},
	author = {Artus, David {J.N.}},
	month = feb,
	year = {2006}
},

@book{bass_software_2003,
	title = {Software Architecture in Practice, Second Edition},
	publisher = {{Addison-Wesley} Professional},
	author = {Bass, Len and Clements, Paul and Kazman, Rick},
	month = apr,
	year = {2003}
},

@article{coskun_software_2005,
	title = {Software complexity and its impacts in embedded intelligent real-time systems},
	volume = {78},
	issn = {0164-1212},
	url = {http://www.sciencedirect.com/science/article/B6V0N-4FNDRX2-1/2/5313316d4f2b834bf367b8c42dbc352c},
	doi = {10.1016/j.jss.2005.01.009},
	abstract = {{{\textless}p{\textgreater}{\textless}br/{\textgreater}Applications} of intelligent software systems are proliferating. As these systems proliferate, understanding and measuring their complexity becomes vital, especially in safety-critical environments. This paper proposes a model assessing the impacts of complexity for a particular type of intelligent software system, embedded intelligent real-time systems {(EIRTS)}, and answers two research questions. (1) How should the complexity of embedded intelligent real-time systems be measured?, and (2) What are the impacts of differing levels of {EIRTS} complexity on software, operator and system performance when {EIRTS} are deployed in a safety-critical large-scale system? The model is tested and operationalized using an operational {EIRTS} in a safety-critical environment. The results suggest that users significantly prefer simple decision support and user interfaces, even when sophisticated user interfaces and complex decision support capabilities have been embedded in the system. These results have interesting implications for operators using complex {EIRTS} in safety-critical settings.{\textless}/p{\textgreater}},
	number = {2},
	journal = {Journal of Systems and Software},
	author = {Coskun, Erman and Grabowski, Martha},
	month = nov,
	year = {2005},
	keywords = {Embedded systems, Human performance, Intelligent systems, Operator performance, Real-time systems, Safety-critical systems, Socio-technical studies, Software complexity, Software evaluation, Software performance, Technology impact},
	pages = {128--145}
},

@article{hinchey_software_2008,
	title = {Software engineering and formal methods},
	volume = {51},
	issn = {0001-0782},
	doi = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/1378727.1378742},
	number = {9},
	journal = {Commun. {ACM}},
	author = {Hinchey, Mike and Jackson, Michael and Cousot, Patrick and Cook, Byron and Bowen, Jonathan P. and Margaria, Tiziana},
	year = {2008},
	pages = {54–59}
},

@inproceedings{hall_software_1992,
	title = {Software in Air Traffic Control Systems},
	abstract = {The Civil Aviation Authority is introducing a major new development into the London Air Traffic Control Centre. The central control function {(CCF)} is based on changes to the sectorisation of airspace to improve traffic throughput by introducing the so-called `tunnels-in-the-sky'. In support of {CCF} a number of computerised systems are being upgraded and new ones introduced. One of the new systems is the {CCF} display information system {(CDIS).} {CDIS} is a distributed real-time system running on a network of dualled computers communicating over a dual token ring local area network {(LAN).} The authors describe the use of formal methods in the development of {CDIS}},
	booktitle = {The Future, {IEE} Colloquium on},
	author = {Hall, A. and Isaac, D.},
	month = jun,
	year = {1992},
	pages = {7/1–7/4}
},

@inproceedings{biffl_software_2000,
	address = {Maastricht, Netherlands},
	title = {Software product improvement with inspection. A large-scale experiment on the influence of inspection processes on defect detection in software requirements documents},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/EURMIC.2000.874427},
	booktitle = {Proceedings of the 26th Euromicro Conference. {EUROMICRO} 2000. Informatics: Inventing the Future},
	author = {Biffl, S. and Halling, M.},
	year = {2000},
	pages = {262--269}
},

@inproceedings{petersen_software_1989,
	title = {Software quality drivers and indicators},
	volume = {2},
	doi = {10.1109/HICSS.1989.47994},
	abstract = {The predictive part of a constructive quality model called {COQUAMO} is being developed using the concept of quality drivers to provide information on the development project. The monitoring part of {COQUAMO} aims at detecting detrimental deviations from plans through quality indicators applied to the ongoing project. The authors describe theoretical investigations of quality drivers and indicators as a basis for the empirical development of the model. They group quality drivers into five major areas: product, process, personnel, project, and organizational attributes but consider product and process attributes only, since characteristics related to the personnel and to the project group seem infeasible to monitor dynamically while organizational characteristics will either remain stable throughout the lifetime of a project, or change so much that consequences cannot be predicted},
	booktitle = {System Sciences, 1989. {Vol.II:} Software Track, Proceedings of the {Twenty-Second} Annual Hawaii International Conference on},
	author = {Petersen, P. G and Andersen, O. and Heilesen, J. H and Klim, S. and Schmidt, J.},
	month = jan,
	year = {1989},
	keywords = {attributes;personnel;process;product;project;quality, control;software, {COQUAMO;constructive}, deviations;development, drivers;quality, indicators;quality, model;detrimental, project;ongoing, project;organizational, quality, reliability;},
	pages = {210 --218 vol.2}
},

@book{dunn_robet_h_software_????,
	title = {Software Quality: Concepts and Plans},
	author = {Dunn, Robet H}
},

@article{ramachandran_software_2005,
	title = {Software reuse guidelines},
	volume = {30},
	issn = {0163-5948},
	doi = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/1061874.1061889},
	number = {3},
	journal = {{SIGSOFT} Softw. Eng. Notes},
	author = {Ramachandran, Muthu},
	month = may,
	year = {2005},
	pages = {1–8}
},

@article{lenz_software_1987,
	title = {Software Reuse Through {Building-Blocks}},
	volume = {4},
	number = {4},
	journal = {{IEEE} Software},
	author = {Lenz, Manfred and Schmid, Hans A. and Wolf, Peter F.},
	year = {1987},
	pages = {32–42}
},

@article{voas_software_1995,
	title = {Software Testability: The New Verification},
	volume = {12},
	number = {3},
	journal = {{IEEE} Software},
	author = {Voas, Jeffrey M. and Miller, Keith W.},
	month = may,
	year = {1995},
	pages = {17–28}
},

@inproceedings{mu_specification_2010,
	address = {New York, {NY}, {USA}},
	series = {{ECSA} '10},
	title = {Specification of modelling languages in a flexible meta-model architecture},
	isbn = {978-1-4503-0179-4},
	location = {Copenhagen, Denmark},
	url = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/1842752.1842807},
	doi = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/1842752.1842807},
	abstract = {Originally, meta-models were used to specify the structure (abstract syntax) of modelling languages. This is reflected both in meta-languages like {MOF} and Ecore, and the four-layer meta-model architecture. Presently, meta-modelling is used for specification of complete languages. In this situation, it turns out that the traditional meta-languages are not always expressive enough to capture all language aspects. This usually implies the use of more than one metalanguage in the meta-model architecture to cover the different language aspects. There are many approaches to address this challenge. In this paper, we analyze these approaches, and based on this analysis, we re-think the meta-model architecture focusing on complete language specifications. In our meta-model architecture, each aspect of a language conforms to an aspect-specific meta-language at the level above, and models can reside at different levels depending on their context and use. This meta-model architecture is easier to understand, more flexible and more extensible; therefore it may be useful in the design of meta-model-based language specification platforms, as well as for promoting the understanding of the principles of meta-modelling.},
	booktitle = {Proceedings of the Fourth European Conference on Software Architecture: Companion Volume},
	publisher = {{ACM}},
	author = {Mu, Liping and Gj{\textbackslash}osæter, Terje and Prinz, Andreas and Tveit, Merete Skjelten},
	year = {2010},
	keywords = {{MDA}, meta-model architecture},
	pages = {302–308},
	annote = {{SUMMARY} {(Fritz):}

This paper compares different standard metamodeling languages and approaches including {MDA's} {MOF}, {EMOF} and its reference implementation Ecore, the Kernel {MetaMetaModel} {KM3} from {ATLAS} {INRIA} and {XMF-Modaic} from Ceteva. {XMF} is inspired by {MOF} and {OCL}, but is able to describe itself. The Core language, {XCore} is extended with {XOCL} and {XBNF} for constraint and expression specification and {XOCL} is, in turn extended by {XMap} and {XSync} for specifying mappings and synchronization rules. {KM3} is a textual metalanguage used to define the structure of domain specific languages {(DSLs).} A range of supporting languages like {ATL} for transformation, {TCS} for the specification of a concrete textual syntax and languages for view specifications are part of the {KM3-based} technology suite. The novelty of the paper itself is rather minimal, aiming to clear up the higher level concepts like the M-levels and the higher level architecture within which metamodeling is done.}
},

@inproceedings{skene_specifications_2006,
	address = {New York, {NY}, {USA}},
	series = {{GaMMa} '06},
	title = {Specifications, not meta-models},
	isbn = {1-59593-410-3},
	location = {Shanghai, China},
	url = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/1138304.1138315},
	doi = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/1138304.1138315},
	booktitle = {Proceedings of the 2006 international workshop on Global integrated model management},
	publisher = {{ACM}},
	author = {Skene, James and Emmerich, Wolfgang},
	year = {2006},
	keywords = {{MDA}, meta-modelling, {MOF}, ocl, {UML}},
	pages = {47–54}
},

@unpublished{heidenreich_sprechen_2009,
	title = {Sprechen Ihre Modelle Klartext? Tutorial: Textuelle {DSLs} erstellen mit {EMFText}},
	shorttitle = {Sprechen Ihre Modelle Klartext?},
	url = {http://it-republik.de/jaxenter/eclipse-magazin-ausgaben/Eclipse-Galileo-000312.html},
	author = {Heidenreich, Florian and Johannes, Jendrik and Karol, Sven and Seifert, Mirko and Wende, Christian},
	month = may,
	year = {2009}
},

@inproceedings{fitzpatrick_strategic_2001,
	title = {Strategic drivers of software quality: beyond external and internal software quality},
	doi = {10.1109/APAQS.2001.990003},
	abstract = {Software quality is often considered in terms of the contractual requirements between the supplier and acquirer as described in {ISO/IEC} 12207 and focuses on software life cycle processes. However, beyond these processes acquirer organisations need to address other issues like complying with new legislation, securing return on investment, and achieving competitive support from their new software investments. Supplier organisations also have issues that they must manage. This paper addresses all of these issues and presents eleven issues, which it calls strategic drivers. Then, using the {SOFTWARE} {QUALITY} {STAR}, builds a new conceptual model where each strategic quality driver is defined and explained},
	booktitle = {Quality Software, 2001. {Proceedings.Second} {Asia-Pacific} Conference on},
	author = {Fitzpatrick, R.},
	year = {2001},
	keywords = {12207;competitive, cycle, driver;software, drivers;strategic, investment;software, investments;software, {ISO/IEC}, life, management;software, model;contractual, on, processes;software, quality, quality;, quality;software, requirements;legislation;return, star;strategic, support;conceptual},
	pages = {65 --72}
},

@techreport{_strategies_2011,
	title = {Strategies for Project Recovery},
	url = {http://www.pmsolutions.com/insights/research/},
	abstract = {Whether a troubled project ultimately succeeds or fails depends on the effectiveness of the actions taken to recover the project. Before these actions can be taken, however, organizations need to be able to recognize problems and prepare to take appropriate corrective measures. {PM} Solutions has conducted this benchmark of current practices in recovering troubled projects to help identify the factors that may lead to the development of strategies for successful project recovery:

- Can troubled projects be recovered, or are they doomed to fail?
- What are the root causes of troubled projects?
- What is their cost to organizations?
- What do firms do, exactly, to successfully recover troubled projects?},
	institution = {{PM} Solutions Research},
	year = {2011},
	keywords = {Project Failure Reasons, Project Management, Software Engineering},
	pages = {8}
},

@book{demarco_structured_1979,
	title = {Structured Analysis and System Specification},
	publisher = {Yourdon Press},
	author = {{DeMarco}, Tom},
	year = {1979}
},

@book{demarco_tom_structured_1978,
	address = {New York},
	title = {Structured Analysis and System Specification},
	publisher = {Yourdon Press},
	author = {{DeMarco}, Tom},
	year = {1978}
},

@book{martin_structured_1985,
	title = {Structured techniques for computing},
	publisher = {{Prentice-Hall}},
	author = {Martin, James and {McClure}, Carma},
	year = {1985}
},

@inproceedings{hordijk_surveying_2005,
	series = {Foundations of Software Engineering},
	title = {Surveying the factors that influence maintainability: research design},
	booktitle = {Proceedings of the 10th European software engineering conference held jointly with 13th {ACM} {SIGSOFT} international symposium on Foundations of software engineering},
	publisher = {{ACM}},
	author = {Hordijk, Wiebe and Wieringa, Roel},
	year = {2005},
	pages = {385–388}
},

@inproceedings{parnas_systematic_2001,
	address = {Toronto, Ont., Canada},
	title = {Systematic documentation of requirements},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/ISRE.2001.948565},
	booktitle = {Proceedings Fifth {IEEE} International Symposium on Requirements Engineering},
	author = {Parnas, D.},
	year = {2001},
	pages = {248}
},

@inproceedings{solms_technology_2007,
	address = {Amsterdam, The Netherlands, The Netherlands},
	title = {Technology Neutral Business Process Design using {URDAD}},
	isbn = {978-1-58603-794-9},
	url = {http://portal.acm.org/citation.cfm?id=1566971.1566976},
	abstract = {This paper presents the Use Case, Responsibility Driven Analysis and Design methodology, {URDAD.} {URDAD} aims to provide a simple algorithmic design methodology which generates a technology neutral business process design in the context of model driven development. The design methodology has been formulated in such a way that it includes core drivers for widely accepted requirements for good design.},
	booktitle = {Proceeding of the 2007 conference on New Trends in Software Methodologies, Tools and Techniques: Proceedings of the sixth {SoMeT\_07}},
	publisher = {{IOS} Press},
	author = {Solms, Fritz},
	year = {2007},
	note = {{ACM} {ID:} 1566976},
	keywords = {analysis, Business process design, design, Design methodology, design principles, mda, Model driven development, technology neutral, {URDAD}},
	pages = {52–70}
},

@inproceedings{zheng_test_2008,
	title = {Test by Contract for {UML-Based} Software Component Testing},
	doi = {10.1109/CSA.2008.66},
	abstract = {This paper presents a new contract-based software component testing {(SCT)} technique, test by contract {(TbC)}, which extends the design by contract concept to the {SCT} domain, and leverages it with {UML-based} testing at the modeling level to design model-level test contracts for {UML-based} {SCT.} We introduce a new concept of contract for testability as the principal {TbC} goal, and develop a set of important contract-oriented concepts (e.g. test contract, effectual contract scope, internal/external test contract), and useful test criteria for effective model-based testability improvement. A practical step-wise {TbC} working process is developed to show how to put the {TbC} technique into practice for contract-based testing activities to undertake {UML-based} {SCT} with a case study.},
	booktitle = {Computer Science and its Applications, 2008. {CSA} '08. International Symposium on},
	author = {Zheng, Weiqun and Bundell, G.},
	month = oct,
	year = {2008},
	keywords = {program {testingUML}, software component testing, test by contract, Unified Modeling Language},
	pages = {377–382}
},

@book{beck_agile_2001,
	title = {The agile manifesto},
	url = {http://agilemanifesto.org/},
	author = {Beck, Kent and Fowler, Martin and Martin, Robert C. and others},
	year = {2001}
},

@misc{slack_business_2008,
	title = {The business analyst in model-driven architecture},
	url = {http://download.boulder.ibm.com/ibmdl/pub/software/dw/architecture/ar-bamda/ar-bamda-pdf.pdf},
	abstract = {From a software development viewpoint, model-driven architecture {(MDA)} encourages efficient use of system models. It also encourages reusing best practices as families of systems are produced. One of the main aims of {MDA} is to separate design from architecture, which places the business analyst in a unique and potentially powerful position within the organization. Learn how you as a business analyst can take an active role in this type of architecture. For business analysts, process modeling is a critical activity. Models allow business analysts to define and outline business practices, processes, information flows, data stores, and systems by lumping processes of the same type into a model to see how the processes work together. Architects as well as engineers rely on models to understand intricate, real-world systems. As technology advances in multiple directions and dimensions, everyone involved in the creation of business computer systems is facing the same dilemma: how to work with evolving standards in the most efficient, cost-effective manner. One method is to use {MDA}, an open-standards approach to architecture that separates design from architecture through the use of the model-driven engineering of software systems. This article explores {MDA} and what it means to business analysts.},
	publisher = {{IBM}},
	author = {Slack, Sally},
	month = sep,
	year = {2008}
},

@article{reynoso_effect_2006,
	title = {The Effect of Coupling on Understanding and Modifying {OCL} Expressions: An Experimental Analysis},
	volume = {4},
	issn = {1548-0992},
	doi = {10.1109/TLA.2006.1642461},
	abstract = {Not all the model constraints can be defined using only {UML} graphical features due to the limited expressiveness of diagram-based {UML} notation. To solve this problem, the {OCL} language was defined as a textual add-on to the {UML} diagrams, allowing the specification of a wide range of constraints of objects. Aware of the lack of metrics to capture the quality aspects of {UML/OCL} models and the importance of models in recent initiatives of {model-Driven} software engineering (such as {Model-Driven} Development and {Model-Driven} Architecture), we define a set of metrics for measuring the structural properties of {OCL} constraints in {UML/OCL} models. Many of these metrics are defined in terms of navigations, a core concept of {OCL} that defines coupling between objects. This paper carefully describes a family of experiments we have conducted to ascertain whether any relationship exists between object coupling (defined through metrics related to navigations and collection operations) and two maintainability subcharacteristics: understandability and modifiability of {OCL} expressions. Empirical evidence that such a relationship exists is shown in the obtained results, however they must be considered as preliminaries results. Further validation is needed to strengthen the conclusions and external validity.},
	number = {2},
	journal = {Latin America Transactions, {IEEE} {(Revista} {IEEE} America Latina)},
	author = {Reynoso, L. and Genero, M. and Piattini, M. and Manso, E.},
	month = apr,
	year = {2006},
	keywords = {coupling, data models, modeling, {nullSoftware} metrics, software quality, student experiment},
	pages = {130–135}
},

@article{berenbach_evaluation_2004,
	title = {The Evaluation of Large, Complex {UML} Analysis and Design Models},
	volume = {??},
	number = {??},
	journal = {Proceedings of the 26'th International Conference on Software Engineering},
	author = {Berenbach, Brian},
	year = {2004},
	pages = {??}
},

@inproceedings{coram_impact_2005,
	address = {Washington, {DC}, {USA}},
	title = {The Impact of Agile Methods on Software Project Management},
	isbn = {0-7695-2308-0},
	doi = {http://0-dx.doi.org.innopac.up.ac.za/10.1109/ECBS.2005.68},
	booktitle = {{ECBS} '05: Proceedings of the 12th {IEEE} International Conference and Workshops on Engineering of {Computer-Based} Systems},
	publisher = {{IEEE} Computer Society},
	author = {Coram, Michael and Bohner, Shawn},
	year = {2005},
	pages = {363–370}
},

@article{perepletchikov_impact_2010,
	title = {The Impact of Service Cohesion on the Analyzability of {Service-Oriented} Software},
	volume = {3},
	issn = {1939-1374},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/TSC.2010.23},
	number = {2},
	journal = {{IEEE} Transactions on Services Computing},
	author = {Perepletchikov, Mikhail and Ryan, Caspar and Tari, Zahir},
	year = {2010},
	pages = {89--103}
},

@inproceedings{haines_impact_2007,
	address = {Waikoloa, {HI}, {USA}},
	title = {The Impact of {Service-Oriented} Application Development on Software Development Methodology},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/HICSS.2007.537},
	booktitle = {2007 40th Annual Hawaii International Conference on System Sciences {(HICSS'07)}},
	author = {Haines, Marc},
	year = {2007},
	pages = {172b--172b}
},

@article{verelst_influence_2005,
	title = {The Influence of the Level of Abstraction on the Evolvability of Conceptual Models of Information Systems},
	volume = {10},
	issn = {1382-3256},
	doi = {http://0-dx.doi.org.innopac.up.ac.za/10.1007/s10664-005-3863-0},
	number = {4},
	journal = {Empirical Softw. Engg.},
	author = {Verelst, Jan},
	year = {2005},
	pages = {467–494}
},

@article{counsell_interpretation_2006,
	title = {The interpretation and utility of three cohesion metrics for object-oriented design},
	volume = {15},
	issn = {{1049-331X}},
	doi = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/1131421.1131422},
	number = {2},
	journal = {{ACM} Trans. Softw. Eng. Methodol.},
	author = {Counsell, Steve and Swift, Stephen and Crampton, Jason},
	year = {2006},
	pages = {123–149}
},

@article{braha_measurement_1998,
	title = {The measurement of a design structural and functional complexity},
	volume = {28},
	issn = {1083-4427},
	doi = {10.1109/3468.686715},
	number = {4},
	journal = {Systems, Man and Cybernetics, Part A: Systems and Humans, {IEEE} Transactions on},
	author = {Braha, D. and Maimon, O.},
	month = jul,
	year = {1998},
	keywords = {assistants;probability;software, complexity;design, complexity;functional, complexity;structural, definition;probability;software, design, engineering;, engineering;intelligent},
	pages = {527 --535},
	annote = {{SUMMARY} {(Fritz):}

This is quite a rigerous paper which first estimates alphabeth size of language by the number of operators and operands in the model and then calculate the structural information content (the size of the design). They then define a probability measure in order to be able to calculate the entropy of the design which is then directly related to the complexity of the design.}
},

@article{selic_pragmatics_2003,
	title = {The Pragmatics of
{Model-Driven} Development},
	volume = {20,5},
	url = {http://0-ieeexplore.ieee.org.oasis.unisa.ac.za/stamp/stamp.jsp?tp=&arnumber=1231146&isnumber=27576},
	doi = {10.1109/MS.2003.1231146},
	abstract = {The potential benefits of using models are significantly greater in software than in other engineering disciplines because of the potential for a seamless link between models and the systems they represent. Unfortunately, models have rarely produced anticipated benefits. The key lies in resolving pragmatic issues related to the artifacts and culture of the previous generation of software technologies.},
	journal = {Software, {IEEE}},
	author = {Selic, Bran},
	month = oct,
	year = {2003},
	pages = {19--22}
},

@article{selic_pragmatics_2003-1,
	title = {The Pragmatics of Model Driven Development},
	volume = {20},
	number = {5},
	journal = {{IEEE} Software},
	author = {Selic, Bran},
	month = sep,
	year = {2003},
	pages = {19–25}
},

@book{kruchten_rational_2000,
	title = {The Rational Unified Process: An Introduction},
	publisher = {Addison Wesley},
	author = {Kruchten, Philip},
	year = {2000}
},

@inproceedings{dong-wei_semantic_2006,
	address = {Beijing, China},
	title = {The Semantic Representation of {WSPL} in {OWL-DL}},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/CHINACOM.2006.344896},
	booktitle = {2006 First International Conference on Communications and Networking in China},
	author = {Dong-wei, Bai and Yong, Peng and Zhao, Yao and Jun-liang, Chen},
	month = oct,
	year = {2006},
	keywords = {{OWL-DL}, semantics;software, services contract},
	pages = {1--6}
},

@book{veldhuis_tool_2009,
	title = {Tool support for a metamodeling approach for reasoning about requirements},
	url = {http://essay.utwente.nl/58693/},
	abstract = {In the Software Engineering practice, software requirements are one of the earliest artifacts describing a system. Without requirements we cannot verify the quality of a delivered software product. Requirements are mostly textual descriptions. Traceability is considered essential to manage consistency between software development artifacts. Many research focused on the relation between requirements and other artifacts such as design, code and test cases. However, less attention has been paid to the relation between requirements. Goknil et al proposed a requirementsmetamodel. This provides structure to requirements models. This metamodel is distilled from key entities from several requirements engineering approaches described in literature. The main focus of the requirements metamodel is on requirements relations and their types. Furthermore, they provided formal semantics of the requirements relations in first-order logic. This enables reasoning on requirements and consistency checking. To provide a proof of concept for the metamodeling approach proposed by G?oknil et al. we need an environment to model requirements conforming to the requirements metamodel. And we need a tool that supports first-order logic reasoning over requirements relations. To the best of our knowledge, no requirements management tools exists which are capable of reasoning about requirements relations using formal semantics. Therefore, we developed a tool named {TRIC} {(Tool} for Requirements Inference and Consistency checking). {TRIC} is developed as an Eclipse {RCP} application. Requirements models are expressed in the Web Ontology Language {(OWL)}, because first-order logic reasoners for {OWL} exist. Requirements models are stored and retrieved in {RDFS/XML} notation, enabling interoperability. To establish inference of implicit relations and to enable consistency checking we created a mapping between the formalization of requirements relations to {OWL} syntax and reasoner rules. We evaluated {TRIC} using an example case of a Course Management System {(CMS).} We used the requirements for the tool to verify the design and implementation. The modeling of requirements in models conforming to the requirements metamodel is supported. The inference of implicit relations and consistency checking of the model is supported. The analysis of implicit relations is supported by a visualization engine. We investigated the scalability of the tool by looking at the time and resource behavior. The time needed for consistency checking increases exponentionally with the number of model elements. The memory consumption seems linear with respect to the model size. {TRIC} does not support multiple metamodels. More research is needed on customizing the requirements metamodel and the formalization of additional relations. The inconsistencies found by the tool are not related to the contradicting requirements relations. {TRIC} supports the modeling and analysis of a requirements model. The next step is to support change impact analysis.},
	author = {Veldhuis, {J.W.}},
	month = apr,
	year = {2009}
},

@article{wirfs-brock_toward_2007,
	title = {Toward Design Simplicity},
	volume = {24},
	number = {2},
	journal = {{IEEE} Software},
	author = {{Wirfs-Brock}, Rebecca J.},
	month = mar,
	year = {2007},
	pages = {9–11}
},

@article{ramesh_toward_2001,
	title = {Toward reference models for requirements traceability},
	volume = {27},
	issn = {00985589},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/32.895989},
	number = {1},
	journal = {{IEEE} Transactions on Software Engineering},
	author = {Ramesh, B. and Jarke, M.},
	month = jan,
	year = {2001},
	pages = {58--93},
	annote = {{SUMMARY}

----------

Identify 4 core traceability link types:

1. Satisfaction links (ensuring that requirements are satisfied by system - checks/ensures).

2. Evolutional links (document inputs resulting in changes to objects and resulting changes)

3. Rationale links (why is this required, use instead requires by)

4. Dependency links (from model reflection: dependency between services and so on)

 

Note - we would add requirements source links}
},

@inproceedings{samir_towards_2010,
	address = {Athens, Greece},
	title = {Towards a Structure for the Computation Independent Model},
	url = {http://www.enase.org/Abstracts/2010/ENASE_2010_Abstracts.htm},
	abstract = {Model Driven Architecture {(MDA)} is composed of a hierarchy of three levels of models : computation independent model {(CIM)}, platform independent model {(PIM)} and platform specific model {(PSM).} Currently, there exists no formal {CIM} definition describing its structure of elements to which transformation rules can be applied. It is therefore the goal of this paper to attempt such a structure. In our view, the {CIM} can be divided into a hierarchy of three interconnected models: the business motivation model {(BMM)}, the business process model {(BPM)}, and the requirements model {(RM).} This paper presents how these three models can account for the {CIM} and how they are related to each other.},
	author = {Samir, Kherraf and Moïse, Alexandre and Lefebvre, Éric and Suryn, Witold},
	year = {2010},
	annote = {{SUMMARY:}

- discuss structure of {CIM:}

* {CIM} = {BMM} + {RM} + {BPM}  {(Computation} Independent Model = Business Motivational Model + Requirements Model + Business Process Model)

* {BMM} = business strategies \& tactics, policies \& rules, goals \& objectives

* {RM} = use case  actor + business rule

- Claim {CIM} transforms to {PIM}, but with what additional inputs?

- Separation of {CIM} and {PIM} at best vague. {PIM} seen as refinement of {CIM} adding interfaces and perhaps class diagrams. {PIM} usually seen as platform independent software model, but even {CIM} is said by {OMG} to "show system in environment in which it will operate"???

- {OMG} Requirements for {CIM} - make only partial sense

 }
},

@inproceedings{helming_towards_2010,
	address = {Sydney, Australia},
	title = {Towards a unified Requirements Modeling Language},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/REV.2010.5625659},
	booktitle = {2010 Fifth International Workshop on Requirements Engineering Visualization},
	author = {Helming, Jonas and Koegel, Maximilian and Schneider, Florian and Haeger, Michael and Kaminski, Christine and Bruegge, Bernd and Berenbach, Brian},
	year = {2010},
	pages = {53--57},
	annote = {{SUMMARY} {(Fritz):}

a {UML-like} diagrammatic language which they call the Unified Requirements Modeling Language {(RUML).} It is significantly smaller than {UML} and adds concepts like stakeholders, goals, requirements (functional and non-functional), services linked to requirements and services contained in services (don't like that part myself). They do not have support for either solid data structure specification or technology neutral process specification. They distinguish between solution and application domain use cases which we would argue is questionable.}
},

@inproceedings{gervais_towards_2002,
	address = {Oxford, {UK}},
	title = {Towards an {MDA-oriented} methodology},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/CMPSAC.2002.1044561},
	booktitle = {Proceedings 26th Annual International Computer Software and Applications},
	author = {Gervais, {M.P.}},
	year = {2002},
	keywords = {Design methodology, {MDA}, {ODAC}, {PIM} guidelines},
	pages = {265--270},
	annote = {{SUMMARY} {(Fritz):}

defines {ODAC} methodology which, in turn, is based on the Open Distributed Processing {(ODP)} {ISO} standards which, in turn, is related to {IEEE} 1471 (architectural description) standards. This paper is relevant for us because the graphical syntax specification for {URDAD} will similarly be based on the concept of views and view points as specified in {IEEE-1471.} They also emphasize that the {MDA} inputs are the {PIM} for the texchnology neutral design and the {PDM} {(Platform} Description Model) which contains the specification of the target architecture and technologies and that the {MDA} processes generate the {PSM} {(Platform} Specific Model) and ultimately the code from these. The {ODAC} process is, however, very different from {URDAD.} {THe} steps are to (1) define the objective, (2), Specify the role types, (3) specify the S-community which includes the specification of the secondary actors (external service providers and observers) a use case needs to interface with, (4) the identification of the interface roles which effectively is similar to the responsibility allocation step of {URDAD} where services are assigned to responsibility domains (roles in their case), (5) enterprise object identification (data modeling), (6) describing the community behaviour which is similar to process orchestration and (7) describing the policies which covers some aspects around what needs to be done in certain circumstances and when to refuse a service. They regard the above as providing guidelines for the content of the {PIM.}}
},

@inproceedings{wimmer_towards_2007,
	title = {Towards Model Transformation Generation {By-Example}},
	doi = {10.1109/HICSS.2007.572},
	abstract = {With the advent of model-driven engineering {(MDE)} several model transformation approaches and languages have been developed in the previous 5 years. Most of these existing approaches are metamodel-based with metamodels representing both an abstract syntax of the corresponding modeling language and also a data structure for storing models. However, this implementation specific focus makes it difficult for modelers to develop model transformations, because metamodels do not necessarily define all language concepts explicitly which are available for notation purposes. Therefore, we propose a by-example approach for defining inter-model mappings representing semantic correspondences between concrete domain models, which is more user-friendly, then directly specifying model transformation rules or mappings based on the abstract syntax. The inter-model mappings between domain models can be used to generate model transformation rules, by-example, taking into account the already defined mapping between abstract and concrete syntax elements. With this approach the user's knowledge about the notation of the modeling language is sufficient for the definition of model transformations regarding semantic correspondences. Hence, no detailed knowledge about the metamodel and the model transformation language is required},
	booktitle = {System Sciences, 2007. {HICSS} 2007. 40th Annual Hawaii International Conference on},
	author = {Wimmer, Manuel and Strommer, Michael and Kargl, Horst and Kramler, Gerhard},
	month = jan,
	year = {2007},
	keywords = {approach;data, by-example, engineering;modeling, language, language;automatic, languages;, mappings;model, programming;data, rules;model-driven, semantics;software, specification;programming, structure;inter-model, structures;formal, tools;specification, transformation},
	pages = {285b --285b}
},

@article{hoffmann_towards_2009,
	title = {Towards the Integration of {UML-} and textual Use Case Modeling},
	volume = {8},
	issn = {1660-1769},
	url = {http://www.jot.fm/contents/issue_2009_05/article2.html},
	doi = {10.5381/jot.2009.8.3.a2},
	number = {3},
	journal = {Journal of Object Technology},
	author = {Hoffmann, Veit and Lichter, Horst and Nyßen, Alexander and Walter, Andreas},
	month = may,
	year = {2009},
	keywords = {Domain experts, {DSL}, {UML}},
	pages = {85--100},
	annote = {{SUMMARY:}

- Define separate metamodel for narrative use case description useful for business users (note this is not a textual syntax, but a separate metamodel)

- Define consistency checks between narrative and {UML} use case models.

- Relevant as reference for {URDAD} text {DSL} for domain experts.

 }
},

@inproceedings{kherraf_transformation_2008,
	title = {Transformation from {CIM} to {PIM} Using Patterns and Archetypes},
	doi = {10.1109/ASWEC.2008.4483222},
	abstract = {Model transformations form a key part of {MDA} (model-driven architecture). Most of the studies deal with the transformations from {PIM} (platform-independent model) to {PSM} (platform-specific model) and {PSM} to Code, but very few deal with the transformation from {CIM} (computation-independent model) to {PIM.} This last transformation usually depends on business analysts' and software architects' experience and creativity. This paper proposes a disciplined approach to transform a {CIM} into a {PIM.} It first uses {UML2} activity diagrams to model the business processes up to the users' tasks. The activity diagrams are then detailed to specify the system requirements. The system components are directly deduced from the requirement model elements. Finally, a set of business archetypes helps detail the system components to yield the {PIM.} The same approach applies equally to {CIM} and {PIM} built to model inter-enterprise processes and systems. A case study illustrates our approach. It demonstrates how it reinforces the components traceability and reusability and how it globally improves the modeler's efficiency. Furthermore, the use of the activity diagrams, as a single technique to build business process and requirement models, is an important facilitator which prepares our further work to automate this approach.},
	booktitle = {Software Engineering, 2008. {ASWEC} 2008. 19th Australian Conference on},
	author = {Kherraf, S. and Lefebvre, E. and Suryn, W.},
	month = mar,
	year = {2008},
	keywords = {activity, analysts;business, archetypes;business, architects;system, architecture;, architecture;platform-independent, components;system, data, diagrams;business, Language;business, model;inter-enterprise, model;platform-specific, model;requirement, modeling, models;software, processes;computation-independent, processes;model, processing;formal, {requirements;Unified}, specification;software, transformations;model-driven, {UML2}},
	pages = {338 --346}
},

@inproceedings{nikulsins_transformations_2010,
	address = {Athens, Greece},
	title = {Transformations of Software Process Models to Adopt {Model-Driven} Architecture},
	url = {http://www.enase.org/Abstracts/2010/ENASE_2010_Abstracts.htm},
	abstract = {This paper proposes a solution on how to adopt software development process and make it compliant with the Model Driven Architecture by {OMG.} Process modeling languages helps to formalize the knowledge about the software development life cycle expressed in tasks, activities, phases, workflows and roles. {SPEM} {(Software} Process Engineering {Meta-Model)} is {OMG} standard used to describe a software development process within an organization. The proposed solution is to transform any so called “traditional” software development life cycle model into the model-driven with the help of model transformations written in {Query/View/Transformation} {(QVT)} language. This approach has been partially approbated in one of the Latvian {IT} companies.},
	author = {Nikulsins, Vladimirs},
	year = {2010},
	keywords = {{MDA}, methodology, {QVT}, {SPEM}, textual use case description},
	annote = {{SUMMARY:}

- suggest how to adopt software development process for {MDA}

- propose to transform traditional development life cycle model into model-driven development process using {QVT}

- extensively refer to {SPEM}, {OMG's} Software Process Engineering {Meta-Model.}

 

 }
},

@inproceedings{osis_transforming_2010,
	address = {Athens, Greece},
	title = {Transforming Textual Use Cases to a Computation Independent Model},
	url = {http://www.enase.org/Abstracts/2010/ENASE_2010_Abstracts.htm},
	abstract = {This paper analyzes the specific text analysis tasks of transforming textual use cases of a business system to a Computation Independent Model {(CIM)} for Model Driven Architecture {(MDA).} By applying language processing methods to textual use case analysis and using Topological Functioning Model {(TFM)} as {CIM} a workable solution can be developed. Implementing a {TFM} Tool is considered to enable fetching a {TFM} from use cases, editing and verifying the {TFM}, and transforming {TFM} to Unified Modeling Language {(UML).} Solution’s compatibility to {MDA} standards is also considered, thus increasing the completeness of {MDA} and providing a formal method to automatically acquire a {CIM} from description of a business system in form of textual use cases.},
	booktitle = {5'th International Conference on Evaluation of Novel Approaches to Software Engineering},
	author = {Osis, Janis and Šlihte, Armands},
	year = {2010},
	annote = {{SUMMARY} {(Fritz):}

The authors study the possibility of transforming textual descriptions of use cases to a requirements model in the form of {MDA's} Computation Independent Model. This is related to our work because we do the converse of defining a formal text syntax which directly generates the requirements and process design model which is the {CIM} + {PIM.} The authors define a required structure for the textual description of a use case and then extract the topological functioning model from that structure. We, on the other hand, specify the metamodel and then a concrete syntaxt for our domain specific language, having thus automatically the mapping between the textual representation and the model conforming to the metamodel. They us the the Topological Functioning Model {(TFM)} which defines a topological space around the functional features (services) of the system and a directed graph connecting these. As such it can be related to a pure services oriented approach as represented by {URDAD.}}
},

@misc{_uml_2003,
	title = {{UML} 2.0 Diagram Interchange Specification v2},
	url = {http://www.omg.org/cgi-bin/doc?ptc/2003-09-01},
	publisher = {Object Management Group},
	month = sep,
	year = {2003},
	keywords = {{OMG}, specification, {UML}, {UML} Diagram Interchange}
},

@book{jezequel_uml_2002,
	address = {Berlin, Heidelberg},
	title = {{UML} 2002 — The Unified Modeling Language},
	volume = {2460},
	isbn = {978-3-540-44254-7},
	url = {http://www.springerlink.com/content/p30m77w3yk4nbck8/},
	publisher = {Springer Berlin Heidelberg},
	editor = {Jézéquel, {Jean-Marc} and Hussmann, Heinrich and Cook, Stephen},
	year = {2002}
},

@book{podeswa_uml_2005,
	title = {{UML} for the {IT} Business Analyst},
	publisher = {Thomson Course Technology},
	author = {Podeswa, Howard},
	year = {2005}
},

@misc{_uml_2010,
	title = {{UML} Infrastructure v2.3},
	url = {http://www.omg.org/spec/UML/2.3/},
	publisher = {Object Management Group},
	month = may,
	year = {2010},
	keywords = {{OMG}, specification, {UML}}
},

@techreport{group_uml_????,
	type = {Specification},
	title = {{UML} Profile for Modeling Quality of Service and Fault Tolerance Characteristics and Mechanisms},
	url = {http://www.omg.org/technology/documents/formal/QoS_FT.htm},
	institution = {Object Management Group {(OMG)}},
	author = {Group, The Object Management}
},

@inproceedings{zhu_uml_2007,
	address = {Washington, {DC}, {USA}},
	title = {{UML} Profiles for Design Decisions and {Non-Functional} Requirements},
	isbn = {0-7695-2830-9},
	doi = {http://0-dx.doi.org.innopac.up.ac.za/10.1109/ICSEW.2007.222},
	booktitle = {{ICSEW} '07: Proceedings of the 29th International Conference on Software Engineering Workshops},
	publisher = {{IEEE} Computer Society},
	author = {Zhu, Liming and Gorton, Ian},
	year = {2007},
	pages = {41}
},

@misc{_uml_2010-1,
	title = {{UML} Superstructure v2.3},
	url = {http://www.omg.org/spec/UML/2.3/},
	publisher = {Object Management Group},
	month = may,
	year = {2010},
	keywords = {{OMG}, specification, {UML}}
},

@inproceedings{teyssie_uml-based_????,
	address = {Morne, Mauritius},
	title = {{UML-based} Specification of {QoS} Contract Negotiation and Service Level Agreements},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/ICNICONSMCL.2006.218},
	booktitle = {International Conference on Networking, International Conference on Systems and International Conference on Mobile Communications and Learning Technologies {(ICNICONSMCL'06)}},
	author = {Teyssie, C.},
	pages = {12--12}
},

@book{monin_understanding_2003,
	title = {Understanding formal methods},
	publisher = {Springer},
	author = {Monin, Jean Fran?ois and Hinchey, Michael Gerard},
	year = {2003}
},

@article{lindland_understanding_1994,
	title = {Understanding quality in conceptual modeling},
	volume = {11},
	issn = {07407459},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/52.268955},
	number = {2},
	journal = {{IEEE} Software},
	author = {Lindland, {O.I.} and Sindre, G. and Solvberg, A.},
	year = {1994},
	pages = {42--49}
},

@book{runbaugh_unified_2004,
	title = {Unified Modeling Language Reference Manual, 2nd Edition},
	publisher = {{Addison-Wesley} Professional},
	author = {Runbaugh, James and Jacobson, Ivar and Booch, Grady},
	month = jul,
	year = {2004}
},

@inproceedings{gonzalez_unity_2009,
	address = {Fez, Morocco},
	title = {Unity criteria for Business Process Modelling},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/RCIS.2009.5089279},
	booktitle = {2009 Third International Conference on Research Challenges in Information Science},
	author = {Gonzalez, Arturo and Espana, Sergio and Pastor, Oscar},
	month = apr,
	year = {2009},
	pages = {155--164},
	annote = {{SUMMARY:}

- use unity criteria to determine boundary between analysis and design (requirements \& solution space)

- define unity criteria which are used for various forms of modularization like grouping of services within certain classes and packaging classes into modules. This is similar to our responsibility localization approach which groups services into responsibility domains and responsibility domains within higher-level responsibility domains. They focus on trigger unity, communication unity and reaction unity. Trigger unity, if I understand it correctly, translates in our world that the information for a service request should come from a single cohesive actor unit. Communication unity represents, I think, message/data unity and reaction unity represents the unity of the process realizing the service which, in our case, is enforced by requiring that every service requires a controller which takes over the responsibility for the service and manages the control flow for the service.

- we believe a services oriented approach identifying atomic services which cover a single responsibility domain at a level of granularity as the better approach for

1. grouping into cohesive units of functionality

2. using the contract as the boundary between requirements and solution space}
},

@article{solms_urdad_2010,
	title = {{URDAD} as a semi-formal approach to analysis and design},
	volume = {6},
	issn = {1614-5046},
	url = {http://dx.doi.org/10.1007/s11334-009-0113-4},
	abstract = {The Use Case, Responsibility Driven Analysis and Design {(URDAD)} methodology is a methodology for technology neutral design generating the Platform Independent Model of the Object Management Group’s Model Driven Architecture. It requires the core modeling to be done in the problem space by domain specialists and not in the solution space by technology specialists. {URDAD} allows for formal elements to be added by different role players at different stages of the model refinement, whilst aiming to preserve agility of the outputs and low cost of the process generating the outputs. This paper discusses the semi-formal aspects of {URDAD} which facilitate model validation and testing, documentation generation and automated implementation mapping as well as aspects which promote agility and low cost.},
	journal = {Innovations in Systems and Software Engineering},
	author = {Solms, Fritz and Loubser, Dawid},
	year = {2010},
	note = {10.1007/s11334-009-0113-4},
	pages = {155--162}
},

@misc{razali_usability_2008,
	type = {Thesis},
	title = {Usability of Semi-formal and Formal Methods Integration - Empirical Assessments},
	url = {http://eprints.ecs.soton.ac.uk/15391/},
	author = {Razali, Rozilawati},
	month = mar,
	year = {2008},
	howpublished = {http://eprints.ecs.soton.ac.uk/15391/}
},

@book{rosenberg_use_1999,
	title = {Use Case Driven Object Modeling with {UML:} A Practical Approach},
	publisher = {{Addison-Wesley} Professional},
	author = {Rosenberg, Doug and Scott, Kendall},
	year = {1999}
},

@article{parreiras_using_2010,
	title = {Using ontologies with {UML} class-based modeling: The {TwoUse} approach},
	volume = {69},
	issn = {{0169-023X}},
	shorttitle = {Using ontologies with {UML} class-based modeling},
	url = {http://www.sciencedirect.com/science/article/B6TYX-50J4M6X-5/2/0af833bc0750a5efddf70c0696a4fe5c},
	doi = {10.1016/j.datak.2010.07.009},
	abstract = {{UML} class-based models and {OWL} ontologies constitute modeling approaches with different strengths and weaknesses that make them appropriate for specifying distinct aspects of software systems. We propose an integrated use of both modeling approaches in a coherent framework -- {TwoUse.} We present a framework involving different concrete syntaxes for developing integrated models and use a {SPARQL-like} approach for writing query operations. We illustrate {TwoUse's} applicability with a case study and conclude that {TwoUse} achieves enhancements of non-functional software requirements like maintainability, reusability and extensibility.},
	number = {11},
	journal = {Data \& Knowledge Engineering},
	author = {Parreiras, Fernando Silva and Staab, Steffen},
	month = nov,
	year = {2010},
	keywords = {{CASE} tools + {UML}, consistency checking, Ecore, Language definition, Manipulation, metamodel, Ontologies, {OWL}, {OWL-DL}, twouse},
	pages = {1194--1207}
},

@article{cabot_verification_2010,
	title = {Verification and validation of declarative model-to-model transformations through invariants},
	volume = {83},
	issn = {0164-1212},
	url = {http://www.sciencedirect.com/science/article/B6V0N-4X0XF3G-1/2/5f4d042f3171dd929f678da9ad542caf},
	doi = {10.1016/j.jss.2009.08.012},
	abstract = {In this paper we propose a method to derive {OCL} invariants from declarative model-to-model transformations in order to enable their verification and analysis. For this purpose we have defined a number of invariant-based verification properties which provide increasing degrees of confidence about transformation correctness, such as whether a rule (or the whole transformation) is satisfiable by some model, executable or total. We also provide some heuristics for generating meaningful scenarios that can be used to semi-automatically validate the transformations.
As a proof of concept, the method is instantiated for two prominent model-to-model transformation languages: Triple Graph Grammars and {QVT.}},
	number = {2},
	journal = {Journal of Systems and Software},
	author = {Cabot, Jordi and Clarisó, Robert and Guerra, Esther and de Lara, Juan},
	month = feb,
	year = {2010},
	keywords = {{Model-Driven} Development, Model-to-model transformation, {OCL}, {QVT}, Triple Graph Grammars, Verification and validation},
	pages = {283--302}
},

@article{platzer_verification_2009,
	title = {Verification of Cyberphysical Transportation Systems},
	volume = {24},
	issn = {1541-1672},
	doi = {10.1109/MIS.2009.81},
	abstract = {Next-generation transportation systems in air traffic, railway, and car control will leverage advanced computing and sensing capabilities to improve safety and throughput to meet increasing transportation demands. It combines cyber aspects (such as wireless communication and computer control) with physical aspects (such as movement in space and real-time interfacing with the physical environment, including sensing and actuation), thus forming cyberphysical systems {(CPSs).'ith} the increasing complexity of modern transportation technology, the need for analysis techniques that help find and fix errors in system design is rising quickly. Testing and debugging the control software in transportation systems is becoming more expensive; the resulting cost is already well above 50 percent of the total development cost in most cases. Because correct design is difficult to establish with ad hoc debugging, upcoming standards in the aviation and car industries will encourage and require formal methods. With the emergent cyberphysical transportation field, exciting challenges lie ahead in making the vision of robust and reliable system design a reality.},
	number = {4},
	journal = {Intelligent Systems, {IEEE}},
	author = {Platzer, A.},
	month = jul,
	year = {2009},
	keywords = {air traffic control, automated highways, car control, control engineering computing, control software debugging, control software testing, cyber aspects, cyberphysical systems, cyberphysical transportation field, cyberphysical transportation systems, formal methods, formal verification, intelligent transportation systems, next-generation transportation systems, physical aspects, program debugging, program testing, railway control, railways, road trafficad hoc debugging, system design, transportation technology},
	pages = {10–13}
},

@inproceedings{shaikh_verification-driven_2010,
	address = {New York, {NY}, {USA}},
	series = {{ASE} '10},
	title = {Verification-driven slicing of {UML/OCL} models},
	isbn = {978-1-4503-0116-9},
	location = {Antwerp, Belgium},
	url = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/1858996.1859038},
	doi = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/1858996.1859038},
	booktitle = {Proceedings of the {IEEE/ACM} international conference on Automated software engineering},
	publisher = {{ACM}},
	author = {Shaikh, Asadullah and Clarisó, Robert and Wiil, Uffe Kock and Memon, Nasrullah},
	year = {2010},
	keywords = {formal verification, {MDD}, model slicing, ocl, {UML}},
	pages = {185–194}
},

@inproceedings{zuo_zhihong_web_2003,
	address = {Chengdu, China},
	title = {Web Ontology Language {OWL} and its description logic foundation},
	url = {http://0-ieeexplore.ieee.org.innopac.up.ac.za/xpl/downloadCitations},
	doi = {10.1109/PDCAT.2003.1236278},
	booktitle = {Proceedings of the 8th International Scientific and Practical Conference of Students, Post-graduates and Young Scientists. Modern Technique and Technologies. {MTT'2002} {(Cat.} {No.02EX550)}},
	author = {Zuo zhihong and Zhou mingtian},
	year = {2003},
	pages = {157--160}
},

@techreport{tc_web_2007,
	type = {Specification},
	title = {Web Services Business Process Execution Language Version 2.0},
	url = {http://docs.oasis-open.org/wsbpel/2.0/OS/wsbpel-v2.0-OS.html},
	institution = {Organization for the Advancement of Structured Information Standards {(OASIS)}},
	author = {{TC}, {OASIS} Web Services Business Process Execution Language {(WSBPEL)}},
	month = apr,
	year = {2007}
},

@book{kavantzas_web_????,
	title = {Web Services Choreography Description Language Version 1.0},
	url = {http://www.w3.org/TR/ws-cdl-10/},
	author = {Kavantzas, David Burdett Gregory Ritzinger Tony Fletcher Yves Lafon Charlton Barreto Nickolas}
},

@book{bajaj_web_????,
	title = {Web Services Policy 1.2 - Framework},
	url = {http://www.w3.org/Submission/WS-Policy/},
	author = {Bajaj, Don Box Dave Chappell Francisco Curbera et al. Siddharth}
},

@article{garvin_what_1984,
	title = {What does product quality really mean?},
	volume = {26},
	url = {http://doku.iab.de/externe/2006/k060210f02.pdf},
	journal = {Sloan Management Review},
	author = {Garvin, David},
	year = {1984},
	keywords = {quality, software-quality},
	pages = {25–45}
},

@techreport{berard_what_1995,
	type = {White paper},
	title = {What Is a Methodology?},
	institution = {The Object Agency},
	author = {Berard, Edward V.},
	year = {1995}
}