ResponsibilityDomain training
{
	elements
	{
		ResponsibilityDomain Primitives
		{
			elements
			{
				BasicDataType DateTime
			}
		},
		ResponsibilityDomain stakeholders
		{
			elements
			{
				Role Student,
				Role Client,
				Role TrainingInstitution,
				Role TrainingRegulator,
				Role CreditRegulator
			}	
		},
		PostCondition correctRegistrationStatusProvided
		{
			
		},
		
		ResponsibilityDomain registration
		{
			elements
			{
				Service isRegistered
				{
					request DataStructure IsRegisteredRequest
					{
						
					}
					result DataStructure IsRegisteredResult
					{
						
					}
					functionalRequirements
					{
						FunctionalRequirement 
						{
							requiredBy (TrainingInstitution)
							functionalConstraint correctRegistrationStatusProvided 
						} 
					}
				},
				Exception StudentNotRegisteredException {}
			}
		},
		
		ResponsibilityDomain finance
		{
			elements
			{
				DataStructure Invoice
				{
					
				},
				PostCondition invoiceIssued
				{
				},
				Service issueInvoice
				{
					request DataStructure IssueInvoiceRequest
					{
						
					}
					result DataStructure IssueInvoiceResult
					{
						
					}
					functionalRequirements
					{
						FunctionalRequirement
						{
							requiredBy (TrainingInstitution)
							functionalConstraint invoiceIssued
						}
					}
				},
				Exception FinancialPrerequisitesNotSatsfiedException
				{
					
				}
			}
		},
		PreCondition studentRegistered
		{
			exception StudentNotRegisteredException
		},
		
		ResponsibilityDomain academics
		{
			elements
			{
				ResponsibilityDomain assessment
				{
					elements
					{
						Service studentSatisfiesCoursePrerequisites
						{
							request DataStructure StudentSatisfiesCoursePrerequisitesRequest
							{
								
							}
							result DataStructure StudentSatisfiesCoursePrerequisitesResult
							{
								
							}
							functionalRequirements
							{
								FunctionalRequirement
								{
									requiredBy (TrainingInstitution)
									functionalConstraint studentRegistered
								}
							}
						},
						Exception StudentDoesNotSatisfyCoursePrerequisites {}
					}
				},
				PreCondition studentEnlistedForCourse
				{
					exception StudentNotEnlistedForCourseException 
				},
				ResponsibilityDomain studyGuides
				{
					elements
					{
						Service provideStudyGuide
						{
							request DataStructure ProvideStudyGuideRequest
							{
								
							}
							result DataStructure ProvideStudyGuideResult
							{
								
							}
							functionalRequirements
							{
								FunctionalRequirement
								{
									requiredBy (TrainingInstitution)
									functionalConstraint studentEnlistedForCourse
								}
							}							
						}
					}
				}
			}
		},
		
		ResponsibilityDomain enrollment
		{
			elements
			{
				Exception StudentNotEnlistedForCourseException
				{
					
				},
				Service enrollmentConflictsWithStudentRoster
				{
					request DataStructure EnrollmentConflictsWithStudentRosterRequest
					{
						
					}
					result DataStructure EnrollmentConflictsWithStudentRosterResult
					{
						
					}
					functionalRequirements
					{
						FunctionalRequirement 
						{
							requiredBy (TrainingInstitution)
							functionalConstraint studentRegistered
						}
					}
				},
				
				Service generateProofOfEnrollment
				{
					request DataStructure GenerateProofOfEnrollmentReque
					{
						
					}
					result DataStructure GenerateProofOfEnrollmentResult
					{
						
					}
					functionalRequirements
					{
						FunctionalRequirement
						{
							requiredBy (TrainingInstitution)
							functionalConstraint studentEnlistedForCourse
						}
					}
				},
				
				Service enlistStudentForPresentation
				{
					request DataStructure EnlistStudentForPresentationRequest
					{
						
					}
					result DataStructure EnlistStudentForPresentationResult
					{
						
					}
					functionalRequirements
					{
						FunctionalRequirement
						{
							requiredBy (TrainingInstitution)
							functionalConstraint studentRegistered
						}
					}
				},
				PreCondition presentationOpenForEnrollment
				{
					requiredService enlistStudentForPresentation
					exception PresentationNotOpenForEnrollmentException
				},
				
				PreCondition studentMeetsCoursePrerequisites
				{
					requiredService studentSatisfiesCoursePrerequisites
					exception StudentDoesNotSatisfyCoursePrerequisites
				},
				
				PreCondition financialPrerequisitesSatisfied
				{
					requiredService issueInvoice
					exception FinancialPrerequisitesNotSatsfiedException
				},
				
				PreCondition enrollmentDoesNotConflictWithStudentRoster
				{
					requiredService enrollmentConflictsWithStudentRoster
					exception EnrollmentConflictsWithStudentRosterException
				},
						
				PostCondition studentEnlistedForPresentation
				{
					requiredService enlistStudentForPresentation
				},
				PostCondition invoiceIssued
				{
					requiredService issueInvoice
				},
				PostCondition proofOfEnrollmentProvided
				{
					requiredService generateProofOfEnrollment		
				},
				PostCondition studyGuideProvided
				{
					requiredService provideStudyGuide
				},
				
				Service enrollForPresentation
				{
					
					request DataStructure EnrollForPresentationRequest
					{
						attributes
						{
							Attribute dateTime
							{
								type DateTime 
							}
						}
					}
					result DataStructure EnrollForPresentationResult
					{
						
					}
					functionalRequirements
					{
						FunctionalRequirement
						{
							requiredBy (TrainingInstitution)
							functionalConstraint studentRegistered
						},
						FunctionalRequirement
						{
							requiredBy (TrainingInstitution)
							functionalConstraint presentationOpenForEnrollment
						},
						FunctionalRequirement
						{
							requiredBy (Student, TrainingRegulator)
							functionalConstraint enrollmentDoesNotConflictWithStudentRoster
						},
						FunctionalRequirement
						{
							requiredBy (TrainingInstitution,CreditRegulator)
							functionalConstraint financialPrerequisitesSatisfied
						},
						FunctionalRequirement
						{
							requiredBy (Client,Student,TrainingRegulator)
							functionalConstraint proofOfEnrollmentProvided
						},
						FunctionalRequirement
						{
							requiredBy (TrainingInstitution,Client)
							functionalConstraint invoiceIssued
						},
						FunctionalRequirement
						{
							requiredBy (Student,TrainingRegulator)
							functionalConstraint studyGuideProvided
						},
						FunctionalRequirement
						{
							requiredBy (Student,Client,TrainingRegulator,TrainingInstitution)
							functionalConstraint studentEnlistedForCourse
						}
					}
				},
				
				Exception PresentationNotOpenForEnrollmentException {},
				
				Exception EnrollmentConflictsWithStudentRosterException {},
				
				Process 
				{
					serviceRealized enrollForPresentation
					processActivity ActivitySequence
					{
						activities
						{
							PreConditionActivity
							{
								preCondition studentRegistered
							},
							PreConditionActivity
							{
								preCondition studentMeetsCoursePrerequisites
							},
							PreConditionActivity
							{
								preCondition enrollmentDoesNotConflictWithStudentRoster
							},
							PrePostConditionActivity
							{
								preCondition presentationOpenForEnrollment
								postCondition studentEnlistedForPresentation
							},
							PrePostConditionActivity
							{
								preCondition financialPrerequisitesSatisfied
								postCondition invoiceIssued
							},
							ConcurrentActivities
							{
								activities
								{
									PostConditionActivity
									{
										postCondition proofOfEnrollmentProvided
									},
									PostConditionActivity
									{
										postCondition studyGuideProvided
									}
								}
							}
						}
					}
				}
			}
		}
	}
}