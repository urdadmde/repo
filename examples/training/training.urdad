Model Training

ResponsibilityDomain UrdadStandardProfile
{
  ResponsibilityDomain Primitives
  {
    BasicDataType Boolean
    BasicDataType Integer
    BasicDataType FloatingPointNumber
    BasicDataType String
    BasicDataType Date
    BasicDataType URI
  }
  ResponsibilityDomain Storage
  {
    ResponsibilityDomain StorageClient
    {
    }
    DataStructure Entity 
    {
        abstract = true
        has attribute identifier ofType URI 
    }
    
    Exception EntityAlreadyStoredException {}
    Exception EntityNotStoredException {}
    ServiceContract storeEntity
    {
        PreCondition entityNotYetStored 
            raises EntityAlreadyStoredException requiredBy (StorageClient)
        Request DataStructure StoreEntityRequest
        {
            has component entityToPersist ofType Entity
        }
        Result DataStructure StoreEntityResult
        {
            has component persistedEntity ofType Entity
        }
    }
    ServiceContract retrieveEntity
    {
        PreCondition entityStored
            raises EntityNotStoredException requiredBy (StorageClient)
        Request DataStructure RetrieveEntityRequest
        {
            has attribute entityIdentifier ofType Integer
        }
        Result DataStructure RetrieveEntityResult
        {
            has component retrievedEntity ofType Entity
        }
    }
    ServiceContract removeEntity
    {
        Request DataStructure RemoveEntityRequest
        {
            has attribute entityIdentifier ofType Integer
        }
        Result DataStructure RemoveEntityResult
        {
        }
    }
    ServiceContract updateEntity
    {
        PreCondition entityNotStored
            raises EntityNotStoredException requiredBy (StorageClient)
        Request DataStructure UpdateEntityRequest
        {
            has component newEntityState ofType Entity
        }
        Result DataStructure UpdateEntityResult
        {
            has component persistedEntity ofType Entity
        }
    }
    DataStructure StorageQuery
    {
        has attribute queryLanguage ofType URI
        has attribute queryExpression ofType String 
    }
    ServiceContract findEntities
    {
        Request DataStructure FindEntitiesRequest
        {
            has component query ofType StorageQuery
        }
        Result DataStructure FindEntitiesResult
        {
            has many component entity ofType Entity
        }
    }
  }
}

ResponsibilityDomain Training
{
  ResponsibilityDomain Student {}
  ResponsibilityDomain TrainingRegulator {}
  ResponsibilityDomain CreditRegulator {}
  ResponsibilityDomain Shareholder {}
  ResponsibilityDomain Client {}
  
  ResponsibilityDomain TrainingInstitution
  {
    ResponsibilityDomain Academic
    {
      ResponsibilityDomain CourseManagement
      {
        DataStructure Course
        {
            has attribute name ofType String
            has many association coursePrerequisites identifying Course 
        }
      }
      ResponsibilityDomain Assessment
      {
        Exception StudentDoesNotSatisfyPrerequisitesException {}
        ServiceContract checkStudentSatisfiesCoursePrerequisites
        {
          Request DataStructure CheckStudentSatisfiesCoursePrerequisitesRequest
          {
            has association studentIdentifier identifying Person
            has association presentationIdentifier identifying Presentation
          }
          Result DataStructure CheckStudentSatisfiesCoursePrerequisitesResult
          {
            abstract = true
            has attribute prerequisitesSatisfied ofType Boolean
          }
        } 
        ResponsibilityDomain Validation
        {
            ServiceContract checkStudentSatisfiesEnrollmentPrerequisites
            { 
                PostCondition ifEnrollmentConflictsWithRosterPrerequisitesNotSatisfied ensures
                    OCL:"result.isKindOf(StudentDoesNotMeetEnrollmentPrerequisites)"
                    requiredBy (TrainingInstitution)  
                PostCondition personIdentifierProvided
                    requiredBy (TrainingInstitution)
                PostCondition ifNotRegisteredPrerequisitesNotSatisfied
                    requiredBy (TrainingInstitution)
                PostCondition ifCourseConditionsNotSatisfiedEnrollmentConditionsNotSatisfied
                    requiredBy (TrainingRegulator Student)    
                Request DataStructure CheckStudentSatisfiesEnrollmentPrerequisitesRequest 
                {
                    has association studentIdentifier identifying Person
                    has association presentationIdentifier identifying Presentation
                }
                Result DataStructure CheckStudentSatisfiesEnrollmentPrerequisitesResult
                {
                    abstract = true
                    has association personIdentifier identifying Person
                    has association presentationIdentifier identifying Presentation
                }
            }
            DataStructure StudentSatisfiesEnrollmentPrerequisites is CheckStudentSatisfiesEnrollmentPrerequisitesResult{}
            DataStructure StudentDoesNotMeetEnrollmentPrerequisites is CheckStudentSatisfiesEnrollmentPrerequisitesResult
            {
                has many attribute reason ofType String
            }
            Service checkStudentSatisfiesEnrollmentPrerequisitesImpl realizes checkStudentSatisfiesEnrollmentPrerequisites
            {
                Request Variable checkStudentSatisfiesEnrollmentPrerequisitesRequest 
                    ofType CheckStudentSatisfiesEnrollmentPrerequisitesRequest
                use provideRegistrationDetails toAddress 
                    (personIdentifierProvided ifNotRegisteredPrerequisitesNotSatisfied)                     
                use checkWhetherEnrollmentConflictsWithStudentRoster toAddress 
                    (ifEnrollmentConflictsWithRosterPrerequisitesNotSatisfied)
                use checkWhetherEnrollmentConflictsWithStudentRoster toAddress (ifEnrollmentConflictsWithRosterPrerequisitesNotSatisfied)                       
                use checkStudentSatisfiesCoursePrerequisites toAddress
                    (ifCourseConditionsNotSatisfiedEnrollmentConditionsNotSatisfied)   
                doSequential
                {
                    create Variable provideRegistrationDetailsRequest ofType ProvideRegistrationDetailsRequest
                    set Query OCL:"provideRegistrationDetailsRequest.personIdentifier" equalTo
                        Query OCL:"checkStudentSatisfiesEnrollmentPrerequisitesRequest.personIdentifier"
                    
                    requestService provideRegistrationDetails with provideRegistrationDetailsRequest
                        yields Variable provideRegistrationDetailsResult ofType ProvideRegistrationDetailsResult
                    {
                        on PersonNotRegisteredException
                            doSequential
                            {
                                create Variable checkStudentSatisfiesEnrollmentPrerequisitesResult
                                    ofType StudentDoesNotMeetEnrollmentPrerequisites
                                returnResult checkStudentSatisfiesEnrollmentPrerequisitesResult    
                            }
                    }    
                   Concurrency
                   {
                      doConcurrent doSequential 
                      {
                          create Variable checkStudentSatisfiesCoursePrerequisitesRequest
                              ofType CheckStudentSatisfiesCoursePrerequisitesRequest
                          requestService checkStudentSatisfiesCoursePrerequisites
                              with checkStudentSatisfiesCoursePrerequisitesRequest
                              yields Variable checkStudentSatisfiesCoursePrerequisitesResult
                                  ofType CheckStudentSatisfiesCoursePrerequisitesResult
                      }   
                      doConcurrent doSequential
                      {
                          create Variable checkWhetherEnrollmentConflictsWithStudentRosterRequest ofType
                              CheckWhetherEnrollmentConflictsWithStudentRosterRequest
                          requestService checkWhetherEnrollmentConflictsWithStudentRoster 
                              with checkWhetherEnrollmentConflictsWithStudentRosterResult
                              yields Variable checkWhetherEnrollmentConflictsWithStudentRosterResult
                                  ofType CheckWhetherEnrollmentConflictsWithStudentRosterResult
                      }
                   }
                        
                   choice
                   {
                      if Condition OCL:"(checkStudentSatisfiesCoursePrerequisitesResult.prerequisitesSatisfied = true) and 
                            (checkWhetherEnrollmentConflictsWithStudentRosterResult.prerequisitesSatisfied = true)" 
                      doSequential
                      {
                          create Variable checkStudentSatisfiesEnrollmentPrerequisitesResult
                              ofType StudentSatisfiesEnrollmentPrerequisites
                          returnResult checkStudentSatisfiesEnrollmentPrerequisitesResult     
                      }
                      else doSequential
                      {
                        create Variable checkStudentSatisfiesEnrollmentPrerequisitesResult
                          ofType StudentDoesNotMeetEnrollmentPrerequisites
                        if Condition OCL:"checkStudentSatisfiesCoursePrerequisitesResult.prerequisitesSatisfied = false"
                            doSequential
                            {
                                create Variable reason ofType String
                                add Constant "Course prerequisites not satisfied." to 
                                    Query OCL:"checkStudentSatisfiesEnrollmentPrerequisitesResult.reasons"  
                            }             
                        if Condition OCL:"checkWhetherEnrollmentConflictsWithStudentRosterResult.prerequisitesSatisfied = false"
                            doSequential
                            {
                                create Variable reason ofType String
                                add Constant "Enrollment conflicts with student roster." to
                                    Query OCL:"checkStudentSatisfiesEnrollmentPrerequisitesResult.reasons"  
                            }                                 
                        returnResult checkStudentSatisfiesEnrollmentPrerequisitesResult    
                      }  
                   }
                }       
            }
        }
      }
      ResponsibilityDomain StudyGuides
      {
        DataStructure StudyGuide {}
        ServiceContract provideStudyGuide
        {
          PreCondition studentIsRegistered raises PersonNotRegisteredException requiredBy (Shareholder)
          Request DataStructure ProvideStudyGuideRequest 
          {
            has association courseIdentifier identifying Course
            has association studentIdentifier identifying Person
          }            
          Result DataStructure ProvideStudyGuideResult 
          {
            has component studyGuide ofType StudyGuide
          }                     
        }
      }
    }
    ResponsibilityDomain ClientRelationshipManagement
    {
	  DataStructure Address
      {
        has many attribute addressLine ofType String
      }
      DataStructure LegalEntity is Entity
      {
        has attribute name ofType String
        has component legalAddress ofType Address
        (Note en-ZA: "Any party you can bill and take to court, e.g. a person or an organization.")
      }
      DataStructure Organization is LegalEntity {}
	  DataStructure Person is LegalEntity {}
      DataStructure Identification is Entity
      {
        abstract = true
        has association issuingOrganization identifying Organization
      } 
      DataStructure CompanyIdentification is Identification
      {
        has attribute companyRegistrationNumber ofType String
      }
      
      DataStructure PersonIdentification is Identification
      {
        abstract = true
        has association person identifying Person
      } 
      DataStructure Passport is PersonIdentification
      {
        has attribute passportNumber ofType String
      }
      DataStructure OrganizationMembershipCard is PersonIdentification
      {
        has attribute cardNumber ofType String
        (Note en-ZA: "For example a student or and employee card")
      }
      Exception PersonNotRegisteredException {}
      ServiceContract provideRegistrationDetails
      {
        PreCondition personRegistered raises PersonNotRegisteredException requiredBy (TrainingInstitution)
        Request DataStructure ProvideRegistrationDetailsRequest 
        {
            has association personIdentifier identifying Person
            has association presentation identifying Presentation
        }
        Result DataStructure ProvideRegistrationDetailsResult 
        {
            has component personDetails ofType Person
        }
      }
      Service provideRegistrationDetails realizes provideRegistrationDetails
      {
        Request Variable provideRegistrationDetailsRequest ofType ProvideRegistrationDetailsRequest
        doSequential
        {
            create Variable retrieveEntityRequest ofType RetrieveEntityRequest
            set Query OCL:"retrieveEntityRequest.entityIdentifier" equalTo
                Query OCL:"provideRegistrationDetailsRequest.personIdentifier" 
            requestService retrieveEntity with retrieveEntityRequest yields Variable retrieveEntityResult ofType RetrieveEntityResult
            {
                on EntityNotStoredException raiseException PersonNotRegisteredException
            }
            create Variable provideRegistrationDetailsResult ofType ProvideRegistrationDetailsResult
            set Query OCL:"provideRegistrationDetailsResult.personDetails" equalTo
                Query OCL:"retrieveEntityResult.retrievedEntity"
            returnResult provideRegistrationDetailsResult
        }
      }
    }
    ResponsibilityDomain Finance
    {
      Exception NoInvoiceIssuedForEnrollmentException {}
      Exception FinancialPrerequisitesNotSatisfiedException {}
      ServiceContract issueInvoice
      {
        PreCondition financialPrerequisitesSatisfied raises FinancialPrerequisitesNotSatisfiedException requiredBy (Shareholder)
        Request DataStructure IssueInvoiceRequest 
        {
            has association clientIdentifier identifying LegalEntity
            has many component invoiceItems ofType InvoiceItem
        }
        Result DataStructure IssueInvoiceResult 
        {
            has component invoice ofType Invoice
        }
      }
      ServiceContract provideInvoiceForEnrollment
      {
        PreCondition invoiceForEnrollmentExists
            raises NoInvoiceIssuedForEnrollmentException requiredBy (Finance)
        Request DataStructure  ProvideInvoiceForEnrollmentRequest {}
        Result DataStructure ProvideInvoiceForEnrollmentResult {}
      }
      DataStructure Invoice is Entity
      {
        has attribute invoiceNumber ofType String
        has attribute invoiceDate ofType Date
        has component clientDetails ofType LegalEntity
        has component many invoiceItem ofType InvoiceItem
      }
      DataStructure Chargeable is Entity {}
      DataStructure InvoiceItem
      {
        has attribute cost ofType FloatingPointNumber
        has attribute quantity ofType Integer
        has association chargeableIdentifier identifying Chargeable
      }
    }
    ResponsibilityDomain PresentationManagement
    {
        DataStructure Location is Entity
        {
            has attribute name ofType String
            has component address ofType Address
        }
        DataStructure Presentation is Chargeable 
        {
            has attribute name ofType String
            has attribute startDate ofType Date
            has association location identifying Location
        }
        ServiceContract checkWhetherEnrollmentConflictsWithStudentRoster
        {
            Request DataStructure CheckWhetherEnrollmentConflictsWithStudentRosterRequest{}
            Result DataStructure CheckWhetherEnrollmentConflictsWithStudentRosterResult{}
        }
    }  
    ResponsibilityDomain Enrollments
    {
      ResponsibilityDomain PresentationManagement
      {
        DataStructure PresentationDetails
        {
            has association course identifying Course
        }
        ServiceContract enlistStudentForPresentation
        {
          PreCondition studentIsRegistered
            raises PersonNotRegisteredException requiredBy (Shareholder)
          Request DataStructure EnlistStudentForPresentationRequest {}
          Result DataStructure EnlistStudentForPresentationResult {}
        }
      }  
      ResponsibilityDomain ProofOfEnrollments
      {
        DataStructure ProofOfEnrollment is Entity
        {
            has component studentDetails ofType Person
            has component presentationDetails ofType Presentation
        }
        ServiceContract provideProofOfEnrollment
        {
          PreCondition studentIsRegistered
            raises PersonNotRegisteredException requiredBy (Shareholder TrainingRegulator)
          Request DataStructure ProvideProofOfEnrollmentRequest {}
          Result DataStructure ProvideProofOfEnrollmentResult {}
        }
      }
      Exception EnrollmentPrerequisitesNotSatisfiedException {}
      ServiceContract enrollForPresentation
      {
        PreCondition financialPrerequisitesMet
            raises FinancialPrerequisitesNotSatisfiedException
            requiredBy (Shareholder)    
        PreCondition enrollmentPrerequisitesMet
            raises EnrollmentPrerequisitesNotSatisfiedException
            requiredBy (TrainingRegulator Student) 
        PostCondition enrollmentProcessPerformed
            requiredBy (Student Client TrainingRegulator)    
        PostCondition invoiceIssued
            requiredBy (Shareholder Client CreditRegulator)    
        Request DataStructure EnrollForPresentationRequest 
        {
            has association presentationIdentifier identifying Presentation
            has association studentIdentifier identifying Person
            has component clientIdentifier ofType LegalEntity         
        }
        Result DataStructure EnrollForPresentationResult 
        {
            has component proofOfEnrollment ofType ProofOfEnrollment
            has component invoice ofType Invoice
            has component studyGuide ofType StudyGuide
        }
      }
      Service enrollForPresentationImpl realizes enrollForPresentation
      {
        Request Variable enrollForPresentationRequest ofType EnrollForPresentationRequest
        use checkStudentSatisfiesEnrollmentPrerequisites toAddress (enrollmentPrerequisitesMet)
        use issueInvoice toAddress (financialPrerequisitesSatisfied invoiceIssued) 
        use performEnrollment toAddress (invoiceIssued)
        doSequential
        {
            create Variable checkStudentSatisfiesEnrollmentPrerequisitesRequest 
                ofType CheckStudentSatisfiesEnrollmentPrerequisitesRequest               
            set Query OCL:"enrollForPresentationRequest.studentIdentifier" equalTo 
                Query OCL:"checkEnrollmentPrerequisitesRequest.studentIdentifier"
            set Query OCL:"enrollForPresentationRequest.presentationIdentifier" equalTo
                Query OCL:"checkEnrollmentPrerequisitesRequest.presentationIdentifier"
                     
            requestService checkStudentSatisfiesEnrollmentPrerequisites 
                with checkStudentSatisfiesEnrollmentPrerequisitesRequest 
                yields Variable checkStudentSatisfiesEnrollmentPrerequisitesResult
                    ofType CheckStudentSatisfiesEnrollmentPrerequisitesResult
            choice
            {
                if Condition enrollmentMeetsPrerequisitesMet 
                    OCL:"checkStudentSatisfiesEnrollmentPrerequisitesResult.enrollmentPrerequisitesMet = true"
                    doSequential
                    {
                        create Variable issueInvoiceRequest ofType IssueInvoiceRequest
                        set Query OCL:"enrollForPresentationRequest.clientIdentifier" equalTo 
                            Query OCL:"issueInvoiceRequest.clientIdentifier"                            
                        create Variable invoiceItem ofType InvoiceItem    
			            set Query OCL:"enrollForPresentationRequest.presentationIdentifier" equalTo
			                Query OCL:"invoiceItem.chargeableIdentifier"
			            add Query OCL:"invoiceItem" to
			                Query OCL:"issueInvoiceRequest.invoiceItems"    
			                     
                        requestService issueInvoice with issueInvoiceRequest 
                            yields Variable issueInvoiceResult ofType IssueInvoiceResult
                        {
                            on FinancialPrerequisitesNotSatisfiedException 
                                raiseException FinancialPrerequisitesNotSatisfiedException
                        }
                        
                        create Variable enrollRequest ofType PerformEnrollmentRequest 
                        set Query OCL:"checkStudentSatisfiesEnrollmentPrerequisitesResult.personIdentifier" equalTo
                            Query OCL:"performEnrollmentRequest.personIdentifier"
                        set Query OCL:"enrollForPresentationRequest.presentationIdentifier" equalTo
                            Query OCL:"performEnrollmentRequest.presentationIdentifier"    
                        requestService performEnrollment with enrollRequest 
                            yields Variable performEnrollmentResult ofType PerformEnrollmentResult
                        create Variable enrollForPresentationResult ofType EnrollForPresentationResult
                        set Query OCL:"issueInvoiceResult.invoice" equalTo
                            Query OCL:"enrollForPresentationResult.invoice"
                        set Query OCL:"performEnrollmentResult.enrollmentConfirmation" equalTo
                            Query OCL:"enrollForPresentationResult.enrollmentConfirmation"
                        set Query OCL:"performEnrollmentResult.studyGuide" equalTo
                            Query OCL:"enrollForPresentationResult.studyGuide"    
                        returnResult  enrollForPresentationResult
                    }
                else
                    raiseException EnrollmentPrerequisitesNotSatisfiedException
                        
            }
        }  
      }
      
      ServiceContract performEnrollment
      {
        Request DataStructure PerformEnrollmentRequest 
        {
            has association presentationIdentifier identifying Presentation
            has association personIdentifier identifying Person
        }
        Result DataStructure PerformEnrollmentResult 
        {
            has component enrollmentConfirmation ofType ProofOfEnrollment
            has component studyGuide ofType StudyGuide
        }
      }
    } 
  }
}  
