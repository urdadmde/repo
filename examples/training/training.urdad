Model Training
ResponsibilityDomain Training
{
  ResponsibilityDomain Primitives
  {
    BasicDataType String
    BasicDataType Integer
    BasicDataType FloatingPointNumber
    BasicDataType Date
    BasicDataType URI
    
    DataStructure Object {}
  }
  ResponsibilityDomain Collections
  {
    DataStructure Collection {}
    DataStructure  List is Collection {}
    ServiceContract addObjectToCollection
    {
        Request DataStructure AddObjectToCollectionRequest
        {
            contains objectToAdd ofType Object
            identifies collectionToAddTo ofType Collection
        }
        Result DataStructure AddObjectToCollectionResult {}
    }
    ServiceContract removeObjectFromCollection
    {
        Request DataStructure RemoveObjectFromCollectionRequest
        {
            contains objectToRemove ofType Object
            identifies collectionToRemoveFrom ofType Collection
        }
        Result DataStructure RemoveObjectFromCollectionResult {}
    }
    ServiceContract provideObjectAtIndex
    {
        Request DataStructure ProvideObjectAtIndexRequest
        {
            contains objectToRemove ofType Object
            identifies collectionToRemoveFrom ofType Collection
        }
        Result DataStructure RemoveObjectFromCollectionResult {}
    }
  }
  ResponsibilityDomain Storage
  {
    ResponsibilityDomain StorageClient
    {
    }
    DataStructure Entity
    {
        hasAttribute identifier ofType Integer
    }
    
    Condition EntityNotStored
    Condition EntityStored
    Exception EntityAlreadyStoredException {}
    Exception EntityNotStoredException {}
    ServiceContract storeEntity
    {
        PreCondition entityNotYetStored checks EntityNotStored 
            raises EntityAlreadyStoredException isRequiredBy (StorageClient)
        Request DataStructure StoreEntityRequest
        {
            has entityToPersist ofType Entity
        }
        Result DataStructure StoreEntityResult
        {
            has persistedEntity ofType Entity
        }
    }
    ServiceContract retrieveEntity
    {
        PreCondition entityStored checks EntityStored 
            raises EntityNotStoredException isRequiredBy (StorageClient)
        Request DataStructure RetrieveEntityRequest
        {
            hasAttribute entityIdentifier ofType Integer
        }
        Result DataStructure RetrieveEntityResult
        {
            has retrievedEntity ofType Entity
        }
    }
    ServiceContract removeEntity
    {
        Request DataStructure RemoveEntityRequest
        {
            hasAttribute entityIdentifier ofType Integer
        }
        Result DataStructure RemoveEntityResult
        {
        }
    }
    ServiceContract updateEntity
    {
        PreCondition entityNotStored checks EntityNotStored 
            raises EntityNotStoredException isRequiredBy (StorageClient)
        Request DataStructure UpdateEntityRequest
        {
            has newEntityState ofType Entity
        }
        Result DataStructure UpdateEntityResult
        {
            has persistedEntity ofType Entity
        }
    }
    DataStructure StorageQuery
    {
        hasAttribute queryLanguage ofType URI
        hasAttribute queryExpression ofType String 
    }
    ServiceContract findEntities
    {
        Request DataStructure FindEntitiesRequest
        {
            has query ofType StorageQuery
        }
        Result DataStructure ResultList is List
        {}
    }
  }
  
  ResponsibilityDomain TrainingInstitution
  {
    ResponsibilityDomain Finance
    {
      Condition invoiceForEnrollmentIssued 
      Exception NoInvoiceIssuedForEnrollmentException {}
      Condition financialPrerequisitesSatisfied 
      Exception FinancialPrerequisitesNotSatisfiedException {}
      ServiceContract issueInvoice
      {
        PreCondition financialPrerequisitesMet checks financialPrerequisitesSatisfied isRequiredBy ()
        Request DataStructure IssueInvoiceRequest {}
        Result DataStructure IssueInvoiceResult {}
      }
      ServiceContract provideInvoiceForEnrollment
      {
        PreCondition invoiceForEnrollmentExists checks invoiceForEnrollmentIssued 
            raises NoInvoiceIssuedForEnrollmentException isRequiredBy (Finance)
        Request DataStructure  ProvideInvoiceForEnrollmentRequest {}
        Result DataStructure ProvideInvoiceForEnrollmentResult {}
      }
    }
    ResponsibilityDomain ClientRelationshipManagement
    {
      Condition studentIsRegistered OCL:"provideRegistrationDetails(#provideRegistrationDetailsRequest) <> NULL"
      Exception StudentNotRegisteredException {}
      ServiceContract provideRegistrationDetails
      {
        Request DataStructure ProvideRegistrationDetailsRequest {}
        Result DataStructure ProvideRegistrationDetailsResult {}
      }
    }
    ResponsibilityDomain Academic
    {
      ResponsibilityDomain Assessment
      {
        Exception StudentDoesNotSatisfyPrerequisitesException {}
        ServiceContract checkStudentSatisfiesCoursePrerequisites
        {
        
          PreCondition studentRegistered checks studentIsRegistered 
            raises StudentNotRegisteredException isRequiredBy (Shareholder)
          
          Request DataStructure CheckStudentSatisfiesCoursePrerequisitesRequest
          {
          }
          Result DataStructure CheckStudentSatisfiesCoursePrerequisitesResult
          {
          } 
        } 
        ResponsibilityDomain Validation
        {
            ServiceContract checkStudentSatisfiesEnrollmentPrerequisites
            {
                Request DataStructure CheckStudentSatisfiesEnrollmentPrerequisitesRequest {}
                Result DataStructure CheckStudentSatisfiesEnrollmentPrerequisitesResult {}
            }
        }
      }
      ResponsibilityDomain StudyGuides
      {
        ServiceContract provideStudyGuide
        {
          PreCondition studentRegistered checks studentIsRegistered isRequiredBy (Shareholder)
          
          Request DataStructure ProvideStudyGuideRequest {}            
          Result DataStructure ProvideStudyGuideRequest {}                     
        }
      }
    }
    ResponsibilityDomain Enrollments
    {
      ResponsibilityDomain PresentationManagement
      {
        ServiceContract enlistStudentForPresentation
        {
          PreCondition studentRegistered checks studentIsRegistered 
            raises StudentNotRegisteredException isRequiredBy (Shareholder)
          Request DataStructure EnlistStudentForPresentationRequest {}
          Result DataStructure EnlistStudentForPresentationResult {}
        }
      }  
      ResponsibilityDomain ProofOfEnrollments
      {
        ServiceContract provideProofOfEnrollment
        {
          PreCondition isRegistered checks studentIsRegistered 
            raises StudentNotRegisteredException isRequiredBy (Shareholder TrainingRegulator)
          Request DataStructure ProvideProofOfEnrollmentRequest {}
          Result DataStructure ProvideProofOfEnrollmentResult {}
        }
      }
      Condition enrollmentPrerequisitesSatisfied OCL:"kjds"
      Exception EnrollmentPrerequisitesNotSatisfiedException {}
      ServiceContract enrollForPresentation
      {
        PreCondition financialPrerequisitesMet checks financialPrerequisitesSatisfied
            raises FinancialPrerequisitesNotSatisfiedException
            isRequiredBy (Shareholder)    
        PreCondition enrollmentPrerequisitesMet checks enrollmentPrerequisitesSatisfied
            raises EnrollmentPrerequisitesNotSatisfiedException
            isRequiredBy (TrainingRegulator Student) 
        PostCondition enrollmentProcessPerformed ensures enrollmentPerformed
            isRequiredBy (Student)    
        PostCondition invoiceIssued ensures invoiceForEnrollmentIssued
            isRequiredBy (Shareholder)    
        Request DataStructure EnrollForPresentationRequest 
        {
                    
        }
        Result DataStructure EnrollForPresentationResult {}
      }
      Service enrollForPresentationImpl realizes enrollForPresentation
      {
        use checkStudentSatisfiesEnrollmentPrerequisites toAddress (enrollmentPrerequisitesMet)
        use issueInvoice toAddress (financialPrerequisitesMet invoiceIssued) 
  //      use performEnrollment toAddress (enrollmentProcessPerformed)
        doSequential
        {
            requestService checkStudentSatisfiesEnrollmentPrerequisites 
                yields checkStudentSatisfiesEnrollmentPrerequisitesResult
            {
                
            }
            choice
            {
                if Condition enrollmentMeetsPrerequisites OCL:"checkStudentSatisfiesEnrollmentPrerequisitesResult."
                    doSequential
                    {
                        requestService issueInvoice
                        {
                            on FinancialPrerequisitesNotSatisfiedException 
                                raiseException FinancialPrerequisitesNotSatisfiedException
                        }
                        requestService performEnrollment
                        {
                        }
                    }
                else
                    raiseException EnrollmentPrerequisitesNotSatisfiedException
                        
            }
        }  
      }
      
      Condition enrollmentPerformed
      ServiceContract performEnrollment
      {
        Request DataStructure PerformEnrollmentRequest {}
        Result DataStructure PerformEnrollmentResult {}
      }
    }
    ResponsibilityDomain RosterManagement
    {
    }
  }
  ResponsibilityDomain Student {}
  ResponsibilityDomain TrainingRegulator {}
  ResponsibilityDomain CreditRegulator {}
  ResponsibilityDomain Shareholder {}
  ResponsibilityDomain Client {}
  
}  
