Model Training

ResponsibilityDomain UrdadStandardProfile
{
  ResponsibilityDomain Primitives
  {
    BasicDataType Boolean
    BasicDataType Integer
    BasicDataType FloatingPointNumber
    BasicDataType Text
    BasicDataType Date
  }
  
  ResponsibilityDomain Storage
  {
    ResponsibilityDomain StorageClient
    {
    }
    DataStructure Entity 
    {
        abstract = true
        has Identification entityIdentification identifying Entity
    }
    
    ServiceContract persistEntity 
    {
      Request DataStructure PersistEntityRequest 
      {
        has Component entity ofType Entity
      }
      Result DataStructure PersistEntityResult
      {
        has Component entity ofType Entity
      } 
    } 
    
    ServiceContract retrieveEntity 
    {
        FunctionalRequirements receiving Variable retrieveEntityRequest ofType RetrieveEntityRequest
            yielding Variable retrieveEntityResult ofType RetrieveEntityResult
        {
            PreCondition entityStored requiredBy (PersistenceClient)
                raises EntityNotStoredException checks Constraint entityIsStored 
                    with Query OCL:"retrieveEntityRequest.entityIdentifier"
                     
        }
        Request DataStructure RetrieveEntityRequest
        {
            has Identification entityIdentification identifying Entity
        }
        Result DataStructure RetrieveEntityResult
        {
            has Component entity ofType Entity
        }
        
    }

    StateConstraint entityIsStored receiving Variable retrieveEntityRequest ofType RetrieveEntityRequest 
    {
        StateAssessmentProcess doSequential
        {
            create Variable entityStored ofType Boolean
            set Query OCL:"entityStored" equalTo Constant "true"
            create Variable retrieveEntityRequest ofType RetrieveEntityRequest
            set Query OCL:"retrieveEntityRequest.entityIdentifier" 
                equalTo Query OCL:"entityIdentifier"
            requestService retrieveEntity with retrieveEntityRequest yielding
                Variable retrieveEntityResult ofType RetrieveEntityResult
                   on EntityNotStoredException set Query OCL:"entityStored" equalTo Constant "false"       
        }        
        Constraint OCL:"entityStored = true"
    }
    InverseConstraint entityIsNotStored inverseOf entityIsStored
    Exception EntityAlreadyStoredException {}
    Exception EntityNotStoredException {}
    
    ServiceContract storeEntity
    {
        FunctionalRequirements receiving Variable storeEntityRequest ofType StoreEntityRequest
            yielding Variable storeEntityResult ofType StoreEntityResult
        {
            PreCondition entityNotStored requiredBy (PersistenceClient)
                raises EntityAlreadyStoredException checks Constraint entityIsNotStored 
                    with Query OCL:"storeEntityRequest.entityIdentifier"
            PostCondition entityStored requiredBy (PersistenceClient)
                ensures Constraint entityIsStored 
                    with Query OCL:"storeEntityRequest.entityIdentifier"
        }
        
        Request DataStructure StoreEntityRequest
        {
            has Component entity ofType Entity
        }
        Result DataStructure StoreEntityResult
        {
            has Component entity ofType Entity
        }
    }
    
    ServiceContract removeEntity
    {
        FunctionalRequirements receiving Variable storeEntityRequest ofType StoreEntityRequest
            yielding Variable storeEntityResult ofType StoreEntityResult
        {
            PreCondition entityNotStored requiredBy (PersistenceClient)
                raises EntityNotStoredException checks Constraint entityIsNotStored 
                    with Query OCL:"retrieveEntityRequest.entityIdentifier"
           PostCondition entityNotStored requiredBy (PersistenceClient)
                ensures Constraint entityIsNotStored 
                    with Query OCL:"storeEntityRequest.entityIdentifier"
        }
        
        Request DataStructure StoreEntityRequest
        {
            has Identification entityIdentification identifying Entity
        }
        Result DataStructure StoreEntityResult
        {
            has Component entity ofType Entity
        }
    }
    
    ResponsibilityDomain PersistenceClient {}
  }
}

ResponsibilityDomain Training
{
  ResponsibilityDomain Student {}
  ResponsibilityDomain TrainingRegulator {}
  ResponsibilityDomain CreditRegulator {}
  ResponsibilityDomain Shareholder {}
  ResponsibilityDomain Client {}
  
  ResponsibilityDomain TrainingInstitution
  {
    ResponsibilityDomain Finance
    {
      Exception NoInvoiceIssuedForEnrollmentException {}
      Exception FinancialPrerequisitesNotSatisfiedException {}
      ServiceContract issueInvoice
      {
        FunctionalRequirements receiving Variable issueInvoiceRequest ofType IssueInvoiceRequest
        {
            PreCondition financialPrerequisitesSatisfied requiredBy (Shareholder) raises FinancialPrerequisitesNotSatisfiedException
        }
        Request DataStructure IssueInvoiceRequest 
        {
            has Identification clientIdentifier identifying LegalEntity
            has many Component invoiceItems ofType InvoiceItem
        }
        Result DataStructure IssueInvoiceResult 
        {
            has Component invoice ofType Invoice
        }
      }
      ServiceContract provideInvoiceForEnrollment
      {
        FunctionalRequirements receiving Variable provideInvoiceForEnrollmentRequest ofType ProvideInvoiceForEnrollmentRequest
        {
            PreCondition invoiceForEnrollmentExists requiredBy (Finance) raises NoInvoiceIssuedForEnrollmentException
        }
        Request DataStructure  ProvideInvoiceForEnrollmentRequest {}
        Result DataStructure ProvideInvoiceForEnrollmentResult {}
      }
      DataStructure Invoice is (Entity)
      {
        has Attribute invoiceNumber ofType Text
        has Attribute invoiceDate ofType Date
        has Component clientDetails ofType LegalEntity
        has Component many invoiceItem ofType InvoiceItem
      }
      DataStructure Chargeable is (Entity) {}
      DataStructure InvoiceItem
      {
        has Attribute cost ofType FloatingPointNumber
        has Attribute quantity ofType Integer
        has Identification chargeableIdentifier identifying Chargeable
      }
    }
    ResponsibilityDomain Academic
    {
      ResponsibilityDomain CourseManagement
      {
        DataStructure Course
        {
            has Attribute name ofType Text
            has many Identification coursePrerequisites identifying Course 
        }
      }
      ResponsibilityDomain PresentationManagement
      {
        DataStructure Location is (Entity)
        {
            has Attribute name ofType Text
            has Component address ofType Address
        }
        DataStructure Presentation is (Chargeable) 
        {
            has Attribute name ofType Text
            has Attribute startDate ofType Date
            has Identification location identifying Location
        }
        ServiceContract checkWhetherEnrollmentConflictsWithStudentRoster
        {
            Request DataStructure CheckWhetherEnrollmentConflictsWithStudentRosterRequest{}
            Result DataStructure CheckWhetherEnrollmentConflictsWithStudentRosterResult{}
        }
      }  
      ResponsibilityDomain Assessment
      {
        Exception StudentDoesNotSatisfyPrerequisitesException {}
        ServiceContract checkStudentSatisfiesCoursePrerequisites
        {
          Request DataStructure CheckStudentSatisfiesCoursePrerequisitesRequest
          {
            has Identification studentIdentifier identifying Person
            has Identification presentationIdentifier identifying Presentation
          }
          Result DataStructure CheckStudentSatisfiesCoursePrerequisitesResult
          {
            abstract = true
            has Attribute prerequisitesSatisfied ofType Boolean
          }
        } 
        ResponsibilityDomain Validation
        {
            ServiceContract checkStudentSatisfiesEnrollmentPrerequisites
            { 
                FunctionalRequirements 
                    receiving Variable checkStudentSatisfiesEnrollmentPrerequisitesRequest 
                        ofType CheckStudentSatisfiesEnrollmentPrerequisitesRequest
                    yielding Variable checkStudentSatisfiesEnrollmentPrerequisitesResult
                        ofType CheckStudentSatisfiesEnrollmentPrerequisitesResult
                {
                    PostCondition ifEnrollmentConflictsWithRosterPrerequisitesNotSatisfied requiredBy (TrainingInstitution) 
                         
                    PostCondition personIdentifierProvided
                        requiredBy (TrainingInstitution)
                    PostCondition ifNotRegisteredPrerequisitesNotSatisfied
                        requiredBy (TrainingInstitution)
                    PostCondition ifCourseConditionsNotSatisfiedEnrollmentConditionsNotSatisfied
                        requiredBy (TrainingRegulator Student)    
                }
                Request DataStructure CheckStudentSatisfiesEnrollmentPrerequisitesRequest 
                {
                    has Identification studentIdentifier identifying Person
                    has Identification presentationIdentifier identifying Presentation
                }
                Result DataStructure CheckStudentSatisfiesEnrollmentPrerequisitesResult
                {
                    abstract = true
                    has Identification personIdentifier identifying Person
                    has Identification presentationIdentifier identifying Presentation
                }
            }
            DataStructure StudentSatisfiesEnrollmentPrerequisites is (CheckStudentSatisfiesEnrollmentPrerequisitesResult){}
            DataStructure StudentDoesNotMeetEnrollmentPrerequisites is (CheckStudentSatisfiesEnrollmentPrerequisitesResult)
            {
                has many Attribute reason ofType Text
            }
            Service checkStudentSatisfiesEnrollmentPrerequisitesImpl realizes checkStudentSatisfiesEnrollmentPrerequisites 
                receiving Variable checkStudentSatisfiesEnrollmentPrerequisitesRequest ofType CheckStudentSatisfiesEnrollmentPrerequisitesRequest
            {
                use provideRegistrationDetails toAddress 
                    (personIdentifierProvided ifNotRegisteredPrerequisitesNotSatisfied)                     
                use checkWhetherEnrollmentConflictsWithStudentRoster toAddress 
                    (ifEnrollmentConflictsWithRosterPrerequisitesNotSatisfied)
                use checkWhetherEnrollmentConflictsWithStudentRoster toAddress (ifEnrollmentConflictsWithRosterPrerequisitesNotSatisfied)                       
                use checkStudentSatisfiesCoursePrerequisites toAddress
                    (ifCourseConditionsNotSatisfiedEnrollmentConditionsNotSatisfied)   
                Process  doSequential
                {
                    create Variable provideRegistrationDetailsRequest ofType ProvideRegistrationDetailsRequest
                    set Query OCL:"provideRegistrationDetailsRequest.personIdentifier" equalTo
                        Query OCL:"checkStudentSatisfiesEnrollmentPrerequisitesRequest.personIdentifier"
                    
                    requestService provideRegistrationDetails with provideRegistrationDetailsRequest
                        yielding Variable provideRegistrationDetailsResult ofType ProvideRegistrationDetailsResult
                    {
                        on PersonNotRegisteredException
                            doSequential
                            {
                                create Variable checkStudentSatisfiesEnrollmentPrerequisitesResult
                                    ofType StudentDoesNotMeetEnrollmentPrerequisites
                                returnResult checkStudentSatisfiesEnrollmentPrerequisitesResult    
                            }
                    }    
                   Concurrency
                   {
                      doConcurrent doSequential 
                      {
                          create Variable checkStudentSatisfiesCoursePrerequisitesRequest
                              ofType CheckStudentSatisfiesCoursePrerequisitesRequest
                          requestService checkStudentSatisfiesCoursePrerequisites
                              with checkStudentSatisfiesCoursePrerequisitesRequest
                              yielding Variable checkStudentSatisfiesCoursePrerequisitesResult
                                  ofType CheckStudentSatisfiesCoursePrerequisitesResult
                      }   
                      doConcurrent doSequential
                      {
                          create Variable checkWhetherEnrollmentConflictsWithStudentRosterRequest ofType
                              CheckWhetherEnrollmentConflictsWithStudentRosterRequest
                          requestService checkWhetherEnrollmentConflictsWithStudentRoster 
                              with checkWhetherEnrollmentConflictsWithStudentRosterResult
                              yielding Variable checkWhetherEnrollmentConflictsWithStudentRosterResult
                                  ofType CheckWhetherEnrollmentConflictsWithStudentRosterResult
                      }
                   }
                        
                   choice
                   {
                      if Constraint OCL:"(checkStudentSatisfiesCoursePrerequisitesResult.prerequisitesSatisfied = true) and 
                            (checkWhetherEnrollmentConflictsWithStudentRosterResult.prerequisitesSatisfied = true)" 
                      doSequential
                      {
                          create Variable checkStudentSatisfiesEnrollmentPrerequisitesResult
                              ofType StudentSatisfiesEnrollmentPrerequisites
                          returnResult checkStudentSatisfiesEnrollmentPrerequisitesResult     
                      }
                      else doSequential
                      {
                        create Variable checkStudentSatisfiesEnrollmentPrerequisitesResult
                          ofType StudentDoesNotMeetEnrollmentPrerequisites
                        if Constraint OCL:"checkStudentSatisfiesCoursePrerequisitesResult.prerequisitesSatisfied = false"
                            doSequential
                            {
                                create Variable reason ofType Text
                                add Constant "Course prerequisites not satisfied." to 
                                    Query OCL:"checkStudentSatisfiesEnrollmentPrerequisitesResult.reasons"  
                            }             
                        if Constraint OCL:"checkWhetherEnrollmentConflictsWithStudentRosterResult.prerequisitesSatisfied = false"
                            doSequential
                            {
                                create Variable reason ofType Text
                                add Constant "Enrollment conflicts with student roster." to
                                    Query OCL:"checkStudentSatisfiesEnrollmentPrerequisitesResult.reasons"  
                            }                                 
                        returnResult checkStudentSatisfiesEnrollmentPrerequisitesResult    
                      }  
                   }
                }       
            }
        }
      }
      ResponsibilityDomain StudyGuides
      {
        DataStructure StudyGuide {}
        ServiceContract provideStudyGuide
        {
            FunctionalRequirements receiving Variable provideStudyGuideRequest ofType ProvideStudyGuideRequest
            {
              PreCondition studentIsRegistered requiredBy (Shareholder) raises PersonNotRegisteredException 
            }
          Request DataStructure ProvideStudyGuideRequest 
          {
            has Identification courseIdentifier identifying Course
            has Identification studentIdentifier identifying Person
          }            
          Result DataStructure ProvideStudyGuideResult 
          {
            has Component studyGuide ofType StudyGuide
          }                     
        }
      }
    }
    ResponsibilityDomain ClientRelationshipManagement
    {
      DataStructure Address
      {
        has many Attribute addressLine ofType Text
      }
      DataStructure LegalEntity is (Entity)
      {
        has Attribute name ofType Text
        has Component legalAddress ofType Address
        (Note en-ZA: "Any party you can bill and take to court, e.g. a person or an organization.")
      }
      DataStructure Organization is (LegalEntity) {}
      DataStructure Person is (LegalEntity) {}
      DataStructure LegalEntityIdentification is (Entity)
      {
        abstract = true
        has Identification issuingOrganization identifying Organization
      } 
      DataStructure CompanyIdentification is (LegalEntityIdentification)
      {
        has Attribute companyRegistrationNumber ofType Text
      }
      
      DataStructure PersonIdentification is (LegalEntityIdentification)
      {
        abstract = true
        has Identification person identifying Person
      } 
      DataStructure Passport is (PersonIdentification)
      {
        has Attribute passportNumber ofType Text
      }
      DataStructure OrganizationMembershipCard is (PersonIdentification)
      {
        has Attribute cardNumber ofType Text
        (Note en-ZA: "For example a student or and employee card")
      }
      StateConstraint personRegistered receiving Variable personIdentifier ofType Person
      {
         
      }
      
      Exception PersonNotRegisteredException {}
      ServiceContract provideRegistrationDetails
      {
        FunctionalRequirements receiving Variable provideRegistrationDetailsResult ofType ProvideRegistrationDetailsResult
        {
            PreCondition personRegistered requiredBy (TrainingInstitution) raises PersonNotRegisteredException
        }
        Request DataStructure ProvideRegistrationDetailsRequest 
        {
            has Identification personIdentifier identifying Person
            has Identification presentation identifying Presentation
        }
        Result DataStructure ProvideRegistrationDetailsResult 
        {
            has Component personDetails ofType Person
        }
      }
      Service provideRegistrationDetails realizes provideRegistrationDetails 
        receiving Variable provideRegistrationDetailsRequest ofType ProvideRegistrationDetailsRequest
      {
        Process doSequential
        {
            create Variable retrieveEntityRequest ofType RetrieveEntityRequest
            set Query OCL:"retrieveEntityRequest.entityIdentifier" equalTo
                Query OCL:"provideRegistrationDetailsRequest.personIdentifier" 
            requestService retrieveEntity with retrieveEntityRequest yielding Variable retrieveEntityResult ofType RetrieveEntityResult
            {
                on EntityNotStoredException raiseException PersonNotRegisteredException
            }
            create Variable provideRegistrationDetailsResult ofType ProvideRegistrationDetailsResult
            set Query OCL:"provideRegistrationDetailsResult.personDetails" equalTo
                Query OCL:"retrieveEntityResult.retrievedEntity"
            returnResult provideRegistrationDetailsResult
        }
      }
    }
    ResponsibilityDomain Enrollments
    {
      ResponsibilityDomain PresentationManagement
      {
        DataStructure PresentationDetails
        {
            has Identification course identifying Course
        }
        ServiceContract enlistStudentForPresentation
        {
            FunctionalRequirements receiving Variable enlistStudentForPresentationRequest ofType EnlistStudentForPresentationRequest
            {
              PreCondition studentIsRegistered requiredBy (Shareholder) raises PersonNotRegisteredException
            }
          Request DataStructure EnlistStudentForPresentationRequest {}
          Result DataStructure EnlistStudentForPresentationResult {}
        }
      }  
      ResponsibilityDomain ProofOfEnrollments
      {
        DataStructure ProofOfEnrollment is (Entity)
        {
            has Component studentDetails ofType Person
            has Component presentationDetails ofType Presentation
        }
        ServiceContract provideProofOfEnrollment
        {
            FunctionalRequirements receiving Variable provideProofOfEnrollmentRequest ofType ProvideProofOfEnrollmentRequest
            {
              PreCondition studentIsRegistered requiredBy (Shareholder TrainingRegulator) raises PersonNotRegisteredException
            
            }
          Request DataStructure ProvideProofOfEnrollmentRequest {}
          Result DataStructure ProvideProofOfEnrollmentResult {}
        }
      }
      
      ServiceContract getEnrollments
      {
        Request DataStructure GetEnrollmentsRequest {}
        Result DataStructure GetEnrollmentsResult {}  
      }
      
      StateConstraint enrollmentPrerequisitesForPresentationMet {}      
      
      StateConstraint studentEnrolledForPresentation 
        receiving Variable studentEnrolledRequest ofType StudentEnrolledRequest
      {
        Parameter DataStructure StudentEnrolledRequest
        {
            has Identification presentationIdentifier identifying Presentation
            has Identification studentIdentifier identifying Person
        }
        StateAssessmentProcess doSequential
        {
            create Variable getEnrollmentsRequest ofType GetEnrollmentsRequest
            set Query OCL:"getEnrollmentsRequest.presentationIdentifier" equalTo
                Query OCL:"enrollForPresentationRequest.presentationIdentifier"
            requestService getEnrollments with getEnrollmentsRequest yielding
                Variable getEnrollmentsResult ofType GetEnrollmentsResult
        }
        Constraint OCL:"getEnrollmentsResult.enrollments.includes(enrollForPresentationRequest.personIdentifier)"
      }
      
      Exception EnrollmentPrerequisitesNotSatisfiedException {}
      ServiceContract enrollForPresentation
      {
        FunctionalRequirements receiving Variable enrollForPresentationRequest ofType EnrollForPresentationRequest
        {
            PreCondition financialPrerequisitesMet
                requiredBy (Shareholder)    
                raises FinancialPrerequisitesNotSatisfiedException
            PreCondition enrollmentPrerequisitesMet
                requiredBy (TrainingRegulator Student) 
                raises EnrollmentPrerequisitesNotSatisfiedException
                checks Constraint enrollmentPrerequisitesForPresentationMet
                with valueOf enrollForPresentationRequest
            PostCondition enrollmentProcessPerformed
                requiredBy (Student Client TrainingRegulator)
                ensures Constraint studentEnrolledForPresentation 
                with valueOf studentEnrolledRequest constructedUsing doSequential
                {
                  create Variable studentEnrolledRequest ofType StudentEnrolledRequest
                  set Query OCL:"studentEnrolledRequest.personIdentifier" equalTo
                      Query OCL:"enrollForPresentationRequest.personIdentifier"                            
                  set Query OCL:"studentEnrolledRequest.presentationIdentifier" equalTo
                      Query OCL:"enrollForPresentationRequest.presentationIdentifier"                            
                }  
                    
            PostCondition invoiceIssued
                requiredBy (Shareholder Client CreditRegulator)    
        }
        Request DataStructure EnrollForPresentationRequest 
        {
            has Identification presentationIdentifier identifying Presentation
            has Identification studentIdentifier identifying Person
            has Component clientIdentifier ofType LegalEntity         
        }
        Result DataStructure EnrollForPresentationResult 
        {
            has Component proofOfEnrollment ofType ProofOfEnrollment
            has Component invoice ofType Invoice
            has Component studyGuide ofType StudyGuide
        }
      }
      
      Service enrollForPresentationImpl realizes enrollForPresentation 
        receiving Variable enrollForPresentationRequest ofType EnrollForPresentationRequest
      {
        use checkStudentSatisfiesEnrollmentPrerequisites toAddress (enrollmentPrerequisitesMet)
        use issueInvoice toAddress (financialPrerequisitesSatisfied invoiceIssued) 
        use performEnrollment toAddress (invoiceIssued)
        Process doSequential
        {
            create Variable checkStudentSatisfiesEnrollmentPrerequisitesRequest 
                ofType CheckStudentSatisfiesEnrollmentPrerequisitesRequest               
            set Query OCL:"enrollForPresentationRequest.studentIdentifier" equalTo 
                Query OCL:"checkEnrollmentPrerequisitesRequest.studentIdentifier"
            set Query OCL:"enrollForPresentationRequest.presentationIdentifier" equalTo
                Query OCL:"checkEnrollmentPrerequisitesRequest.presentationIdentifier"
                     
            requestService checkStudentSatisfiesEnrollmentPrerequisites 
                with checkStudentSatisfiesEnrollmentPrerequisitesRequest 
                yielding Variable checkStudentSatisfiesEnrollmentPrerequisitesResult
                    ofType CheckStudentSatisfiesEnrollmentPrerequisitesResult
            choice
            {
                if Constraint enrollmentMeetsPrerequisitesMet 
                    OCL:"checkStudentSatisfiesEnrollmentPrerequisitesResult.enrollmentPrerequisitesMet = true"
                    doSequential
                    {
                        create Variable issueInvoiceRequest ofType IssueInvoiceRequest
                        set Query OCL:"enrollForPresentationRequest.clientIdentifier" equalTo 
                            Query OCL:"issueInvoiceRequest.clientIdentifier"                            
                        create Variable invoiceItem ofType InvoiceItem    
                        set Query OCL:"enrollForPresentationRequest.presentationIdentifier" equalTo
                            Query OCL:"invoiceItem.chargeableIdentifier"
                        add Query OCL:"invoiceItem" to
                            Query OCL:"issueInvoiceRequest.invoiceItems"    
                                 
                        requestService issueInvoice with issueInvoiceRequest 
                            yielding Variable issueInvoiceResult ofType IssueInvoiceResult
                        {
                            on FinancialPrerequisitesNotSatisfiedException 
                                raiseException FinancialPrerequisitesNotSatisfiedException
                        }
                        
                        create Variable enrollRequest ofType PerformEnrollmentRequest 
                        set Query OCL:"checkStudentSatisfiesEnrollmentPrerequisitesResult.personIdentifier" equalTo
                            Query OCL:"performEnrollmentRequest.personIdentifier"
                        set Query OCL:"enrollForPresentationRequest.presentationIdentifier" equalTo
                            Query OCL:"performEnrollmentRequest.presentationIdentifier"    
                        requestService performEnrollment with enrollRequest 
                            yielding Variable performEnrollmentResult ofType PerformEnrollmentResult
                        create Variable enrollForPresentationResult ofType EnrollForPresentationResult
                        set Query OCL:"issueInvoiceResult.invoice" equalTo
                            Query OCL:"enrollForPresentationResult.invoice"
                        set Query OCL:"performEnrollmentResult.enrollmentConfirmation" equalTo
                            Query OCL:"enrollForPresentationResult.enrollmentConfirmation"
                        set Query OCL:"performEnrollmentResult.studyGuide" equalTo
                            Query OCL:"enrollForPresentationResult.studyGuide"    
                        returnResult  enrollForPresentationResult
                    }
                else
                    raiseException EnrollmentPrerequisitesNotSatisfiedException
            }
        }  
      }
      
      ServiceContract performEnrollment
      {
        Request DataStructure PerformEnrollmentRequest 
        {
            has Identification presentationIdentifier identifying Presentation
            has Identification personIdentifier identifying Person
        }
        Result DataStructure PerformEnrollmentResult 
        {
            has Component enrollmentConfirmation ofType ProofOfEnrollment
            has Component studyGuide ofType StudyGuide
        }
      }
    } 
  }
}  