Model Training
ResponsibilityDomain Training
{
	ResponsibilityDomain primitives
	{
		BasicDataType String
		BasicDataType Integer
		BasicDataType FloatingPointNumber
		BasicDataType Date
	}
	ResponsibilityDomain TrainingInstitution
	{
		ResponsibilityDomain ClientRelationshipManagement
		{
			Condition StudentIsRegistered OCL:"provideRegistrationDetails(#provideRegistrationDetailsRequest) <> NULL"
				raises Exception StudentNotRegisteredException {}
			ServiceContract provideRegistrationDetails
			{
				Request DataStructure ProvideRegistrationDetailsRequest {}
				Result DataStructure ProvideRegistrationDetailsResult {}
			}
		}
		ResponsibilityDomain Academic
		{
			ResponsibilityDomain Assessment
			{
				
				ServiceContract checkStudentSatisfiesCoursePrerequisites
				{
				  PreCondition isRegistered checks StudentIsRegistered isRequiredBy (Assessment)
				  
				  Request DataStructure StudentSatisfiesCoursePrerequisitesRequest
				  {
				  }
				  Result DataStructure StudentSatisfiesCoursePrerequisitesResult
				  {
				  } 
				} 
				 
			}
		}
		ResponsibilityDomain Enrollment
		{
			ResponsibilityDomain Validation
			{
				Condition enrollmentMeetsPrerequisites raises Exception EnrollmentPrerequisitesNotMetException {}
				ServiceContract checkStudentSatisfiesEnrollmentPrerequisites
				{
					Request DataStructure CheckStudentSatisfiesEnrollmentPrerequisitesRequest {}
					Result DataStructure CheckStudentSatisfiesEnrollmentPrerequisitesResult{}
				}
			}
			
			ServiceContract enrollForPresentation
			{
				PreCondition prerequisitsMet checks enrollmentMeetsPrerequisites isRequiredBy (Student TrainingRegulator)
				PreCondition financialPrerequisitesMet checks financialPrerequisitesSatisfied 
					isRequiredBy (Shareholder)
				PostCondition invoiceForEnrollmentIssued ensures invoiceIssued isRequiredBy (Shareholder)
				PostCondition studentEnrolled ensures studentEnrolledForPresentation isRequiredBy (Student Client)
				Request DataStructure EnrollForPresentationRequest {}
				Result DataStructure EnrollForPresentationResult {}
			}
			
			Service enrollForPresentationImpl realizes enrollForPresentation 
			{
				use checkStudentSatisfiesCoursePrerequisites toAddress (prerequisitsMet)
				use issueInvoice toAddress (invoiceForEnrollmentIssued financialPrerequisitesMet)
				use performEnrollment toAddress (studentEnrolled)
				Process doSequential
				{
					requestService checkStudentSatisfiesCoursePrerequisites
					ifNot enrollmentMeetsPrerequisites
						do raiseException EnrollmentPrerequisitesNotMetException
					requestService issueInvoice 
						handleException FinancialNotPrerequisitesSatisfiedException 
							via raiseException FinancialNotPrerequisitesSatisfiedException
					requestService performEnrollment 	
					returnResult 
				}
			}
			
			Condition studentEnrolledForPresentation raises Exception StudentNotEnrolledForPresentationException {}
			ServiceContract performEnrollment
			{
				Request DataStructure performEnrollmentRequest {}
				Result DataStructure performEnrollmentResult {}
			}
		}

		ResponsibilityDomain Finance
		{
			Condition invoiceIssued raises Exception NoInvoiceIssuedException {}
			Condition financialPrerequisitesSatisfied raises Exception FinancialNotPrerequisitesSatisfiedException {}
			ServiceContract issueInvoice
			{
				PreCondition financialPrerequisitesMet checks financialPrerequisitesSatisfied isRequiredBy ()
				Request DataStructure IssueInvoiceRequest {}
				Result DataStructure IssueInvoiceResult {}
			}
		}
	}	
	ResponsibilityDomain Student {}
	ResponsibilityDomain TrainingRegulator {}
	ResponsibilityDomain Shareholder {}
	ResponsibilityDomain Client {}
}