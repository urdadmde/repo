Model Training

ResponsibilityDomain Training
{

  
  ResponsibilityDomain TrainingInstitution
  {
    ResponsibilityDomain Academic
    {
      ResponsibilityDomain CourseManagement
      {
        DataStructure Course
        {
            has attribute name ofType String
            has many association coursePrerequisite ofType Course 
        }
      }
      ResponsibilityDomain Assessment
      {
        Exception StudentDoesNotSatisfyPrerequisitesException {}
        ServiceContract checkStudentSatisfiesCoursePrerequisites
        {
        
          PreCondition studentRegistered checks personIsRegistered 
            raises PersonNotRegisteredException isRequiredBy (Shareholder)
          
          Request DataStructure CheckStudentSatisfiesCoursePrerequisitesRequest
          {
            has component studentIdentification ofType PersonIdentification
            has association presentation ofType Presentation
          }
          Result DataStructure CheckStudentSatisfiesCoursePrerequisitesResult
          {
            has attribute prerequisitesSatisfied ofType Boolean
          } 
        } 
        ResponsibilityDomain Validation
        {
            ServiceContract checkStudentSatisfiesEnrollmentPrerequisites
            {
                Request DataStructure CheckStudentSatisfiesEnrollmentPrerequisitesRequest 
                {
                    has component studentIdentification ofType PersonIdentification
                    has association presentationIdentifier ofType Presentation
                }
                Result DataStructure CheckStudentSatisfiesEnrollmentPrerequisitesResult 
                {
                    has attribute enrollmentPrerequisitesMet ofType Boolean
                    has association personIdentifier ofType Person
                    has association presentationIdentifier ofType Presentation
                }
            }
        }
      }
      ResponsibilityDomain StudyGuides
      {
        DataStructure StudyGuide {}
        ServiceContract provideStudyGuide
        {
          PreCondition studentIsRegistered checks personIsRegistered isRequiredBy (Shareholder)
          
          Request DataStructure ProvideStudyGuideRequest {}            
          Result DataStructure ProvideStudyGuideRequest {}                     
        }
      }
    }
    ResponsibilityDomain ClientRelationshipManagement
    {
      DataStructure LegalEntity is Entity
      {
        has attribute name ofType String
        has component legalAddress ofType Address
        (Note en-ZA: "Any party you can bill and take to court, e.g. a person or an organization.")
      }
      DataStructure Organization is LegalEntity {}
      DataStructure Identification is Entity
      {
        abstract = true
        has association issuingOrganization ofType Organization
      } 
      DataStructure CompanyIdentification is Identification
      {
        has attribute companyRegistrationNumber ofType String
      }
      DataStructure Address
      {
        has many attribute addressLine ofType String
      }
      DataStructure PersonIdentification is Identification
      {
        abstract = true
        has association person ofType Person
      } 
      DataStructure Passport is PersonIdentification
      {
        has attribute passportNumber ofType String
      }
      DataStructure OrganizationMemberCard is PersonIdentification
      {
        has attribute cardNumber ofType String
        (Note en-ZA: "For example a student or and employee card")
      }
      DataStructure Person is LegalEntity
      {
        has attribute name ofType String
      }
      Condition personIsRegistered OCL:"provideRegistrationDetails(#provideRegistrationDetailsRequest) <> NULL"
      Exception PersonNotRegisteredException {}
      ServiceContract provideRegistrationDetails
      {
        Request DataStructure ProvideRegistrationDetailsRequest 
        {
            has component personIdentification ofType PersonIdentification
            has association presentation ofType Presentation
        }
        Result DataStructure ProvideRegistrationDetailsResult 
        {
            has component personDetails ofType Person
        }
      }
    }
    ResponsibilityDomain Finance
    {
      Condition invoiceForEnrollmentIssued
      Exception NoInvoiceIssuedForEnrollmentException {}
      Condition financialPrerequisitesSatisfied 
      Exception FinancialPrerequisitesNotSatisfiedException {}
      ServiceContract issueInvoice
      {
        PreCondition financialPrerequisitesMet checks financialPrerequisitesSatisfied isRequiredBy ()
        Request DataStructure IssueInvoiceRequest 
        {
            has component clientIdentification ofType Identification
            has many component invoiceItems ofType InvoiceItem
        }
        Result DataStructure IssueInvoiceResult 
        {
            has component invoice ofType Invoice
        }
      }
      ServiceContract provideInvoiceForEnrollment
      {
        PreCondition invoiceForEnrollmentExists checks invoiceForEnrollmentIssued 
            raises NoInvoiceIssuedForEnrollmentException isRequiredBy (Finance)
        Request DataStructure  ProvideInvoiceForEnrollmentRequest {}
        Result DataStructure ProvideInvoiceForEnrollmentResult {}
      }
      DataStructure Invoice is Entity
      {
        has attribute invoiceNumber ofType String
        has attribute invoiceDate ofType Date
        has component clientDetails ofType LegalEntity
        has component many invoiceItem ofType InvoiceItem
      }
      DataStructure Chargeable is Entity {}
      DataStructure InvoiceItem
      {
        has attribute cost ofType FloatingPointNumber
        has attribute quantity ofType Integer
        has association chargeableIdentifier ofType Chargeable
      }
    }
    ResponsibilityDomain PresentationManagement
    {
        DataStructure Location is Entity
        {
            has attribute name ofType String
            has component address ofType Address
        }
        DataStructure Presentation is Chargeable 
        {
            has attribute name ofType String
            has attribute startDate ofType Date
            has association location ofType Location
        }
    }  
    ResponsibilityDomain Enrollments
    {
      ResponsibilityDomain PresentationManagement
      {
        DataStructure PresentationDetails
        {
            has association course ofType Course
        }
        ServiceContract enlistStudentForPresentation
        {
          PreCondition studentIsRegistered checks personIsRegistered 
            raises PersonNotRegisteredException isRequiredBy (Shareholder)
          Request DataStructure EnlistStudentForPresentationRequest {}
          Result DataStructure EnlistStudentForPresentationResult {}
        }
      }  
      ResponsibilityDomain ProofOfEnrollments
      {
        DataStructure EnrollmentConfirmation is Entity
        {
            has component studentDetails ofType Person
            has component presentationDetails ofType Presentation
        }
        ServiceContract provideProofOfEnrollment
        {
          PreCondition studentIsRegistered checks personIsRegistered 
            raises PersonNotRegisteredException isRequiredBy (Shareholder TrainingRegulator)
          Request DataStructure ProvideProofOfEnrollmentRequest {}
          Result DataStructure ProvideProofOfEnrollmentResult {}
        }
      }
      Condition enrollmentPrerequisitesSatisfied OCL:""
      Exception EnrollmentPrerequisitesNotSatisfiedException {}
      ServiceContract enrollForPresentation
      {
        PreCondition financialPrerequisitesMet checks financialPrerequisitesSatisfied
            raises FinancialPrerequisitesNotSatisfiedException
            isRequiredBy (Shareholder)    
        PreCondition enrollmentPrerequisitesMet checks enrollmentPrerequisitesSatisfied
            raises EnrollmentPrerequisitesNotSatisfiedException
            isRequiredBy (TrainingRegulator Student) 
        PostCondition enrollmentProcessPerformed ensures enrollmentPerformed
            isRequiredBy (Student)    
        PostCondition invoiceIssued ensures invoiceForEnrollmentIssued
            isRequiredBy (Shareholder)    
        Request DataStructure EnrollForPresentationRequest 
        {
            has association presentationIdentifier ofType Presentation
            has component studentIdentification ofType PersonIdentification
            has component payerIdentification ofType Identification         
        }
        Result DataStructure EnrollForPresentationResult 
        {
            has component enrollmentConfirmation ofType EnrollmentConfirmation
            has component invoice ofType Invoice
            has many component studyGuide ofType StudyGuide
        }
      }
      Service enrollForPresentationImpl realizes enrollForPresentation
      {
        use checkStudentSatisfiesEnrollmentPrerequisites toAddress (enrollmentPrerequisitesMet)
        use issueInvoice toAddress (financialPrerequisitesMet invoiceIssued) 
        use performEnrollment toAddress (enrollmentProcessPerformed)
        doSequential
        {
            create checkPrerequisitesRequest ofType CheckStudentSatisfiesEnrollmentPrerequisitesRequest
            assign Query studentDetailsSource OCL:"enrollForPresentationRequest.studentIdentification" to 
                Query studentDetailsTarget OCL:"checkEnrollmentPrerequisitesRequest.studentIdentification"
            assign Query presentationIdentifierSource OCL:"enrollForPresentationRequest.presentationIdentifier" to
                Query presentationIdentifierTarget OCL:"checkEnrollmentPrerequisitesRequest.presentationIdentifier"     
            requestService checkStudentSatisfiesEnrollmentPrerequisites 
                yields checkPrerequisitesResult
            {
                Constraint populateRequest OCL:"checkPrerequisitesRequest = checkEnrollmentPrerequisitesRequest"
            }
            choice
            {
                if Condition enrollmentMeetsPrerequisitesMet 
                    OCL:"checkStudentSatisfiesEnrollmentPrerequisitesResult.enrollmentPrerequisitesMet = true"
                    doSequential
                    {
                        create invoiceRequest ofType IssueInvoiceRequest
                        assign Query clientIdentificationSource OCL: "enrollForPresentationRequest.payerIdentification" to 
                            Query clientIdentificationTarget OCL:"issueInvoiceRequest.clientIdentifier"
                        create invoiceItem ofType InvoiceItem    
			            assign Query presentationIdentifierSource OCL:"enrollForPresentationRequest.presentationIdentifier" to
			                Query presentationIdentifierTarget OCL:"invoiceItem.chargeableIdentifier"
			            add Query invoiceItemSource OCL:"invoiceItem" to
			                Query invoiceItemTarger OCL:"issueInvoiceRequest.invoiceItems"         
                        requestService issueInvoice yields issueInvoiceResult
                        {
                            Constraint populateRequest OCL:"issueInvoiceRequest = invoiceRequest"     
                            on FinancialPrerequisitesNotSatisfiedException 
                                raiseException FinancialPrerequisitesNotSatisfiedException
                                {
                                }
                        }
                        create enrollRequest ofType PerformEnrollmentRequest 
                        assign Query personIdentifierSource OCL:"checkPrerequisitesResult.personIdentifier" to
                            Query personIdentierTarget OCL:"perfordmEnrollmentRequest.personIdentifier"
                        assign Query presentationIdentifierSource OCL:"enrollmentRequest.presentationIdentifier" to
                            Query presentationIdentifierTarget OCL:"performEnrollmentRequest.presentationIdentifier"    
                        requestService performEnrollment yields performEnrollmentResult
                        {
                           Constraint populateRequest OCL:"performEnrollmentRequest = enrollRequest"                            
                        }
                        create enrollmentResult ofType EnrollForPresentationResult
                        assign Query invoiceSource OCL:"issueInvoiceResult.invoice" to
                            Query invoiceTarget OCL:"enrollmentResult.invoice"
                        assign Query enrollmentConfirmationSource OCL:"performEnrollmentResult.enrollmentCOnfirmation" to
                            Query enrollmentConfirmationTarget OCL:"enrollmentResult.enrollmentConfirmation"
                        assign Query studyGuidesSource OCL:"performEnrollmentResult.sudyGuides" to
                            Query studyGuidesTarget OCL:"enrollmentResult.studyGuides"    
                        returnResult 
                        {
                            Constraint resultContainsInvoiceConstraint OCL:
                                "enrollForPresentationResult = enrollmentResult"                     
                        } 
                    }
                else
                    raiseException EnrollmentPrerequisitesNotSatisfiedException
                        
            }
        }  
      }
      
      Condition enrollmentPerformed
      ServiceContract performEnrollment
      {
        Request DataStructure PerformEnrollmentRequest 
        {
            has association presentationIdentifier ofType Presentation
            has association personIdentifier ofType Person
        }
        Result DataStructure PerformEnrollmentResult 
        {
            has component enrollmentConfirmation ofType EnrollmentConfirmation
            has many component studyGuides ofType StudyGuide
        }
      }
    }
    
  }
  ResponsibilityDomain Student {}
  ResponsibilityDomain TrainingRegulator {}
  ResponsibilityDomain CreditRegulator {}
  ResponsibilityDomain Shareholder {}
  ResponsibilityDomain Client {}
  
}  
ResponsibilityDomain urdadStandardProfile
{
  ResponsibilityDomain Primitives
  {
    BasicDataType Boolean
    BasicDataType Integer
    BasicDataType FloatingPointNumber
    BasicDataType String
    BasicDataType Date
    BasicDataType URI
    
    DataStructure Object { abstract = true }
  }
  ResponsibilityDomain Collections
  {
    DataStructure Collection 
    {
        has association elementType ofType Object  
    }
    DataStructure  List is Collection {}
    ServiceContract addObjectToCollection
    {
        Request DataStructure AddObjectToCollectionRequest
        {
            has component objectToAdd ofType Object
            has association collectionToAddTo ofType Collection
        }
        Result DataStructure AddObjectToCollectionResult {}
    }
    ServiceContract removeObjectFromCollection
    {
        Request DataStructure RemoveObjectFromCollectionRequest
        {
            has component objectToRemove ofType Object
            has association collectionToRemoveFrom ofType Collection
        }
        Result DataStructure RemoveObjectFromCollectionResult {}
    }
    ServiceContract provideObjectAtIndex
    {
        Request DataStructure ProvideObjectAtIndexRequest
        {
            has component objectToRemove ofType Object
            has association collectionToRemoveFrom ofType Collection
        }
        Result DataStructure RemoveObjectFromCollectionResult {}
    }
  }
  ResponsibilityDomain Storage
  {
    ResponsibilityDomain StorageClient
    {
    }
    DataStructure Entity is Object 
    {
        abstract = true
        has attribute identifier ofType Integer 
    }
    
    Condition EntityNotStored
    Condition EntityStored
    Exception EntityAlreadyStoredException {}
    Exception EntityNotStoredException {}
    ServiceContract storeEntity
    {
        PreCondition entityNotYetStored checks EntityNotStored 
            raises EntityAlreadyStoredException isRequiredBy (StorageClient)
        Request DataStructure StoreEntityRequest
        {
            has component entityToPersist ofType Entity
        }
        Result DataStructure StoreEntityResult
        {
            has component persistedEntity ofType Entity
        }
    }
    ServiceContract retrieveEntity
    {
        PreCondition entityStored checks EntityStored 
            raises EntityNotStoredException isRequiredBy (StorageClient)
        Request DataStructure RetrieveEntityRequest
        {
            has attribute entityIdentifier ofType Integer
        }
        Result DataStructure RetrieveEntityResult
        {
            has component retrievedEntity ofType Entity
        }
    }
    ServiceContract removeEntity
    {
        Request DataStructure RemoveEntityRequest
        {
            has attribute entityIdentifier ofType Integer
        }
        Result DataStructure RemoveEntityResult
        {
        }
    }
    ServiceContract updateEntity
    {
        PreCondition entityNotStored checks EntityNotStored 
            raises EntityNotStoredException isRequiredBy (StorageClient)
        Request DataStructure UpdateEntityRequest
        {
            has component newEntityState ofType Entity
        }
        Result DataStructure UpdateEntityResult
        {
            has component persistedEntity ofType Entity
        }
    }
    DataStructure StorageQuery
    {
        has attribute queryLanguage ofType URI
        has attribute queryExpression ofType String 
    }
    ServiceContract findEntities
    {
        Request DataStructure FindEntitiesRequest
        {
            has component query ofType StorageQuery
        }
        Result DataStructure ResultList is List
        {}
    }
  }
}
