// automatically generated by Xtext
grammar org.urdad.UrdadDsl with org.eclipse.xtext.common.Terminals 

import "file:///home/fritz/solmsRoot/resources/information/methodology/urdad/metaModel/org.urdad.urdad.metamodel/model/urdad.ecore"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

ResponsibilityDomain returns ResponsibilityDomain:
	{ResponsibilityDomain}
	'ResponsibilityDomain'
	name=EString
	'{'
		('annotations' '{' annotations+=EAnnotation ( "," annotations+=EAnnotation)* '}' )?
		('elements' '{' elements+=Element ( "," elements+=Element)* '}' )?
    '}';


Element returns Element:
	Role_Impl | ResponsibilityDomain | Constraint_Impl | RangeMultiplicityConstraint | BasicDataType | DataStructure_Impl | Exception | Attribute | Association_Impl | Aggregation_Impl | Composition | QualityRequirement | PreCondition | PostCondition | Service | Process | BackgroundActivity | ActivitySequence | ConcurrentActivities | Switch | While | ConditionalActivity_Impl | PreConditionActivity_Impl | PostConditionActivity_Impl | PrePostConditionActivity | ReturnResultActivity;

Expression returns Expression:
	Expression_Impl | BooleanExpression;

DataStructure returns DataStructure:
	DataStructure_Impl | Exception;

Association returns Association:
	Association_Impl | Aggregation_Impl | Composition;

MultiplicityConstraint returns MultiplicityConstraint:
	RangeMultiplicityConstraint;

Role returns Role:
	Role_Impl | Service;

Activity returns Activity:
	Process | BackgroundActivity | ActivitySequence | ConcurrentActivities | Switch | While | ConditionalActivity_Impl | PreConditionActivity_Impl | PostConditionActivity_Impl | PrePostConditionActivity | ReturnResultActivity;

ConditionalActivity returns ConditionalActivity:
	ConditionalActivity_Impl | While;

Constraint returns Constraint:
	Constraint_Impl | QualityRequirement | PreCondition | PostCondition;

EAnnotation returns ecore::EAnnotation:
	{ecore::EAnnotation}
	'EAnnotation'
	'{'
		('source' source=EString)?
		('references' '(' references+=[ecore::EObject|EString] ( "," references+=[ecore::EObject|EString])* ')' )?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('details' '{' details+=EStringToStringMapEntry ( "," details+=EStringToStringMapEntry)* '}' )?
		('contents' '{' contents+=EObject ( "," contents+=EObject)* '}' )?
    '}';

EString returns ecore::EString:
	STRING | ID;

EStringToStringMapEntry returns ecore::EStringToStringMapEntry:
	{ecore::EStringToStringMapEntry}
	'EStringToStringMapEntry'
	'{'
		('key' key=EString)?
		('value' value=EString)?
    '}';

EObject returns ecore::EObject:
	{ecore::EObject}
	'EObject'
;

Role_Impl returns Role:
	{Role}
	'Role'
	name=EString
	'{'
		('annotations' '{' annotations+=EAnnotation ( "," annotations+=EAnnotation)* '}' )?
    '}';

Constraint_Impl returns Constraint:
	{Constraint}
	'Constraint'
	name=EString
	'{'
		('annotations' '{' annotations+=EAnnotation ( "," annotations+=EAnnotation)* '}' )?
		('constraintExpression' constraintExpression=Expression)?
    '}';

RangeMultiplicityConstraint returns RangeMultiplicityConstraint:
	'RangeMultiplicityConstraint'
	'{'
		'minOccurs' minOccurs=EBigInteger
		'maxOccurs' maxOccurs=EBigInteger
		('annotations' '{' annotations+=EAnnotation ( "," annotations+=EAnnotation)* '}' )?
    '}';

BasicDataType returns BasicDataType:
	{BasicDataType}
	'BasicDataType'
	name=EString
	'{'
		('annotations' '{' annotations+=EAnnotation ( "," annotations+=EAnnotation)* '}' )?
    '}';

DataStructure_Impl returns DataStructure:
	{DataStructure}
	'DataStructure'
	name=EString
	'{'
		('superType' superType=[DataStructure|EString])?
		('annotations' '{' annotations+=EAnnotation ( "," annotations+=EAnnotation)* '}' )?
		('attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
		('associations' '{' associations+=Association ( "," associations+=Association)* '}' )?
    '}';

Exception returns Exception:
	{Exception}
	'Exception'
	name=EString
	'{'
		('superType' superType=[DataStructure|EString])?
		('annotations' '{' annotations+=EAnnotation ( "," annotations+=EAnnotation)* '}' )?
		('attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
		('associations' '{' associations+=Association ( "," associations+=Association)* '}' )?
    '}';

Attribute returns Attribute:
	{Attribute}
	'Attribute'
	name=EString
	'{'
		('type' type=[BasicDataType|EString])?
		('annotations' '{' annotations+=EAnnotation ( "," annotations+=EAnnotation)* '}' )?
    '}';

Association_Impl returns Association:
	'Association'
	name=EString
	'{'
		'relatedType' relatedType=[DataStructure|EString]
		('annotations' '{' annotations+=EAnnotation ( "," annotations+=EAnnotation)* '}' )?
		('multiplicityConstraint' multiplicityConstraint=MultiplicityConstraint)?
    '}';

Aggregation_Impl returns Aggregation:
	'Aggregation'
	name=EString
	'{'
		'relatedType' relatedType=[DataStructure|EString]
		('annotations' '{' annotations+=EAnnotation ( "," annotations+=EAnnotation)* '}' )?
		('multiplicityConstraint' multiplicityConstraint=MultiplicityConstraint)?
    '}';

Composition returns Composition:
	'Composition'
	name=EString
	'{'
		'relatedType' relatedType=[DataStructure|EString]
		('annotations' '{' annotations+=EAnnotation ( "," annotations+=EAnnotation)* '}' )?
		('multiplicityConstraint' multiplicityConstraint=MultiplicityConstraint)?
    '}';

QualityRequirement returns QualityRequirement:
	{QualityRequirement}
	'QualityRequirement'
	name=EString
	'{'
		('requiredBy' '(' requiredBy+=[Role|EString] ( "," requiredBy+=[Role|EString])* ')' )?
		('annotations' '{' annotations+=EAnnotation ( "," annotations+=EAnnotation)* '}' )?
		('constraintExpression' constraintExpression=Expression)?
    '}';

PreCondition returns PreCondition:
	'PreCondition'
	name=EString
	'{'
		('requiredBy' '(' requiredBy+=[Role|EString] ( "," requiredBy+=[Role|EString])* ')' )?
		'requiredService' requiredService=[Service|EString]
		'exception' exception=[Exception|EString]
		('annotations' '{' annotations+=EAnnotation ( "," annotations+=EAnnotation)* '}' )?
		('constraintExpression' constraintExpression=Expression)?
    '}';

PostCondition returns PostCondition:
	'PostCondition'
	name=EString
	'{'
		('requiredBy' '(' requiredBy+=[Role|EString] ( "," requiredBy+=[Role|EString])* ')' )?
		'requiredService' requiredService=[Service|EString]
		('inverseService' inverseService=[Service|EString])?
		('annotations' '{' annotations+=EAnnotation ( "," annotations+=EAnnotation)* '}' )?
		('constraintExpression' constraintExpression=Expression)?
    '}';

Service returns Service:
	'Service'
	name=EString
	'{'
		('qualityRequirements' '(' qualityRequirements+=[QualityRequirement|EString] ( "," qualityRequirements+=[QualityRequirement|EString])* ')' )?
		('annotations' '{' annotations+=EAnnotation ( "," annotations+=EAnnotation)* '}' )?
		'request' request=DataStructure
		('result' result=DataStructure)?
		('preConditions' '{' preConditions+=PreCondition ( "," preConditions+=PreCondition)* '}' )?
		('postConditions' '{' postConditions+=PostCondition ( "," postConditions+=PostCondition)* '}' )?
    '}';

Process returns Process:
	'Process'
	'{'
		'serviceRealized' serviceRealized=[Service|EString]
		('annotations' '{' annotations+=EAnnotation ( "," annotations+=EAnnotation)* '}' )?
		'processActivity' processActivity=Activity
    '}';

BackgroundActivity returns BackgroundActivity:
	{BackgroundActivity}
	'BackgroundActivity'
	'{'
		('annotations' '{' annotations+=EAnnotation ( "," annotations+=EAnnotation)* '}' )?
    '}';

ActivitySequence returns ActivitySequence:
	{ActivitySequence}
	'ActivitySequence'
	'{'
		('annotations' '{' annotations+=EAnnotation ( "," annotations+=EAnnotation)* '}' )?
		('activities' '{' activities+=Activity ( "," activities+=Activity)* '}' )?
    '}';

ConcurrentActivities returns ConcurrentActivities:
	{ConcurrentActivities}
	'ConcurrentActivities'
	'{'
		('annotations' '{' annotations+=EAnnotation ( "," annotations+=EAnnotation)* '}' )?
		('activities' '{' activities+=Activity ( "," activities+=Activity)* '}' )?
    '}';

Switch returns Switch:
	{Switch}
	'Switch'
	'{'
		('annotations' '{' annotations+=EAnnotation ( "," annotations+=EAnnotation)* '}' )?
		('conditionalActivities' '{' conditionalActivities+=ConditionalActivity ( "," conditionalActivities+=ConditionalActivity)* '}' )?
    '}';

While returns While:
	'While'
	'{'
		('annotations' '{' annotations+=EAnnotation ( "," annotations+=EAnnotation)* '}' )?
		'condition' condition=BooleanExpression
		'activity' activity=Activity
    '}';

ConditionalActivity_Impl returns ConditionalActivity:
	'ConditionalActivity'
	'{'
		('annotations' '{' annotations+=EAnnotation ( "," annotations+=EAnnotation)* '}' )?
		'condition' condition=BooleanExpression
		'activity' activity=Activity
    '}';

PreConditionActivity_Impl returns PreConditionActivity:
	'PreConditionActivity'
	'{'
		'preCondition' preCondition=[PreCondition|EString]
		('annotations' '{' annotations+=EAnnotation ( "," annotations+=EAnnotation)* '}' )?
		('requestContraints' '{' requestContraints+=Constraint ( "," requestContraints+=Constraint)* '}' )?
		('exceptionContraints' '{' exceptionContraints+=Constraint ( "," exceptionContraints+=Constraint)* '}' )?
    '}';

PostConditionActivity_Impl returns PostConditionActivity:
	'PostConditionActivity'
	'{'
		'postCondition' postCondition=[PostCondition|EString]
		('annotations' '{' annotations+=EAnnotation ( "," annotations+=EAnnotation)* '}' )?
		('requestContraints' '{' requestContraints+=Constraint ( "," requestContraints+=Constraint)* '}' )?
		('inverseRequestContraints' '{' inverseRequestContraints+=Constraint ( "," inverseRequestContraints+=Constraint)* '}' )?
    '}';

PrePostConditionActivity returns PrePostConditionActivity:
	'PrePostConditionActivity'
	'{'
		'preCondition' preCondition=[PreCondition|EString]
		'postCondition' postCondition=[PostCondition|EString]
		('annotations' '{' annotations+=EAnnotation ( "," annotations+=EAnnotation)* '}' )?
		('requestContraints' '{' requestContraints+=Constraint ( "," requestContraints+=Constraint)* '}' )?
		('exceptionContraints' '{' exceptionContraints+=Constraint ( "," exceptionContraints+=Constraint)* '}' )?
		('inverseRequestContraints' '{' inverseRequestContraints+=Constraint ( "," inverseRequestContraints+=Constraint)* '}' )?
    '}';

ReturnResultActivity returns ReturnResultActivity:
	{ReturnResultActivity}
	'ReturnResultActivity'
	'{'
		('annotations' '{' annotations+=EAnnotation ( "," annotations+=EAnnotation)* '}' )?
		('resultContraints' '{' resultContraints+=Constraint ( "," resultContraints+=Constraint)* '}' )?
    '}';

Expression_Impl returns Expression:
	'Expression'
	'{'
		'language' language=EString
		'expressionString' expressionString=EString
    '}';

BooleanExpression returns BooleanExpression:
	'BooleanExpression'
	'{'
		'language' language=EString
		'expressionString' expressionString=EString
    '}';

EBigInteger returns ecore::EBigInteger:
	'-'? INT;
